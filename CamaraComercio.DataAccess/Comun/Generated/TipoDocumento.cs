using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace CamaraComercio.DataAccess.Comun
{
	/// <summary>
	/// Strongly-typed collection for the TipoDocumento class.
	/// </summary>
    [Serializable]
	public partial class TipoDocumentoCollection : ActiveList<TipoDocumento, TipoDocumentoCollection>
	{	   
		public TipoDocumentoCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TipoDocumentoCollection</returns>
		public TipoDocumentoCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TipoDocumento o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TipoDocumento table.
	/// </summary>
	[Serializable]
	public partial class TipoDocumento : ActiveRecord<TipoDocumento>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TipoDocumento()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TipoDocumento(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TipoDocumento(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TipoDocumento(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TipoDocumento", TableType.Table, DataService.GetInstance("ComunProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarTipoDocumentoId = new TableSchema.TableColumn(schema);
				colvarTipoDocumentoId.ColumnName = "TipoDocumentoId";
				colvarTipoDocumentoId.DataType = DbType.Int32;
				colvarTipoDocumentoId.MaxLength = 0;
				colvarTipoDocumentoId.AutoIncrement = true;
				colvarTipoDocumentoId.IsNullable = false;
				colvarTipoDocumentoId.IsPrimaryKey = true;
				colvarTipoDocumentoId.IsForeignKey = false;
				colvarTipoDocumentoId.IsReadOnly = false;
				colvarTipoDocumentoId.DefaultSetting = @"";
				colvarTipoDocumentoId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTipoDocumentoId);
				
				TableSchema.TableColumn colvarNombre = new TableSchema.TableColumn(schema);
				colvarNombre.ColumnName = "Nombre";
				colvarNombre.DataType = DbType.String;
				colvarNombre.MaxLength = 150;
				colvarNombre.AutoIncrement = false;
				colvarNombre.IsNullable = false;
				colvarNombre.IsPrimaryKey = false;
				colvarNombre.IsForeignKey = false;
				colvarNombre.IsReadOnly = false;
				colvarNombre.DefaultSetting = @"";
				colvarNombre.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNombre);
				
				TableSchema.TableColumn colvarRegistrable = new TableSchema.TableColumn(schema);
				colvarRegistrable.ColumnName = "Registrable";
				colvarRegistrable.DataType = DbType.Boolean;
				colvarRegistrable.MaxLength = 0;
				colvarRegistrable.AutoIncrement = false;
				colvarRegistrable.IsNullable = false;
				colvarRegistrable.IsPrimaryKey = false;
				colvarRegistrable.IsForeignKey = false;
				colvarRegistrable.IsReadOnly = false;
				
						colvarRegistrable.DefaultSetting = @"((0))";
				colvarRegistrable.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegistrable);
				
				TableSchema.TableColumn colvarCostoOriginal = new TableSchema.TableColumn(schema);
				colvarCostoOriginal.ColumnName = "CostoOriginal";
				colvarCostoOriginal.DataType = DbType.Currency;
				colvarCostoOriginal.MaxLength = 0;
				colvarCostoOriginal.AutoIncrement = false;
				colvarCostoOriginal.IsNullable = false;
				colvarCostoOriginal.IsPrimaryKey = false;
				colvarCostoOriginal.IsForeignKey = false;
				colvarCostoOriginal.IsReadOnly = false;
				colvarCostoOriginal.DefaultSetting = @"";
				colvarCostoOriginal.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCostoOriginal);
				
				TableSchema.TableColumn colvarCostoCopia = new TableSchema.TableColumn(schema);
				colvarCostoCopia.ColumnName = "CostoCopia";
				colvarCostoCopia.DataType = DbType.Currency;
				colvarCostoCopia.MaxLength = 0;
				colvarCostoCopia.AutoIncrement = false;
				colvarCostoCopia.IsNullable = false;
				colvarCostoCopia.IsPrimaryKey = false;
				colvarCostoCopia.IsForeignKey = false;
				colvarCostoCopia.IsReadOnly = false;
				colvarCostoCopia.DefaultSetting = @"";
				colvarCostoCopia.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCostoCopia);
				
				TableSchema.TableColumn colvarFechaModificacion = new TableSchema.TableColumn(schema);
				colvarFechaModificacion.ColumnName = "FechaModificacion";
				colvarFechaModificacion.DataType = DbType.DateTime;
				colvarFechaModificacion.MaxLength = 0;
				colvarFechaModificacion.AutoIncrement = false;
				colvarFechaModificacion.IsNullable = false;
				colvarFechaModificacion.IsPrimaryKey = false;
				colvarFechaModificacion.IsForeignKey = false;
				colvarFechaModificacion.IsReadOnly = false;
				
						colvarFechaModificacion.DefaultSetting = @"(getdate())";
				colvarFechaModificacion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFechaModificacion);
				
				TableSchema.TableColumn colvarVisible = new TableSchema.TableColumn(schema);
				colvarVisible.ColumnName = "Visible";
				colvarVisible.DataType = DbType.Boolean;
				colvarVisible.MaxLength = 0;
				colvarVisible.AutoIncrement = false;
				colvarVisible.IsNullable = false;
				colvarVisible.IsPrimaryKey = false;
				colvarVisible.IsForeignKey = false;
				colvarVisible.IsReadOnly = false;
				
						colvarVisible.DefaultSetting = @"((0))";
				colvarVisible.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVisible);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ComunProvider"].AddSchema("TipoDocumento",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("TipoDocumentoId")]
		[Bindable(true)]
		public int TipoDocumentoId 
		{
			get { return GetColumnValue<int>(Columns.TipoDocumentoId); }
			set { SetColumnValue(Columns.TipoDocumentoId, value); }
		}
		  
		[XmlAttribute("Nombre")]
		[Bindable(true)]
		public string Nombre 
		{
			get { return GetColumnValue<string>(Columns.Nombre); }
			set { SetColumnValue(Columns.Nombre, value); }
		}
		  
		[XmlAttribute("Registrable")]
		[Bindable(true)]
		public bool Registrable 
		{
			get { return GetColumnValue<bool>(Columns.Registrable); }
			set { SetColumnValue(Columns.Registrable, value); }
		}
		  
		[XmlAttribute("CostoOriginal")]
		[Bindable(true)]
		public decimal CostoOriginal 
		{
			get { return GetColumnValue<decimal>(Columns.CostoOriginal); }
			set { SetColumnValue(Columns.CostoOriginal, value); }
		}
		  
		[XmlAttribute("CostoCopia")]
		[Bindable(true)]
		public decimal CostoCopia 
		{
			get { return GetColumnValue<decimal>(Columns.CostoCopia); }
			set { SetColumnValue(Columns.CostoCopia, value); }
		}
		  
		[XmlAttribute("FechaModificacion")]
		[Bindable(true)]
		public DateTime FechaModificacion 
		{
			get { return GetColumnValue<DateTime>(Columns.FechaModificacion); }
			set { SetColumnValue(Columns.FechaModificacion, value); }
		}
		  
		[XmlAttribute("Visible")]
		[Bindable(true)]
		public bool Visible 
		{
			get { return GetColumnValue<bool>(Columns.Visible); }
			set { SetColumnValue(Columns.Visible, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public CamaraComercio.DataAccess.Comun.TipoReglaDocumentoCollection TipoReglaDocumentoRecords()
		{
			return new CamaraComercio.DataAccess.Comun.TipoReglaDocumentoCollection().Where(TipoReglaDocumento.Columns.TipoDocumentoId, TipoDocumentoId).Load();
		}
		public CamaraComercio.DataAccess.Comun.ServicioDocumentoRequeridoCollection ServicioDocumentoRequeridoRecords()
		{
			return new CamaraComercio.DataAccess.Comun.ServicioDocumentoRequeridoCollection().Where(ServicioDocumentoRequerido.Columns.TipoDocumentoId, TipoDocumentoId).Load();
		}
		#endregion
		
			
		
		//no foreign key tables defined (0)
		
		
		
		#region Many To Many Helpers
		
		 
		public CamaraComercio.DataAccess.Comun.ServicioCollection GetServicioCollection() { return TipoDocumento.GetServicioCollection(this.TipoDocumentoId); }
		public static CamaraComercio.DataAccess.Comun.ServicioCollection GetServicioCollection(int varTipoDocumentoId)
		{
		    SubSonic.QueryCommand cmd = new SubSonic.QueryCommand("SELECT * FROM [dbo].[Servicio] INNER JOIN [ServicioDocumentoRequerido] ON [Servicio].[ServicioId] = [ServicioDocumentoRequerido].[ServicioId] WHERE [ServicioDocumentoRequerido].[TipoDocumentoId] = @TipoDocumentoId", TipoDocumento.Schema.Provider.Name);
			cmd.AddParameter("@TipoDocumentoId", varTipoDocumentoId, DbType.Int32);
			IDataReader rdr = SubSonic.DataService.GetReader(cmd);
			ServicioCollection coll = new ServicioCollection();
			coll.LoadAndCloseReader(rdr);
			return coll;
		}
		
		public static void SaveServicioMap(int varTipoDocumentoId, ServicioCollection items)
		{
			QueryCommandCollection coll = new SubSonic.QueryCommandCollection();
			//delete out the existing
			QueryCommand cmdDel = new QueryCommand("DELETE FROM [ServicioDocumentoRequerido] WHERE [ServicioDocumentoRequerido].[TipoDocumentoId] = @TipoDocumentoId", TipoDocumento.Schema.Provider.Name);
			cmdDel.AddParameter("@TipoDocumentoId", varTipoDocumentoId, DbType.Int32);
			coll.Add(cmdDel);
			DataService.ExecuteTransaction(coll);
			foreach (Servicio item in items)
			{
				ServicioDocumentoRequerido varServicioDocumentoRequerido = new ServicioDocumentoRequerido();
				varServicioDocumentoRequerido.SetColumnValue("TipoDocumentoId", varTipoDocumentoId);
				varServicioDocumentoRequerido.SetColumnValue("ServicioId", item.GetPrimaryKeyValue());
				varServicioDocumentoRequerido.Save();
			}
		}
		public static void SaveServicioMap(int varTipoDocumentoId, System.Web.UI.WebControls.ListItemCollection itemList) 
		{
			QueryCommandCollection coll = new SubSonic.QueryCommandCollection();
			//delete out the existing
			 QueryCommand cmdDel = new QueryCommand("DELETE FROM [ServicioDocumentoRequerido] WHERE [ServicioDocumentoRequerido].[TipoDocumentoId] = @TipoDocumentoId", TipoDocumento.Schema.Provider.Name);
			cmdDel.AddParameter("@TipoDocumentoId", varTipoDocumentoId, DbType.Int32);
			coll.Add(cmdDel);
			DataService.ExecuteTransaction(coll);
			foreach (System.Web.UI.WebControls.ListItem l in itemList) 
			{
				if (l.Selected) 
				{
					ServicioDocumentoRequerido varServicioDocumentoRequerido = new ServicioDocumentoRequerido();
					varServicioDocumentoRequerido.SetColumnValue("TipoDocumentoId", varTipoDocumentoId);
					varServicioDocumentoRequerido.SetColumnValue("ServicioId", l.Value);
					varServicioDocumentoRequerido.Save();
				}
			}
		}
		public static void SaveServicioMap(int varTipoDocumentoId , int[] itemList) 
		{
			QueryCommandCollection coll = new SubSonic.QueryCommandCollection();
			//delete out the existing
			 QueryCommand cmdDel = new QueryCommand("DELETE FROM [ServicioDocumentoRequerido] WHERE [ServicioDocumentoRequerido].[TipoDocumentoId] = @TipoDocumentoId", TipoDocumento.Schema.Provider.Name);
			cmdDel.AddParameter("@TipoDocumentoId", varTipoDocumentoId, DbType.Int32);
			coll.Add(cmdDel);
			DataService.ExecuteTransaction(coll);
			foreach (int item in itemList) 
			{
				ServicioDocumentoRequerido varServicioDocumentoRequerido = new ServicioDocumentoRequerido();
				varServicioDocumentoRequerido.SetColumnValue("TipoDocumentoId", varTipoDocumentoId);
				varServicioDocumentoRequerido.SetColumnValue("ServicioId", item);
				varServicioDocumentoRequerido.Save();
			}
		}
		
		public static void DeleteServicioMap(int varTipoDocumentoId) 
		{
			QueryCommand cmdDel = new QueryCommand("DELETE FROM [ServicioDocumentoRequerido] WHERE [ServicioDocumentoRequerido].[TipoDocumentoId] = @TipoDocumentoId", TipoDocumento.Schema.Provider.Name);
			cmdDel.AddParameter("@TipoDocumentoId", varTipoDocumentoId, DbType.Int32);
			DataService.ExecuteQuery(cmdDel);
		}
		
		 
		public CamaraComercio.DataAccess.Comun.TipoSociedadCollection GetTipoSociedadCollection() { return TipoDocumento.GetTipoSociedadCollection(this.TipoDocumentoId); }
		public static CamaraComercio.DataAccess.Comun.TipoSociedadCollection GetTipoSociedadCollection(int varTipoDocumentoId)
		{
		    SubSonic.QueryCommand cmd = new SubSonic.QueryCommand("SELECT * FROM [dbo].[TipoSociedad] INNER JOIN [ServicioDocumentoRequerido] ON [TipoSociedad].[TipoSociedadId] = [ServicioDocumentoRequerido].[TipoSociedadId] WHERE [ServicioDocumentoRequerido].[TipoDocumentoId] = @TipoDocumentoId", TipoDocumento.Schema.Provider.Name);
			cmd.AddParameter("@TipoDocumentoId", varTipoDocumentoId, DbType.Int32);
			IDataReader rdr = SubSonic.DataService.GetReader(cmd);
			TipoSociedadCollection coll = new TipoSociedadCollection();
			coll.LoadAndCloseReader(rdr);
			return coll;
		}
		
		public static void SaveTipoSociedadMap(int varTipoDocumentoId, TipoSociedadCollection items)
		{
			QueryCommandCollection coll = new SubSonic.QueryCommandCollection();
			//delete out the existing
			QueryCommand cmdDel = new QueryCommand("DELETE FROM [ServicioDocumentoRequerido] WHERE [ServicioDocumentoRequerido].[TipoDocumentoId] = @TipoDocumentoId", TipoDocumento.Schema.Provider.Name);
			cmdDel.AddParameter("@TipoDocumentoId", varTipoDocumentoId, DbType.Int32);
			coll.Add(cmdDel);
			DataService.ExecuteTransaction(coll);
			foreach (TipoSociedad item in items)
			{
				ServicioDocumentoRequerido varServicioDocumentoRequerido = new ServicioDocumentoRequerido();
				varServicioDocumentoRequerido.SetColumnValue("TipoDocumentoId", varTipoDocumentoId);
				varServicioDocumentoRequerido.SetColumnValue("TipoSociedadId", item.GetPrimaryKeyValue());
				varServicioDocumentoRequerido.Save();
			}
		}
		public static void SaveTipoSociedadMap(int varTipoDocumentoId, System.Web.UI.WebControls.ListItemCollection itemList) 
		{
			QueryCommandCollection coll = new SubSonic.QueryCommandCollection();
			//delete out the existing
			 QueryCommand cmdDel = new QueryCommand("DELETE FROM [ServicioDocumentoRequerido] WHERE [ServicioDocumentoRequerido].[TipoDocumentoId] = @TipoDocumentoId", TipoDocumento.Schema.Provider.Name);
			cmdDel.AddParameter("@TipoDocumentoId", varTipoDocumentoId, DbType.Int32);
			coll.Add(cmdDel);
			DataService.ExecuteTransaction(coll);
			foreach (System.Web.UI.WebControls.ListItem l in itemList) 
			{
				if (l.Selected) 
				{
					ServicioDocumentoRequerido varServicioDocumentoRequerido = new ServicioDocumentoRequerido();
					varServicioDocumentoRequerido.SetColumnValue("TipoDocumentoId", varTipoDocumentoId);
					varServicioDocumentoRequerido.SetColumnValue("TipoSociedadId", l.Value);
					varServicioDocumentoRequerido.Save();
				}
			}
		}
		public static void SaveTipoSociedadMap(int varTipoDocumentoId , int[] itemList) 
		{
			QueryCommandCollection coll = new SubSonic.QueryCommandCollection();
			//delete out the existing
			 QueryCommand cmdDel = new QueryCommand("DELETE FROM [ServicioDocumentoRequerido] WHERE [ServicioDocumentoRequerido].[TipoDocumentoId] = @TipoDocumentoId", TipoDocumento.Schema.Provider.Name);
			cmdDel.AddParameter("@TipoDocumentoId", varTipoDocumentoId, DbType.Int32);
			coll.Add(cmdDel);
			DataService.ExecuteTransaction(coll);
			foreach (int item in itemList) 
			{
				ServicioDocumentoRequerido varServicioDocumentoRequerido = new ServicioDocumentoRequerido();
				varServicioDocumentoRequerido.SetColumnValue("TipoDocumentoId", varTipoDocumentoId);
				varServicioDocumentoRequerido.SetColumnValue("TipoSociedadId", item);
				varServicioDocumentoRequerido.Save();
			}
		}
		
		public static void DeleteTipoSociedadMap(int varTipoDocumentoId) 
		{
			QueryCommand cmdDel = new QueryCommand("DELETE FROM [ServicioDocumentoRequerido] WHERE [ServicioDocumentoRequerido].[TipoDocumentoId] = @TipoDocumentoId", TipoDocumento.Schema.Provider.Name);
			cmdDel.AddParameter("@TipoDocumentoId", varTipoDocumentoId, DbType.Int32);
			DataService.ExecuteQuery(cmdDel);
		}
		
		#endregion
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varNombre,bool varRegistrable,decimal varCostoOriginal,decimal varCostoCopia,DateTime varFechaModificacion,bool varVisible)
		{
			TipoDocumento item = new TipoDocumento();
			
			item.Nombre = varNombre;
			
			item.Registrable = varRegistrable;
			
			item.CostoOriginal = varCostoOriginal;
			
			item.CostoCopia = varCostoCopia;
			
			item.FechaModificacion = varFechaModificacion;
			
			item.Visible = varVisible;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varTipoDocumentoId,string varNombre,bool varRegistrable,decimal varCostoOriginal,decimal varCostoCopia,DateTime varFechaModificacion,bool varVisible)
		{
			TipoDocumento item = new TipoDocumento();
			
				item.TipoDocumentoId = varTipoDocumentoId;
			
				item.Nombre = varNombre;
			
				item.Registrable = varRegistrable;
			
				item.CostoOriginal = varCostoOriginal;
			
				item.CostoCopia = varCostoCopia;
			
				item.FechaModificacion = varFechaModificacion;
			
				item.Visible = varVisible;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn TipoDocumentoIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn NombreColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn RegistrableColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn CostoOriginalColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn CostoCopiaColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn FechaModificacionColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn VisibleColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string TipoDocumentoId = @"TipoDocumentoId";
			 public static string Nombre = @"Nombre";
			 public static string Registrable = @"Registrable";
			 public static string CostoOriginal = @"CostoOriginal";
			 public static string CostoCopia = @"CostoCopia";
			 public static string FechaModificacion = @"FechaModificacion";
			 public static string Visible = @"Visible";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
