using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace CamaraComercio.DataAccess.SRM
{
	/// <summary>
	/// Strongly-typed collection for the DefinicionColumnas class.
	/// </summary>
    [Serializable]
	public partial class DefinicionColumnasCollection : ActiveList<DefinicionColumnas, DefinicionColumnasCollection>
	{	   
		public DefinicionColumnasCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>DefinicionColumnasCollection</returns>
		public DefinicionColumnasCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                DefinicionColumnas o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the DEFINICION_COLUMNAS table.
	/// </summary>
	[Serializable]
	public partial class DefinicionColumnas : ActiveRecord<DefinicionColumnas>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public DefinicionColumnas()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public DefinicionColumnas(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public DefinicionColumnas(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public DefinicionColumnas(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("DEFINICION_COLUMNAS", TableType.Table, DataService.GetInstance("SrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"SRM_INFORMATION_SCHEMA";
				//columns
				
				TableSchema.TableColumn colvarColumnaId = new TableSchema.TableColumn(schema);
				colvarColumnaId.ColumnName = "COLUMNA_ID";
				colvarColumnaId.DataType = DbType.Int32;
				colvarColumnaId.MaxLength = 0;
				colvarColumnaId.AutoIncrement = true;
				colvarColumnaId.IsNullable = false;
				colvarColumnaId.IsPrimaryKey = true;
				colvarColumnaId.IsForeignKey = false;
				colvarColumnaId.IsReadOnly = false;
				colvarColumnaId.DefaultSetting = @"";
				colvarColumnaId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarColumnaId);
				
				TableSchema.TableColumn colvarNombreTabla = new TableSchema.TableColumn(schema);
				colvarNombreTabla.ColumnName = "NOMBRE_TABLA";
				colvarNombreTabla.DataType = DbType.String;
				colvarNombreTabla.MaxLength = -1;
				colvarNombreTabla.AutoIncrement = false;
				colvarNombreTabla.IsNullable = false;
				colvarNombreTabla.IsPrimaryKey = false;
				colvarNombreTabla.IsForeignKey = false;
				colvarNombreTabla.IsReadOnly = false;
				colvarNombreTabla.DefaultSetting = @"";
				colvarNombreTabla.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNombreTabla);
				
				TableSchema.TableColumn colvarNombreEsquema = new TableSchema.TableColumn(schema);
				colvarNombreEsquema.ColumnName = "NOMBRE_ESQUEMA";
				colvarNombreEsquema.DataType = DbType.String;
				colvarNombreEsquema.MaxLength = -1;
				colvarNombreEsquema.AutoIncrement = false;
				colvarNombreEsquema.IsNullable = false;
				colvarNombreEsquema.IsPrimaryKey = false;
				colvarNombreEsquema.IsForeignKey = false;
				colvarNombreEsquema.IsReadOnly = false;
				colvarNombreEsquema.DefaultSetting = @"";
				colvarNombreEsquema.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNombreEsquema);
				
				TableSchema.TableColumn colvarNombreTablaCorto = new TableSchema.TableColumn(schema);
				colvarNombreTablaCorto.ColumnName = "NOMBRE_TABLA_CORTO";
				colvarNombreTablaCorto.DataType = DbType.String;
				colvarNombreTablaCorto.MaxLength = 50;
				colvarNombreTablaCorto.AutoIncrement = false;
				colvarNombreTablaCorto.IsNullable = false;
				colvarNombreTablaCorto.IsPrimaryKey = false;
				colvarNombreTablaCorto.IsForeignKey = false;
				colvarNombreTablaCorto.IsReadOnly = false;
				colvarNombreTablaCorto.DefaultSetting = @"";
				colvarNombreTablaCorto.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNombreTablaCorto);
				
				TableSchema.TableColumn colvarNombreColumna = new TableSchema.TableColumn(schema);
				colvarNombreColumna.ColumnName = "NOMBRE_COLUMNA";
				colvarNombreColumna.DataType = DbType.String;
				colvarNombreColumna.MaxLength = -1;
				colvarNombreColumna.AutoIncrement = false;
				colvarNombreColumna.IsNullable = false;
				colvarNombreColumna.IsPrimaryKey = false;
				colvarNombreColumna.IsForeignKey = false;
				colvarNombreColumna.IsReadOnly = false;
				colvarNombreColumna.DefaultSetting = @"";
				colvarNombreColumna.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNombreColumna);
				
				TableSchema.TableColumn colvarAceptaNulo = new TableSchema.TableColumn(schema);
				colvarAceptaNulo.ColumnName = "ACEPTA_NULO";
				colvarAceptaNulo.DataType = DbType.Boolean;
				colvarAceptaNulo.MaxLength = 0;
				colvarAceptaNulo.AutoIncrement = false;
				colvarAceptaNulo.IsNullable = false;
				colvarAceptaNulo.IsPrimaryKey = false;
				colvarAceptaNulo.IsForeignKey = false;
				colvarAceptaNulo.IsReadOnly = false;
				colvarAceptaNulo.DefaultSetting = @"";
				colvarAceptaNulo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAceptaNulo);
				
				TableSchema.TableColumn colvarTipoDatos = new TableSchema.TableColumn(schema);
				colvarTipoDatos.ColumnName = "TIPO_DATOS";
				colvarTipoDatos.DataType = DbType.String;
				colvarTipoDatos.MaxLength = 128;
				colvarTipoDatos.AutoIncrement = false;
				colvarTipoDatos.IsNullable = false;
				colvarTipoDatos.IsPrimaryKey = false;
				colvarTipoDatos.IsForeignKey = false;
				colvarTipoDatos.IsReadOnly = false;
				colvarTipoDatos.DefaultSetting = @"";
				colvarTipoDatos.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTipoDatos);
				
				TableSchema.TableColumn colvarLongitud = new TableSchema.TableColumn(schema);
				colvarLongitud.ColumnName = "LONGITUD";
				colvarLongitud.DataType = DbType.Int32;
				colvarLongitud.MaxLength = 0;
				colvarLongitud.AutoIncrement = false;
				colvarLongitud.IsNullable = true;
				colvarLongitud.IsPrimaryKey = false;
				colvarLongitud.IsForeignKey = false;
				colvarLongitud.IsReadOnly = false;
				colvarLongitud.DefaultSetting = @"";
				colvarLongitud.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLongitud);
				
				TableSchema.TableColumn colvarVisible = new TableSchema.TableColumn(schema);
				colvarVisible.ColumnName = "VISIBLE";
				colvarVisible.DataType = DbType.Boolean;
				colvarVisible.MaxLength = 0;
				colvarVisible.AutoIncrement = false;
				colvarVisible.IsNullable = false;
				colvarVisible.IsPrimaryKey = false;
				colvarVisible.IsForeignKey = false;
				colvarVisible.IsReadOnly = false;
				colvarVisible.DefaultSetting = @"";
				colvarVisible.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVisible);
				
				TableSchema.TableColumn colvarTablaEnlace = new TableSchema.TableColumn(schema);
				colvarTablaEnlace.ColumnName = "TABLA_ENLACE";
				colvarTablaEnlace.DataType = DbType.String;
				colvarTablaEnlace.MaxLength = -1;
				colvarTablaEnlace.AutoIncrement = false;
				colvarTablaEnlace.IsNullable = true;
				colvarTablaEnlace.IsPrimaryKey = false;
				colvarTablaEnlace.IsForeignKey = false;
				colvarTablaEnlace.IsReadOnly = false;
				colvarTablaEnlace.DefaultSetting = @"";
				colvarTablaEnlace.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTablaEnlace);
				
				TableSchema.TableColumn colvarColumnaEnlace = new TableSchema.TableColumn(schema);
				colvarColumnaEnlace.ColumnName = "COLUMNA_ENLACE";
				colvarColumnaEnlace.DataType = DbType.String;
				colvarColumnaEnlace.MaxLength = -1;
				colvarColumnaEnlace.AutoIncrement = false;
				colvarColumnaEnlace.IsNullable = true;
				colvarColumnaEnlace.IsPrimaryKey = false;
				colvarColumnaEnlace.IsForeignKey = false;
				colvarColumnaEnlace.IsReadOnly = false;
				colvarColumnaEnlace.DefaultSetting = @"";
				colvarColumnaEnlace.ForeignKeyTableName = "";
				schema.Columns.Add(colvarColumnaEnlace);
				
				TableSchema.TableColumn colvarTipoEnlace = new TableSchema.TableColumn(schema);
				colvarTipoEnlace.ColumnName = "TIPO_ENLACE";
				colvarTipoEnlace.DataType = DbType.Int32;
				colvarTipoEnlace.MaxLength = 0;
				colvarTipoEnlace.AutoIncrement = false;
				colvarTipoEnlace.IsNullable = true;
				colvarTipoEnlace.IsPrimaryKey = false;
				colvarTipoEnlace.IsForeignKey = false;
				colvarTipoEnlace.IsReadOnly = false;
				colvarTipoEnlace.DefaultSetting = @"";
				colvarTipoEnlace.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTipoEnlace);
				
				TableSchema.TableColumn colvarConsulta = new TableSchema.TableColumn(schema);
				colvarConsulta.ColumnName = "CONSULTA";
				colvarConsulta.DataType = DbType.String;
				colvarConsulta.MaxLength = -1;
				colvarConsulta.AutoIncrement = false;
				colvarConsulta.IsNullable = true;
				colvarConsulta.IsPrimaryKey = false;
				colvarConsulta.IsForeignKey = false;
				colvarConsulta.IsReadOnly = false;
				colvarConsulta.DefaultSetting = @"";
				colvarConsulta.ForeignKeyTableName = "";
				schema.Columns.Add(colvarConsulta);
				
				TableSchema.TableColumn colvarDescripcion = new TableSchema.TableColumn(schema);
				colvarDescripcion.ColumnName = "DESCRIPCION";
				colvarDescripcion.DataType = DbType.String;
				colvarDescripcion.MaxLength = -1;
				colvarDescripcion.AutoIncrement = false;
				colvarDescripcion.IsNullable = true;
				colvarDescripcion.IsPrimaryKey = false;
				colvarDescripcion.IsForeignKey = false;
				colvarDescripcion.IsReadOnly = false;
				colvarDescripcion.DefaultSetting = @"";
				colvarDescripcion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescripcion);
				
				TableSchema.TableColumn colvarTablaDefault = new TableSchema.TableColumn(schema);
				colvarTablaDefault.ColumnName = "TABLA_DEFAULT";
				colvarTablaDefault.DataType = DbType.Boolean;
				colvarTablaDefault.MaxLength = 0;
				colvarTablaDefault.AutoIncrement = false;
				colvarTablaDefault.IsNullable = false;
				colvarTablaDefault.IsPrimaryKey = false;
				colvarTablaDefault.IsForeignKey = false;
				colvarTablaDefault.IsReadOnly = false;
				colvarTablaDefault.DefaultSetting = @"";
				colvarTablaDefault.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTablaDefault);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["SrmProvider"].AddSchema("DEFINICION_COLUMNAS",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("ColumnaId")]
		[Bindable(true)]
		public int ColumnaId 
		{
			get { return GetColumnValue<int>(Columns.ColumnaId); }
			set { SetColumnValue(Columns.ColumnaId, value); }
		}
		  
		[XmlAttribute("NombreTabla")]
		[Bindable(true)]
		public string NombreTabla 
		{
			get { return GetColumnValue<string>(Columns.NombreTabla); }
			set { SetColumnValue(Columns.NombreTabla, value); }
		}
		  
		[XmlAttribute("NombreEsquema")]
		[Bindable(true)]
		public string NombreEsquema 
		{
			get { return GetColumnValue<string>(Columns.NombreEsquema); }
			set { SetColumnValue(Columns.NombreEsquema, value); }
		}
		  
		[XmlAttribute("NombreTablaCorto")]
		[Bindable(true)]
		public string NombreTablaCorto 
		{
			get { return GetColumnValue<string>(Columns.NombreTablaCorto); }
			set { SetColumnValue(Columns.NombreTablaCorto, value); }
		}
		  
		[XmlAttribute("NombreColumna")]
		[Bindable(true)]
		public string NombreColumna 
		{
			get { return GetColumnValue<string>(Columns.NombreColumna); }
			set { SetColumnValue(Columns.NombreColumna, value); }
		}
		  
		[XmlAttribute("AceptaNulo")]
		[Bindable(true)]
		public bool AceptaNulo 
		{
			get { return GetColumnValue<bool>(Columns.AceptaNulo); }
			set { SetColumnValue(Columns.AceptaNulo, value); }
		}
		  
		[XmlAttribute("TipoDatos")]
		[Bindable(true)]
		public string TipoDatos 
		{
			get { return GetColumnValue<string>(Columns.TipoDatos); }
			set { SetColumnValue(Columns.TipoDatos, value); }
		}
		  
		[XmlAttribute("Longitud")]
		[Bindable(true)]
		public int? Longitud 
		{
			get { return GetColumnValue<int?>(Columns.Longitud); }
			set { SetColumnValue(Columns.Longitud, value); }
		}
		  
		[XmlAttribute("Visible")]
		[Bindable(true)]
		public bool Visible 
		{
			get { return GetColumnValue<bool>(Columns.Visible); }
			set { SetColumnValue(Columns.Visible, value); }
		}
		  
		[XmlAttribute("TablaEnlace")]
		[Bindable(true)]
		public string TablaEnlace 
		{
			get { return GetColumnValue<string>(Columns.TablaEnlace); }
			set { SetColumnValue(Columns.TablaEnlace, value); }
		}
		  
		[XmlAttribute("ColumnaEnlace")]
		[Bindable(true)]
		public string ColumnaEnlace 
		{
			get { return GetColumnValue<string>(Columns.ColumnaEnlace); }
			set { SetColumnValue(Columns.ColumnaEnlace, value); }
		}
		  
		[XmlAttribute("TipoEnlace")]
		[Bindable(true)]
		public int? TipoEnlace 
		{
			get { return GetColumnValue<int?>(Columns.TipoEnlace); }
			set { SetColumnValue(Columns.TipoEnlace, value); }
		}
		  
		[XmlAttribute("Consulta")]
		[Bindable(true)]
		public string Consulta 
		{
			get { return GetColumnValue<string>(Columns.Consulta); }
			set { SetColumnValue(Columns.Consulta, value); }
		}
		  
		[XmlAttribute("Descripcion")]
		[Bindable(true)]
		public string Descripcion 
		{
			get { return GetColumnValue<string>(Columns.Descripcion); }
			set { SetColumnValue(Columns.Descripcion, value); }
		}
		  
		[XmlAttribute("TablaDefault")]
		[Bindable(true)]
		public bool TablaDefault 
		{
			get { return GetColumnValue<bool>(Columns.TablaDefault); }
			set { SetColumnValue(Columns.TablaDefault, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varNombreTabla,string varNombreEsquema,string varNombreTablaCorto,string varNombreColumna,bool varAceptaNulo,string varTipoDatos,int? varLongitud,bool varVisible,string varTablaEnlace,string varColumnaEnlace,int? varTipoEnlace,string varConsulta,string varDescripcion,bool varTablaDefault)
		{
			DefinicionColumnas item = new DefinicionColumnas();
			
			item.NombreTabla = varNombreTabla;
			
			item.NombreEsquema = varNombreEsquema;
			
			item.NombreTablaCorto = varNombreTablaCorto;
			
			item.NombreColumna = varNombreColumna;
			
			item.AceptaNulo = varAceptaNulo;
			
			item.TipoDatos = varTipoDatos;
			
			item.Longitud = varLongitud;
			
			item.Visible = varVisible;
			
			item.TablaEnlace = varTablaEnlace;
			
			item.ColumnaEnlace = varColumnaEnlace;
			
			item.TipoEnlace = varTipoEnlace;
			
			item.Consulta = varConsulta;
			
			item.Descripcion = varDescripcion;
			
			item.TablaDefault = varTablaDefault;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varColumnaId,string varNombreTabla,string varNombreEsquema,string varNombreTablaCorto,string varNombreColumna,bool varAceptaNulo,string varTipoDatos,int? varLongitud,bool varVisible,string varTablaEnlace,string varColumnaEnlace,int? varTipoEnlace,string varConsulta,string varDescripcion,bool varTablaDefault)
		{
			DefinicionColumnas item = new DefinicionColumnas();
			
				item.ColumnaId = varColumnaId;
			
				item.NombreTabla = varNombreTabla;
			
				item.NombreEsquema = varNombreEsquema;
			
				item.NombreTablaCorto = varNombreTablaCorto;
			
				item.NombreColumna = varNombreColumna;
			
				item.AceptaNulo = varAceptaNulo;
			
				item.TipoDatos = varTipoDatos;
			
				item.Longitud = varLongitud;
			
				item.Visible = varVisible;
			
				item.TablaEnlace = varTablaEnlace;
			
				item.ColumnaEnlace = varColumnaEnlace;
			
				item.TipoEnlace = varTipoEnlace;
			
				item.Consulta = varConsulta;
			
				item.Descripcion = varDescripcion;
			
				item.TablaDefault = varTablaDefault;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ColumnaIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn NombreTablaColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn NombreEsquemaColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn NombreTablaCortoColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn NombreColumnaColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn AceptaNuloColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn TipoDatosColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn LongitudColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn VisibleColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn TablaEnlaceColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn ColumnaEnlaceColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn TipoEnlaceColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn ConsultaColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn DescripcionColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn TablaDefaultColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string ColumnaId = @"COLUMNA_ID";
			 public static string NombreTabla = @"NOMBRE_TABLA";
			 public static string NombreEsquema = @"NOMBRE_ESQUEMA";
			 public static string NombreTablaCorto = @"NOMBRE_TABLA_CORTO";
			 public static string NombreColumna = @"NOMBRE_COLUMNA";
			 public static string AceptaNulo = @"ACEPTA_NULO";
			 public static string TipoDatos = @"TIPO_DATOS";
			 public static string Longitud = @"LONGITUD";
			 public static string Visible = @"VISIBLE";
			 public static string TablaEnlace = @"TABLA_ENLACE";
			 public static string ColumnaEnlace = @"COLUMNA_ENLACE";
			 public static string TipoEnlace = @"TIPO_ENLACE";
			 public static string Consulta = @"CONSULTA";
			 public static string Descripcion = @"DESCRIPCION";
			 public static string TablaDefault = @"TABLA_DEFAULT";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
