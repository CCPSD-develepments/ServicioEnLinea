using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace CamaraComercio.DataAccess.SRM
{
	/// <summary>
	/// Strongly-typed collection for the UsuariosContadores class.
	/// </summary>
    [Serializable]
	public partial class UsuariosContadoresCollection : ActiveList<UsuariosContadores, UsuariosContadoresCollection>
	{	   
		public UsuariosContadoresCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>UsuariosContadoresCollection</returns>
		public UsuariosContadoresCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                UsuariosContadores o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the UsuariosContadores table.
	/// </summary>
	[Serializable]
	public partial class UsuariosContadores : ActiveRecord<UsuariosContadores>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public UsuariosContadores()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public UsuariosContadores(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public UsuariosContadores(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public UsuariosContadores(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("UsuariosContadores", TableType.Table, DataService.GetInstance("SrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarUsuarioContadorId = new TableSchema.TableColumn(schema);
				colvarUsuarioContadorId.ColumnName = "UsuarioContadorId";
				colvarUsuarioContadorId.DataType = DbType.Int32;
				colvarUsuarioContadorId.MaxLength = 0;
				colvarUsuarioContadorId.AutoIncrement = true;
				colvarUsuarioContadorId.IsNullable = false;
				colvarUsuarioContadorId.IsPrimaryKey = true;
				colvarUsuarioContadorId.IsForeignKey = false;
				colvarUsuarioContadorId.IsReadOnly = false;
				colvarUsuarioContadorId.DefaultSetting = @"";
				colvarUsuarioContadorId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUsuarioContadorId);
				
				TableSchema.TableColumn colvarUsuarioId = new TableSchema.TableColumn(schema);
				colvarUsuarioId.ColumnName = "UsuarioId";
				colvarUsuarioId.DataType = DbType.Int32;
				colvarUsuarioId.MaxLength = 0;
				colvarUsuarioId.AutoIncrement = false;
				colvarUsuarioId.IsNullable = false;
				colvarUsuarioId.IsPrimaryKey = false;
				colvarUsuarioId.IsForeignKey = true;
				colvarUsuarioId.IsReadOnly = false;
				colvarUsuarioId.DefaultSetting = @"";
				
					colvarUsuarioId.ForeignKeyTableName = "Usuarios";
				schema.Columns.Add(colvarUsuarioId);
				
				TableSchema.TableColumn colvarTipoTransacion = new TableSchema.TableColumn(schema);
				colvarTipoTransacion.ColumnName = "TipoTransacion";
				colvarTipoTransacion.DataType = DbType.AnsiStringFixedLength;
				colvarTipoTransacion.MaxLength = 2;
				colvarTipoTransacion.AutoIncrement = false;
				colvarTipoTransacion.IsNullable = false;
				colvarTipoTransacion.IsPrimaryKey = false;
				colvarTipoTransacion.IsForeignKey = false;
				colvarTipoTransacion.IsReadOnly = false;
				colvarTipoTransacion.DefaultSetting = @"";
				colvarTipoTransacion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTipoTransacion);
				
				TableSchema.TableColumn colvarPrioridad = new TableSchema.TableColumn(schema);
				colvarPrioridad.ColumnName = "Prioridad";
				colvarPrioridad.DataType = DbType.Int32;
				colvarPrioridad.MaxLength = 0;
				colvarPrioridad.AutoIncrement = false;
				colvarPrioridad.IsNullable = false;
				colvarPrioridad.IsPrimaryKey = false;
				colvarPrioridad.IsForeignKey = false;
				colvarPrioridad.IsReadOnly = false;
				colvarPrioridad.DefaultSetting = @"";
				colvarPrioridad.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrioridad);
				
				TableSchema.TableColumn colvarContador = new TableSchema.TableColumn(schema);
				colvarContador.ColumnName = "Contador";
				colvarContador.DataType = DbType.Int32;
				colvarContador.MaxLength = 0;
				colvarContador.AutoIncrement = false;
				colvarContador.IsNullable = false;
				colvarContador.IsPrimaryKey = false;
				colvarContador.IsForeignKey = false;
				colvarContador.IsReadOnly = false;
				colvarContador.DefaultSetting = @"";
				colvarContador.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContador);
				
				TableSchema.TableColumn colvarActivo = new TableSchema.TableColumn(schema);
				colvarActivo.ColumnName = "Activo";
				colvarActivo.DataType = DbType.Boolean;
				colvarActivo.MaxLength = 0;
				colvarActivo.AutoIncrement = false;
				colvarActivo.IsNullable = false;
				colvarActivo.IsPrimaryKey = false;
				colvarActivo.IsForeignKey = false;
				colvarActivo.IsReadOnly = false;
				
						colvarActivo.DefaultSetting = @"((1))";
				colvarActivo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActivo);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["SrmProvider"].AddSchema("UsuariosContadores",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("UsuarioContadorId")]
		[Bindable(true)]
		public int UsuarioContadorId 
		{
			get { return GetColumnValue<int>(Columns.UsuarioContadorId); }
			set { SetColumnValue(Columns.UsuarioContadorId, value); }
		}
		  
		[XmlAttribute("UsuarioId")]
		[Bindable(true)]
		public int UsuarioId 
		{
			get { return GetColumnValue<int>(Columns.UsuarioId); }
			set { SetColumnValue(Columns.UsuarioId, value); }
		}
		  
		[XmlAttribute("TipoTransacion")]
		[Bindable(true)]
		public string TipoTransacion 
		{
			get { return GetColumnValue<string>(Columns.TipoTransacion); }
			set { SetColumnValue(Columns.TipoTransacion, value); }
		}
		  
		[XmlAttribute("Prioridad")]
		[Bindable(true)]
		public int Prioridad 
		{
			get { return GetColumnValue<int>(Columns.Prioridad); }
			set { SetColumnValue(Columns.Prioridad, value); }
		}
		  
		[XmlAttribute("Contador")]
		[Bindable(true)]
		public int Contador 
		{
			get { return GetColumnValue<int>(Columns.Contador); }
			set { SetColumnValue(Columns.Contador, value); }
		}
		  
		[XmlAttribute("Activo")]
		[Bindable(true)]
		public bool Activo 
		{
			get { return GetColumnValue<bool>(Columns.Activo); }
			set { SetColumnValue(Columns.Activo, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a Usuarios ActiveRecord object related to this UsuariosContadores
		/// 
		/// </summary>
		public CamaraComercio.DataAccess.SRM.Usuarios Usuarios
		{
			get { return CamaraComercio.DataAccess.SRM.Usuarios.FetchByID(this.UsuarioId); }
			set { SetColumnValue("UsuarioId", value.UsuarioId); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varUsuarioId,string varTipoTransacion,int varPrioridad,int varContador,bool varActivo)
		{
			UsuariosContadores item = new UsuariosContadores();
			
			item.UsuarioId = varUsuarioId;
			
			item.TipoTransacion = varTipoTransacion;
			
			item.Prioridad = varPrioridad;
			
			item.Contador = varContador;
			
			item.Activo = varActivo;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varUsuarioContadorId,int varUsuarioId,string varTipoTransacion,int varPrioridad,int varContador,bool varActivo)
		{
			UsuariosContadores item = new UsuariosContadores();
			
				item.UsuarioContadorId = varUsuarioContadorId;
			
				item.UsuarioId = varUsuarioId;
			
				item.TipoTransacion = varTipoTransacion;
			
				item.Prioridad = varPrioridad;
			
				item.Contador = varContador;
			
				item.Activo = varActivo;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn UsuarioContadorIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn UsuarioIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn TipoTransacionColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn PrioridadColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ContadorColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ActivoColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string UsuarioContadorId = @"UsuarioContadorId";
			 public static string UsuarioId = @"UsuarioId";
			 public static string TipoTransacion = @"TipoTransacion";
			 public static string Prioridad = @"Prioridad";
			 public static string Contador = @"Contador";
			 public static string Activo = @"Activo";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
