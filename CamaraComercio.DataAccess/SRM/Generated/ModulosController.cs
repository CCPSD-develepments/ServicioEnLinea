using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace CamaraComercio.DataAccess.SRM
{
    /// <summary>
    /// Controller class for Modulos
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class ModulosController
    {
        // Preload our schema..
        Modulos thisSchemaLoad = new Modulos();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public ModulosCollection FetchAll()
        {
            ModulosCollection coll = new ModulosCollection();
            Query qry = new Query(Modulos.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public ModulosCollection FetchByID(object ModuloId)
        {
            ModulosCollection coll = new ModulosCollection().Where("ModuloId", ModuloId).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public ModulosCollection FetchByQuery(Query qry)
        {
            ModulosCollection coll = new ModulosCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object ModuloId)
        {
            return (Modulos.Delete(ModuloId) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object ModuloId)
        {
            return (Modulos.Destroy(ModuloId) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(int? ModuloPadreId,string Nombre,string NombreEtiqueta,string Tag,int? Orden,bool? CreateSerparator,byte[] Icon,bool? ShowInNavBar,bool? ShowInTreeNavBar,bool? SoloAdministrador,bool? HeredaPadre,bool? HiddenOption)
	    {
		    Modulos item = new Modulos();
		    
            item.ModuloPadreId = ModuloPadreId;
            
            item.Nombre = Nombre;
            
            item.NombreEtiqueta = NombreEtiqueta;
            
            item.Tag = Tag;
            
            item.Orden = Orden;
            
            item.CreateSerparator = CreateSerparator;
            
            item.Icon = Icon;
            
            item.ShowInNavBar = ShowInNavBar;
            
            item.ShowInTreeNavBar = ShowInTreeNavBar;
            
            item.SoloAdministrador = SoloAdministrador;
            
            item.HeredaPadre = HeredaPadre;
            
            item.HiddenOption = HiddenOption;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int ModuloId,int? ModuloPadreId,string Nombre,string NombreEtiqueta,string Tag,int? Orden,bool? CreateSerparator,byte[] Icon,bool? ShowInNavBar,bool? ShowInTreeNavBar,bool? SoloAdministrador,bool? HeredaPadre,bool? HiddenOption)
	    {
		    Modulos item = new Modulos();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.ModuloId = ModuloId;
				
			item.ModuloPadreId = ModuloPadreId;
				
			item.Nombre = Nombre;
				
			item.NombreEtiqueta = NombreEtiqueta;
				
			item.Tag = Tag;
				
			item.Orden = Orden;
				
			item.CreateSerparator = CreateSerparator;
				
			item.Icon = Icon;
				
			item.ShowInNavBar = ShowInNavBar;
				
			item.ShowInTreeNavBar = ShowInTreeNavBar;
				
			item.SoloAdministrador = SoloAdministrador;
				
			item.HeredaPadre = HeredaPadre;
				
			item.HiddenOption = HiddenOption;
				
	        item.Save(UserName);
	    }
    }
}
