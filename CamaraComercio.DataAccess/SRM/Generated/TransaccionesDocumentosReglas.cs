using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace CamaraComercio.DataAccess.SRM
{
	/// <summary>
	/// Strongly-typed collection for the TransaccionesDocumentosReglas class.
	/// </summary>
    [Serializable]
	public partial class TransaccionesDocumentosReglasCollection : ActiveList<TransaccionesDocumentosReglas, TransaccionesDocumentosReglasCollection>
	{	   
		public TransaccionesDocumentosReglasCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TransaccionesDocumentosReglasCollection</returns>
		public TransaccionesDocumentosReglasCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TransaccionesDocumentosReglas o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TransaccionesDocumentosReglas table.
	/// </summary>
	[Serializable]
	public partial class TransaccionesDocumentosReglas : ActiveRecord<TransaccionesDocumentosReglas>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TransaccionesDocumentosReglas()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TransaccionesDocumentosReglas(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TransaccionesDocumentosReglas(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TransaccionesDocumentosReglas(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TransaccionesDocumentosReglas", TableType.Table, DataService.GetInstance("SrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"Transaccion";
				//columns
				
				TableSchema.TableColumn colvarTransDocReglaId = new TableSchema.TableColumn(schema);
				colvarTransDocReglaId.ColumnName = "TransDocReglaId";
				colvarTransDocReglaId.DataType = DbType.Int32;
				colvarTransDocReglaId.MaxLength = 0;
				colvarTransDocReglaId.AutoIncrement = true;
				colvarTransDocReglaId.IsNullable = false;
				colvarTransDocReglaId.IsPrimaryKey = true;
				colvarTransDocReglaId.IsForeignKey = false;
				colvarTransDocReglaId.IsReadOnly = false;
				colvarTransDocReglaId.DefaultSetting = @"";
				colvarTransDocReglaId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTransDocReglaId);
				
				TableSchema.TableColumn colvarTransaccionId = new TableSchema.TableColumn(schema);
				colvarTransaccionId.ColumnName = "TransaccionId";
				colvarTransaccionId.DataType = DbType.Int32;
				colvarTransaccionId.MaxLength = 0;
				colvarTransaccionId.AutoIncrement = false;
				colvarTransaccionId.IsNullable = false;
				colvarTransaccionId.IsPrimaryKey = false;
				colvarTransaccionId.IsForeignKey = true;
				colvarTransaccionId.IsReadOnly = false;
				colvarTransaccionId.DefaultSetting = @"";
				
					colvarTransaccionId.ForeignKeyTableName = "Transacciones";
				schema.Columns.Add(colvarTransaccionId);
				
				TableSchema.TableColumn colvarDocumentoId = new TableSchema.TableColumn(schema);
				colvarDocumentoId.ColumnName = "DocumentoId";
				colvarDocumentoId.DataType = DbType.Int32;
				colvarDocumentoId.MaxLength = 0;
				colvarDocumentoId.AutoIncrement = false;
				colvarDocumentoId.IsNullable = false;
				colvarDocumentoId.IsPrimaryKey = false;
				colvarDocumentoId.IsForeignKey = false;
				colvarDocumentoId.IsReadOnly = false;
				colvarDocumentoId.DefaultSetting = @"";
				colvarDocumentoId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDocumentoId);
				
				TableSchema.TableColumn colvarReglaId = new TableSchema.TableColumn(schema);
				colvarReglaId.ColumnName = "ReglaId";
				colvarReglaId.DataType = DbType.Int32;
				colvarReglaId.MaxLength = 0;
				colvarReglaId.AutoIncrement = false;
				colvarReglaId.IsNullable = false;
				colvarReglaId.IsPrimaryKey = false;
				colvarReglaId.IsForeignKey = false;
				colvarReglaId.IsReadOnly = false;
				colvarReglaId.DefaultSetting = @"";
				colvarReglaId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReglaId);
				
				TableSchema.TableColumn colvarEsValida = new TableSchema.TableColumn(schema);
				colvarEsValida.ColumnName = "EsValida";
				colvarEsValida.DataType = DbType.Boolean;
				colvarEsValida.MaxLength = 0;
				colvarEsValida.AutoIncrement = false;
				colvarEsValida.IsNullable = false;
				colvarEsValida.IsPrimaryKey = false;
				colvarEsValida.IsForeignKey = false;
				colvarEsValida.IsReadOnly = false;
				colvarEsValida.DefaultSetting = @"";
				colvarEsValida.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEsValida);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["SrmProvider"].AddSchema("TransaccionesDocumentosReglas",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("TransDocReglaId")]
		[Bindable(true)]
		public int TransDocReglaId 
		{
			get { return GetColumnValue<int>(Columns.TransDocReglaId); }
			set { SetColumnValue(Columns.TransDocReglaId, value); }
		}
		  
		[XmlAttribute("TransaccionId")]
		[Bindable(true)]
		public int TransaccionId 
		{
			get { return GetColumnValue<int>(Columns.TransaccionId); }
			set { SetColumnValue(Columns.TransaccionId, value); }
		}
		  
		[XmlAttribute("DocumentoId")]
		[Bindable(true)]
		public int DocumentoId 
		{
			get { return GetColumnValue<int>(Columns.DocumentoId); }
			set { SetColumnValue(Columns.DocumentoId, value); }
		}
		  
		[XmlAttribute("ReglaId")]
		[Bindable(true)]
		public int ReglaId 
		{
			get { return GetColumnValue<int>(Columns.ReglaId); }
			set { SetColumnValue(Columns.ReglaId, value); }
		}
		  
		[XmlAttribute("EsValida")]
		[Bindable(true)]
		public bool EsValida 
		{
			get { return GetColumnValue<bool>(Columns.EsValida); }
			set { SetColumnValue(Columns.EsValida, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a Transacciones ActiveRecord object related to this TransaccionesDocumentosReglas
		/// 
		/// </summary>
		public CamaraComercio.DataAccess.SRM.Transacciones Transacciones
		{
			get { return CamaraComercio.DataAccess.SRM.Transacciones.FetchByID(this.TransaccionId); }
			set { SetColumnValue("TransaccionId", value.TransaccionId); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varTransaccionId,int varDocumentoId,int varReglaId,bool varEsValida)
		{
			TransaccionesDocumentosReglas item = new TransaccionesDocumentosReglas();
			
			item.TransaccionId = varTransaccionId;
			
			item.DocumentoId = varDocumentoId;
			
			item.ReglaId = varReglaId;
			
			item.EsValida = varEsValida;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varTransDocReglaId,int varTransaccionId,int varDocumentoId,int varReglaId,bool varEsValida)
		{
			TransaccionesDocumentosReglas item = new TransaccionesDocumentosReglas();
			
				item.TransDocReglaId = varTransDocReglaId;
			
				item.TransaccionId = varTransaccionId;
			
				item.DocumentoId = varDocumentoId;
			
				item.ReglaId = varReglaId;
			
				item.EsValida = varEsValida;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn TransDocReglaIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn TransaccionIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn DocumentoIdColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ReglaIdColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn EsValidaColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string TransDocReglaId = @"TransDocReglaId";
			 public static string TransaccionId = @"TransaccionId";
			 public static string DocumentoId = @"DocumentoId";
			 public static string ReglaId = @"ReglaId";
			 public static string EsValida = @"EsValida";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
