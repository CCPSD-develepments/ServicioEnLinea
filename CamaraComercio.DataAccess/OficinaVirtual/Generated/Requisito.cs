using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace CamaraComercio.DataAccess.OficinaVirtual
{
	/// <summary>
	/// Strongly-typed collection for the Requisito class.
	/// </summary>
    [Serializable]
	public partial class RequisitoCollection : ActiveList<Requisito, RequisitoCollection>
	{	   
		public RequisitoCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>RequisitoCollection</returns>
		public RequisitoCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Requisito o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Requisitos table.
	/// </summary>
	[Serializable]
	public partial class Requisito : ActiveRecord<Requisito>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public Requisito()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public Requisito(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public Requisito(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public Requisito(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Requisitos", TableType.Table, DataService.GetInstance("OficinaVirtualProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"WebSRM";
				//columns
				
				TableSchema.TableColumn colvarRequisitoId = new TableSchema.TableColumn(schema);
				colvarRequisitoId.ColumnName = "RequisitoId";
				colvarRequisitoId.DataType = DbType.Int32;
				colvarRequisitoId.MaxLength = 0;
				colvarRequisitoId.AutoIncrement = true;
				colvarRequisitoId.IsNullable = false;
				colvarRequisitoId.IsPrimaryKey = true;
				colvarRequisitoId.IsForeignKey = false;
				colvarRequisitoId.IsReadOnly = false;
				colvarRequisitoId.DefaultSetting = @"";
				colvarRequisitoId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRequisitoId);
				
				TableSchema.TableColumn colvarTipoSociedadActualId = new TableSchema.TableColumn(schema);
				colvarTipoSociedadActualId.ColumnName = "TipoSociedadActualId";
				colvarTipoSociedadActualId.DataType = DbType.Int32;
				colvarTipoSociedadActualId.MaxLength = 0;
				colvarTipoSociedadActualId.AutoIncrement = false;
				colvarTipoSociedadActualId.IsNullable = true;
				colvarTipoSociedadActualId.IsPrimaryKey = false;
				colvarTipoSociedadActualId.IsForeignKey = true;
				colvarTipoSociedadActualId.IsReadOnly = false;
				colvarTipoSociedadActualId.DefaultSetting = @"";
				
					colvarTipoSociedadActualId.ForeignKeyTableName = "TipoSociedadActual";
				schema.Columns.Add(colvarTipoSociedadActualId);
				
				TableSchema.TableColumn colvarTipoSociedadId = new TableSchema.TableColumn(schema);
				colvarTipoSociedadId.ColumnName = "TipoSociedadId";
				colvarTipoSociedadId.DataType = DbType.Int32;
				colvarTipoSociedadId.MaxLength = 0;
				colvarTipoSociedadId.AutoIncrement = false;
				colvarTipoSociedadId.IsNullable = false;
				colvarTipoSociedadId.IsPrimaryKey = false;
				colvarTipoSociedadId.IsForeignKey = true;
				colvarTipoSociedadId.IsReadOnly = false;
				colvarTipoSociedadId.DefaultSetting = @"";
				
					colvarTipoSociedadId.ForeignKeyTableName = "TiposSociedades";
				schema.Columns.Add(colvarTipoSociedadId);
				
				TableSchema.TableColumn colvarOrden = new TableSchema.TableColumn(schema);
				colvarOrden.ColumnName = "Orden";
				colvarOrden.DataType = DbType.Int32;
				colvarOrden.MaxLength = 0;
				colvarOrden.AutoIncrement = false;
				colvarOrden.IsNullable = false;
				colvarOrden.IsPrimaryKey = false;
				colvarOrden.IsForeignKey = false;
				colvarOrden.IsReadOnly = false;
				colvarOrden.DefaultSetting = @"";
				colvarOrden.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrden);
				
				TableSchema.TableColumn colvarIncluirEnRenovacion = new TableSchema.TableColumn(schema);
				colvarIncluirEnRenovacion.ColumnName = "IncluirEnRenovacion";
				colvarIncluirEnRenovacion.DataType = DbType.Boolean;
				colvarIncluirEnRenovacion.MaxLength = 0;
				colvarIncluirEnRenovacion.AutoIncrement = false;
				colvarIncluirEnRenovacion.IsNullable = false;
				colvarIncluirEnRenovacion.IsPrimaryKey = false;
				colvarIncluirEnRenovacion.IsForeignKey = false;
				colvarIncluirEnRenovacion.IsReadOnly = false;
				
						colvarIncluirEnRenovacion.DefaultSetting = @"((0))";
				colvarIncluirEnRenovacion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIncluirEnRenovacion);
				
				TableSchema.TableColumn colvarTipoAcciones = new TableSchema.TableColumn(schema);
				colvarTipoAcciones.ColumnName = "TipoAcciones";
				colvarTipoAcciones.DataType = DbType.Int32;
				colvarTipoAcciones.MaxLength = 0;
				colvarTipoAcciones.AutoIncrement = false;
				colvarTipoAcciones.IsNullable = false;
				colvarTipoAcciones.IsPrimaryKey = false;
				colvarTipoAcciones.IsForeignKey = false;
				colvarTipoAcciones.IsReadOnly = false;
				
						colvarTipoAcciones.DefaultSetting = @"((1))";
				colvarTipoAcciones.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTipoAcciones);
				
				TableSchema.TableColumn colvarDescripcion = new TableSchema.TableColumn(schema);
				colvarDescripcion.ColumnName = "Descripcion";
				colvarDescripcion.DataType = DbType.AnsiString;
				colvarDescripcion.MaxLength = 800;
				colvarDescripcion.AutoIncrement = false;
				colvarDescripcion.IsNullable = false;
				colvarDescripcion.IsPrimaryKey = false;
				colvarDescripcion.IsForeignKey = false;
				colvarDescripcion.IsReadOnly = false;
				colvarDescripcion.DefaultSetting = @"";
				colvarDescripcion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescripcion);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["OficinaVirtualProvider"].AddSchema("Requisitos",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("RequisitoId")]
		[Bindable(true)]
		public int RequisitoId 
		{
			get { return GetColumnValue<int>(Columns.RequisitoId); }
			set { SetColumnValue(Columns.RequisitoId, value); }
		}
		  
		[XmlAttribute("TipoSociedadActualId")]
		[Bindable(true)]
		public int? TipoSociedadActualId 
		{
			get { return GetColumnValue<int?>(Columns.TipoSociedadActualId); }
			set { SetColumnValue(Columns.TipoSociedadActualId, value); }
		}
		  
		[XmlAttribute("TipoSociedadId")]
		[Bindable(true)]
		public int TipoSociedadId 
		{
			get { return GetColumnValue<int>(Columns.TipoSociedadId); }
			set { SetColumnValue(Columns.TipoSociedadId, value); }
		}
		  
		[XmlAttribute("Orden")]
		[Bindable(true)]
		public int Orden 
		{
			get { return GetColumnValue<int>(Columns.Orden); }
			set { SetColumnValue(Columns.Orden, value); }
		}
		  
		[XmlAttribute("IncluirEnRenovacion")]
		[Bindable(true)]
		public bool IncluirEnRenovacion 
		{
			get { return GetColumnValue<bool>(Columns.IncluirEnRenovacion); }
			set { SetColumnValue(Columns.IncluirEnRenovacion, value); }
		}
		  
		[XmlAttribute("TipoAcciones")]
		[Bindable(true)]
		public int TipoAcciones 
		{
			get { return GetColumnValue<int>(Columns.TipoAcciones); }
			set { SetColumnValue(Columns.TipoAcciones, value); }
		}
		  
		[XmlAttribute("Descripcion")]
		[Bindable(true)]
		public string Descripcion 
		{
			get { return GetColumnValue<string>(Columns.Descripcion); }
			set { SetColumnValue(Columns.Descripcion, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TiposSociedad ActiveRecord object related to this Requisito
		/// 
		/// </summary>
		public CamaraComercio.DataAccess.OficinaVirtual.TiposSociedad TiposSociedad
		{
			get { return CamaraComercio.DataAccess.OficinaVirtual.TiposSociedad.FetchByID(this.TipoSociedadId); }
			set { SetColumnValue("TipoSociedadId", value.TipoSociedadId); }
		}
		
		
		/// <summary>
		/// Returns a TipoSociedadActual ActiveRecord object related to this Requisito
		/// 
		/// </summary>
		public CamaraComercio.DataAccess.OficinaVirtual.TipoSociedadActual TipoSociedadActual
		{
			get { return CamaraComercio.DataAccess.OficinaVirtual.TipoSociedadActual.FetchByID(this.TipoSociedadActualId); }
			set { SetColumnValue("TipoSociedadActualId", value.TipoSociedadId); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varTipoSociedadActualId,int varTipoSociedadId,int varOrden,bool varIncluirEnRenovacion,int varTipoAcciones,string varDescripcion)
		{
			Requisito item = new Requisito();
			
			item.TipoSociedadActualId = varTipoSociedadActualId;
			
			item.TipoSociedadId = varTipoSociedadId;
			
			item.Orden = varOrden;
			
			item.IncluirEnRenovacion = varIncluirEnRenovacion;
			
			item.TipoAcciones = varTipoAcciones;
			
			item.Descripcion = varDescripcion;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varRequisitoId,int? varTipoSociedadActualId,int varTipoSociedadId,int varOrden,bool varIncluirEnRenovacion,int varTipoAcciones,string varDescripcion)
		{
			Requisito item = new Requisito();
			
				item.RequisitoId = varRequisitoId;
			
				item.TipoSociedadActualId = varTipoSociedadActualId;
			
				item.TipoSociedadId = varTipoSociedadId;
			
				item.Orden = varOrden;
			
				item.IncluirEnRenovacion = varIncluirEnRenovacion;
			
				item.TipoAcciones = varTipoAcciones;
			
				item.Descripcion = varDescripcion;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn RequisitoIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn TipoSociedadActualIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn TipoSociedadIdColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn OrdenColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn IncluirEnRenovacionColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn TipoAccionesColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn DescripcionColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string RequisitoId = @"RequisitoId";
			 public static string TipoSociedadActualId = @"TipoSociedadActualId";
			 public static string TipoSociedadId = @"TipoSociedadId";
			 public static string Orden = @"Orden";
			 public static string IncluirEnRenovacion = @"IncluirEnRenovacion";
			 public static string TipoAcciones = @"TipoAcciones";
			 public static string Descripcion = @"Descripcion";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
