using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace CamaraComercio.DataAccess.OficinaVirtual
{
	/// <summary>
	/// Strongly-typed collection for the ReferenciaBancaria class.
	/// </summary>
    [Serializable]
	public partial class ReferenciaBancariaCollection : ActiveList<ReferenciaBancaria, ReferenciaBancariaCollection>
	{	   
		public ReferenciaBancariaCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>ReferenciaBancariaCollection</returns>
		public ReferenciaBancariaCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                ReferenciaBancaria o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the ReferenciasBancarias table.
	/// </summary>
	[Serializable]
	public partial class ReferenciaBancaria : ActiveRecord<ReferenciaBancaria>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public ReferenciaBancaria()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public ReferenciaBancaria(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public ReferenciaBancaria(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public ReferenciaBancaria(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("ReferenciasBancarias", TableType.Table, DataService.GetInstance("OficinaVirtualProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"WebSRM";
				//columns
				
				TableSchema.TableColumn colvarReferenciaBancariaId = new TableSchema.TableColumn(schema);
				colvarReferenciaBancariaId.ColumnName = "ReferenciaBancariaId";
				colvarReferenciaBancariaId.DataType = DbType.Int32;
				colvarReferenciaBancariaId.MaxLength = 0;
				colvarReferenciaBancariaId.AutoIncrement = true;
				colvarReferenciaBancariaId.IsNullable = false;
				colvarReferenciaBancariaId.IsPrimaryKey = true;
				colvarReferenciaBancariaId.IsForeignKey = false;
				colvarReferenciaBancariaId.IsReadOnly = false;
				colvarReferenciaBancariaId.DefaultSetting = @"";
				colvarReferenciaBancariaId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReferenciaBancariaId);
				
				TableSchema.TableColumn colvarRegistroId = new TableSchema.TableColumn(schema);
				colvarRegistroId.ColumnName = "RegistroId";
				colvarRegistroId.DataType = DbType.Int32;
				colvarRegistroId.MaxLength = 0;
				colvarRegistroId.AutoIncrement = false;
				colvarRegistroId.IsNullable = false;
				colvarRegistroId.IsPrimaryKey = false;
				colvarRegistroId.IsForeignKey = true;
				colvarRegistroId.IsReadOnly = false;
				colvarRegistroId.DefaultSetting = @"";
				
					colvarRegistroId.ForeignKeyTableName = "Registros";
				schema.Columns.Add(colvarRegistroId);
				
				TableSchema.TableColumn colvarBancoId = new TableSchema.TableColumn(schema);
				colvarBancoId.ColumnName = "BancoId";
				colvarBancoId.DataType = DbType.Int32;
				colvarBancoId.MaxLength = 0;
				colvarBancoId.AutoIncrement = false;
				colvarBancoId.IsNullable = false;
				colvarBancoId.IsPrimaryKey = false;
				colvarBancoId.IsForeignKey = true;
				colvarBancoId.IsReadOnly = false;
				colvarBancoId.DefaultSetting = @"";
				
					colvarBancoId.ForeignKeyTableName = "Bancos";
				schema.Columns.Add(colvarBancoId);
				
				TableSchema.TableColumn colvarFechaModificacion = new TableSchema.TableColumn(schema);
				colvarFechaModificacion.ColumnName = "FechaModificacion";
				colvarFechaModificacion.DataType = DbType.DateTime;
				colvarFechaModificacion.MaxLength = 0;
				colvarFechaModificacion.AutoIncrement = false;
				colvarFechaModificacion.IsNullable = false;
				colvarFechaModificacion.IsPrimaryKey = false;
				colvarFechaModificacion.IsForeignKey = false;
				colvarFechaModificacion.IsReadOnly = false;
				
						colvarFechaModificacion.DefaultSetting = @"(getdate())";
				colvarFechaModificacion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFechaModificacion);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["OficinaVirtualProvider"].AddSchema("ReferenciasBancarias",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("ReferenciaBancariaId")]
		[Bindable(true)]
		public int ReferenciaBancariaId 
		{
			get { return GetColumnValue<int>(Columns.ReferenciaBancariaId); }
			set { SetColumnValue(Columns.ReferenciaBancariaId, value); }
		}
		  
		[XmlAttribute("RegistroId")]
		[Bindable(true)]
		public int RegistroId 
		{
			get { return GetColumnValue<int>(Columns.RegistroId); }
			set { SetColumnValue(Columns.RegistroId, value); }
		}
		  
		[XmlAttribute("BancoId")]
		[Bindable(true)]
		public int BancoId 
		{
			get { return GetColumnValue<int>(Columns.BancoId); }
			set { SetColumnValue(Columns.BancoId, value); }
		}
		  
		[XmlAttribute("FechaModificacion")]
		[Bindable(true)]
		public DateTime FechaModificacion 
		{
			get { return GetColumnValue<DateTime>(Columns.FechaModificacion); }
			set { SetColumnValue(Columns.FechaModificacion, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a Banco ActiveRecord object related to this ReferenciaBancaria
		/// 
		/// </summary>
		public CamaraComercio.DataAccess.OficinaVirtual.Banco Banco
		{
			get { return CamaraComercio.DataAccess.OficinaVirtual.Banco.FetchByID(this.BancoId); }
			set { SetColumnValue("BancoId", value.BancoId); }
		}
		
		
		/// <summary>
		/// Returns a Registro ActiveRecord object related to this ReferenciaBancaria
		/// 
		/// </summary>
		public CamaraComercio.DataAccess.OficinaVirtual.Registro Registro
		{
			get { return CamaraComercio.DataAccess.OficinaVirtual.Registro.FetchByID(this.RegistroId); }
			set { SetColumnValue("RegistroId", value.RegistroId); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varRegistroId,int varBancoId,DateTime varFechaModificacion)
		{
			ReferenciaBancaria item = new ReferenciaBancaria();
			
			item.RegistroId = varRegistroId;
			
			item.BancoId = varBancoId;
			
			item.FechaModificacion = varFechaModificacion;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varReferenciaBancariaId,int varRegistroId,int varBancoId,DateTime varFechaModificacion)
		{
			ReferenciaBancaria item = new ReferenciaBancaria();
			
				item.ReferenciaBancariaId = varReferenciaBancariaId;
			
				item.RegistroId = varRegistroId;
			
				item.BancoId = varBancoId;
			
				item.FechaModificacion = varFechaModificacion;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ReferenciaBancariaIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn RegistroIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn BancoIdColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn FechaModificacionColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string ReferenciaBancariaId = @"ReferenciaBancariaId";
			 public static string RegistroId = @"RegistroId";
			 public static string BancoId = @"BancoId";
			 public static string FechaModificacion = @"FechaModificacion";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
