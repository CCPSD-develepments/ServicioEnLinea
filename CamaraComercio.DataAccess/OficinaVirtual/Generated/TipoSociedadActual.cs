using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace CamaraComercio.DataAccess.OficinaVirtual
{
	/// <summary>
	/// Strongly-typed collection for the TipoSociedadActual class.
	/// </summary>
    [Serializable]
	public partial class TipoSociedadActualCollection : ActiveList<TipoSociedadActual, TipoSociedadActualCollection>
	{	   
		public TipoSociedadActualCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TipoSociedadActualCollection</returns>
		public TipoSociedadActualCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TipoSociedadActual o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TipoSociedadActual table.
	/// </summary>
	[Serializable]
	public partial class TipoSociedadActual : ActiveRecord<TipoSociedadActual>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TipoSociedadActual()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TipoSociedadActual(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TipoSociedadActual(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TipoSociedadActual(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TipoSociedadActual", TableType.Table, DataService.GetInstance("OficinaVirtualProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"WebSRM";
				//columns
				
				TableSchema.TableColumn colvarTipoSociedadId = new TableSchema.TableColumn(schema);
				colvarTipoSociedadId.ColumnName = "TipoSociedadId";
				colvarTipoSociedadId.DataType = DbType.Int32;
				colvarTipoSociedadId.MaxLength = 0;
				colvarTipoSociedadId.AutoIncrement = false;
				colvarTipoSociedadId.IsNullable = false;
				colvarTipoSociedadId.IsPrimaryKey = true;
				colvarTipoSociedadId.IsForeignKey = false;
				colvarTipoSociedadId.IsReadOnly = false;
				colvarTipoSociedadId.DefaultSetting = @"";
				colvarTipoSociedadId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTipoSociedadId);
				
				TableSchema.TableColumn colvarNombre = new TableSchema.TableColumn(schema);
				colvarNombre.ColumnName = "Nombre";
				colvarNombre.DataType = DbType.String;
				colvarNombre.MaxLength = 50;
				colvarNombre.AutoIncrement = false;
				colvarNombre.IsNullable = false;
				colvarNombre.IsPrimaryKey = false;
				colvarNombre.IsForeignKey = false;
				colvarNombre.IsReadOnly = false;
				colvarNombre.DefaultSetting = @"";
				colvarNombre.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNombre);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["OficinaVirtualProvider"].AddSchema("TipoSociedadActual",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("TipoSociedadId")]
		[Bindable(true)]
		public int TipoSociedadId 
		{
			get { return GetColumnValue<int>(Columns.TipoSociedadId); }
			set { SetColumnValue(Columns.TipoSociedadId, value); }
		}
		  
		[XmlAttribute("Nombre")]
		[Bindable(true)]
		public string Nombre 
		{
			get { return GetColumnValue<string>(Columns.Nombre); }
			set { SetColumnValue(Columns.Nombre, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public CamaraComercio.DataAccess.OficinaVirtual.MatrizConversionTipoSociedadCollection MatrizConversionTipoSociedadRecords()
		{
			return new CamaraComercio.DataAccess.OficinaVirtual.MatrizConversionTipoSociedadCollection().Where(MatrizConversionTipoSociedad.Columns.TipoSociedadActualId, TipoSociedadId).Load();
		}
		public CamaraComercio.DataAccess.OficinaVirtual.RequisitoCollection RequisitoRecords()
		{
			return new CamaraComercio.DataAccess.OficinaVirtual.RequisitoCollection().Where(Requisito.Columns.TipoSociedadActualId, TipoSociedadId).Load();
		}
		#endregion
		
			
		
		//no foreign key tables defined (0)
		
		
		
		#region Many To Many Helpers
		
		 
		public CamaraComercio.DataAccess.OficinaVirtual.TiposSociedadCollection GetTiposSociedadCollection() { return TipoSociedadActual.GetTiposSociedadCollection(this.TipoSociedadId); }
		public static CamaraComercio.DataAccess.OficinaVirtual.TiposSociedadCollection GetTiposSociedadCollection(int varTipoSociedadId)
		{
		    SubSonic.QueryCommand cmd = new SubSonic.QueryCommand("SELECT * FROM [WebSRM].[TiposSociedades] INNER JOIN [MatrizConversionTipoSociedad] ON [TiposSociedades].[TipoSociedadId] = [MatrizConversionTipoSociedad].[TipoSociedadNuevaId] WHERE [MatrizConversionTipoSociedad].[TipoSociedadActualId] = @TipoSociedadActualId", TipoSociedadActual.Schema.Provider.Name);
			cmd.AddParameter("@TipoSociedadActualId", varTipoSociedadId, DbType.Int32);
			IDataReader rdr = SubSonic.DataService.GetReader(cmd);
			TiposSociedadCollection coll = new TiposSociedadCollection();
			coll.LoadAndCloseReader(rdr);
			return coll;
		}
		
		public static void SaveTiposSociedadMap(int varTipoSociedadId, TiposSociedadCollection items)
		{
			QueryCommandCollection coll = new SubSonic.QueryCommandCollection();
			//delete out the existing
			QueryCommand cmdDel = new QueryCommand("DELETE FROM [MatrizConversionTipoSociedad] WHERE [MatrizConversionTipoSociedad].[TipoSociedadActualId] = @TipoSociedadActualId", TipoSociedadActual.Schema.Provider.Name);
			cmdDel.AddParameter("@TipoSociedadActualId", varTipoSociedadId, DbType.Int32);
			coll.Add(cmdDel);
			DataService.ExecuteTransaction(coll);
			foreach (TiposSociedad item in items)
			{
				MatrizConversionTipoSociedad varMatrizConversionTipoSociedad = new MatrizConversionTipoSociedad();
				varMatrizConversionTipoSociedad.SetColumnValue("TipoSociedadActualId", varTipoSociedadId);
				varMatrizConversionTipoSociedad.SetColumnValue("TipoSociedadNuevaId", item.GetPrimaryKeyValue());
				varMatrizConversionTipoSociedad.Save();
			}
		}
		public static void SaveTiposSociedadMap(int varTipoSociedadId, System.Web.UI.WebControls.ListItemCollection itemList) 
		{
			QueryCommandCollection coll = new SubSonic.QueryCommandCollection();
			//delete out the existing
			 QueryCommand cmdDel = new QueryCommand("DELETE FROM [MatrizConversionTipoSociedad] WHERE [MatrizConversionTipoSociedad].[TipoSociedadActualId] = @TipoSociedadActualId", TipoSociedadActual.Schema.Provider.Name);
			cmdDel.AddParameter("@TipoSociedadActualId", varTipoSociedadId, DbType.Int32);
			coll.Add(cmdDel);
			DataService.ExecuteTransaction(coll);
			foreach (System.Web.UI.WebControls.ListItem l in itemList) 
			{
				if (l.Selected) 
				{
					MatrizConversionTipoSociedad varMatrizConversionTipoSociedad = new MatrizConversionTipoSociedad();
					varMatrizConversionTipoSociedad.SetColumnValue("TipoSociedadActualId", varTipoSociedadId);
					varMatrizConversionTipoSociedad.SetColumnValue("TipoSociedadNuevaId", l.Value);
					varMatrizConversionTipoSociedad.Save();
				}
			}
		}
		public static void SaveTiposSociedadMap(int varTipoSociedadId , int[] itemList) 
		{
			QueryCommandCollection coll = new SubSonic.QueryCommandCollection();
			//delete out the existing
			 QueryCommand cmdDel = new QueryCommand("DELETE FROM [MatrizConversionTipoSociedad] WHERE [MatrizConversionTipoSociedad].[TipoSociedadActualId] = @TipoSociedadActualId", TipoSociedadActual.Schema.Provider.Name);
			cmdDel.AddParameter("@TipoSociedadActualId", varTipoSociedadId, DbType.Int32);
			coll.Add(cmdDel);
			DataService.ExecuteTransaction(coll);
			foreach (int item in itemList) 
			{
				MatrizConversionTipoSociedad varMatrizConversionTipoSociedad = new MatrizConversionTipoSociedad();
				varMatrizConversionTipoSociedad.SetColumnValue("TipoSociedadActualId", varTipoSociedadId);
				varMatrizConversionTipoSociedad.SetColumnValue("TipoSociedadNuevaId", item);
				varMatrizConversionTipoSociedad.Save();
			}
		}
		
		public static void DeleteTiposSociedadMap(int varTipoSociedadId) 
		{
			QueryCommand cmdDel = new QueryCommand("DELETE FROM [MatrizConversionTipoSociedad] WHERE [MatrizConversionTipoSociedad].[TipoSociedadActualId] = @TipoSociedadActualId", TipoSociedadActual.Schema.Provider.Name);
			cmdDel.AddParameter("@TipoSociedadActualId", varTipoSociedadId, DbType.Int32);
			DataService.ExecuteQuery(cmdDel);
		}
		
		#endregion
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varTipoSociedadId,string varNombre)
		{
			TipoSociedadActual item = new TipoSociedadActual();
			
			item.TipoSociedadId = varTipoSociedadId;
			
			item.Nombre = varNombre;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varTipoSociedadId,string varNombre)
		{
			TipoSociedadActual item = new TipoSociedadActual();
			
				item.TipoSociedadId = varTipoSociedadId;
			
				item.Nombre = varNombre;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn TipoSociedadIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn NombreColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string TipoSociedadId = @"TipoSociedadId";
			 public static string Nombre = @"Nombre";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
