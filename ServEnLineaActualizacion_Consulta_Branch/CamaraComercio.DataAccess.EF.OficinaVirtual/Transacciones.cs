//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace CamaraComercio.DataAccess.EF.OficinaVirtual
{
    [Serializable]
    public partial class Transacciones
    {
        #region Property Metadata
    	
    	public struct PropColumns
    	{
    			public static string TransaccionId = @"TransaccionId";	
    	public static string Fecha = @"Fecha";	
    	public static string EstatusTransId = @"EstatusTransId";	
    	public static string RegistroId = @"RegistroId";	
    	public static string ServicioId = @"ServicioId";	
    	public static string CamaraId = @"CamaraId";	
    	public static string UserName = @"UserName";	
    	public static string TipoSociedadId = @"TipoSociedadId";	
    	public static string Solicitante = @"Solicitante";	
    	public static string RNCSolicitante = @"RNCSolicitante";	
    	public static string NombreContacto = @"NombreContacto";	
    	public static string TelefonoContacto = @"TelefonoContacto";	
    	public static string FaxContacto = @"FaxContacto";	
    	public static string NoReciboDGII = @"NoReciboDGII";	
    	public static string FechaReciboDGII = @"FechaReciboDGII";	
    	public static string MontoDGII = @"MontoDGII";	
    	public static string DestinoTraslado = @"DestinoTraslado";	
    	public static string NombreSocialPersona = @"NombreSocialPersona";	
    	public static string ApellidoPersona = @"ApellidoPersona";	
    	public static string NumeroRegistro = @"NumeroRegistro";	
    	public static string FechaAsamblea = @"FechaAsamblea";	
    	public static string CapitalSocial = @"CapitalSocial";	
    	public static string ModificacionCapital = @"ModificacionCapital";	
    	public static string bLoadedInSRM = @"bLoadedInSRM";	
    	public static string Tipo = @"Tipo";	
    	public static string NCF = @"NCF";	
    	public static string TipoNcf = @"TipoNcf";	
    	public static string SrmTransaccionId = @"SrmTransaccionId";	
    	public static string bPagada = @"bPagada";	
    	public static string SubTransaccionId = @"SubTransaccionId";	
    	public static string InstanceXML = @"InstanceXML";	
    	public static string Prioridad = @"Prioridad";	
    	public static string TipoModeloId = @"TipoModeloId";	
    	public static string Token = @"Token";	
    	public static string TipoComprobanteId = @"TipoComprobanteId";	
    	public static string Comentario = @"Comentario";	
    	public static string CorreoEmpresa = @"CorreoEmpresa";	
    	public static string CorreoContacto = @"CorreoContacto";	
    	public static string NumeroReciboOnapi = @"NumeroReciboOnapi";	
    	public static string MontoReciboOnapi = @"MontoReciboOnapi";	
    	public static string FechaReciboOnapi = @"FechaReciboOnapi";	
    	public static string ServicioVentanillaUnica = @"ServicioVentanillaUnica";	
    	public static string CedulaPF = @"CedulaPF";	
    	public static string RegistradoDgiiPF = @"RegistradoDgiiPF";	
    	public static string Modificado = @"Modificado";	
    	public static string UltimoEstadoCamara = @"UltimoEstadoCamara";	
    	public static string UltimoEstadoId = @"UltimoEstadoId";	
    	public static string ContratoFirmado = @"ContratoFirmado";	
    	public static string FolderId = @"FolderId";	
    	public static string EsCasoAperturado = @"EsCasoAperturado";	
    	public static string WebRegistroId = @"WebRegistroId";	
    	public static string ComentariosProblema = @"ComentariosProblema";	
    	public static string bDataLoadedInSRM = @"bDataLoadedInSRM";	
    	public static string ImprimirCopias = @"ImprimirCopias";	
    	public static string DepositarCansilleria = @"DepositarCansilleria";	
    	public static string ANombreQuien = @"ANombreQuien";	
    	public static string DocumentoNombreQuien = @"DocumentoNombreQuien";	
    	public static string CantidadCopiaCertificaciones = @"CantidadCopiaCertificaciones";	
    	public static string EsCertificacion = @"EsCertificacion";	
    	public static string PagadoConNota = @"PagadoConNota";	
     
    	}
        #endregion

        #region Primitive Properties
    
        public virtual int TransaccionId
        {
            get;
            set;
        }
    
        public virtual System.DateTime Fecha
        {
            get;
            set;
        }
    
        public virtual int EstatusTransId
        {
            get { return _estatusTransId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_estatusTransId != value)
                    {
                        if (EstatusTransacciones != null && EstatusTransacciones.EstatusTransId != value)
                        {
                            EstatusTransacciones = null;
                        }
                        _estatusTransId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _estatusTransId;
    
        public virtual int RegistroId
        {
            get;
            set;
        }
    
        public virtual int ServicioId
        {
            get;
            set;
        }
    
        public virtual string CamaraId
        {
            get;
            set;
        }
    
        public virtual string UserName
        {
            get;
            set;
        }
    
        public virtual int TipoSociedadId
        {
            get;
            set;
        }
    
        public virtual string Solicitante
        {
            get;
            set;
        }
    
        public virtual string RNCSolicitante
        {
            get;
            set;
        }
    
        public virtual string NombreContacto
        {
            get;
            set;
        }
    
        public virtual string TelefonoContacto
        {
            get;
            set;
        }
    
        public virtual string FaxContacto
        {
            get;
            set;
        }
    
        public virtual string NoReciboDGII
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> FechaReciboDGII
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> MontoDGII
        {
            get;
            set;
        }
    
        public virtual string DestinoTraslado
        {
            get;
            set;
        }
    
        public virtual string NombreSocialPersona
        {
            get;
            set;
        }
    
        public virtual string ApellidoPersona
        {
            get;
            set;
        }
    
        public virtual Nullable<int> NumeroRegistro
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> FechaAsamblea
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> CapitalSocial
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> ModificacionCapital
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> bLoadedInSRM
        {
            get;
            set;
        }
    
        public virtual Nullable<int> Tipo
        {
            get;
            set;
        }
    
        public virtual string NCF
        {
            get;
            set;
        }
    
        public virtual string TipoNcf
        {
            get;
            set;
        }
    
        public virtual Nullable<int> SrmTransaccionId
        {
            get;
            set;
        }
    
        public virtual bool bPagada
        {
            get;
            set;
        }
    
        public virtual Nullable<int> SubTransaccionId
        {
            get { return _subTransaccionId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_subTransaccionId != value)
                    {
                        if (Transacciones2 != null && Transacciones2.TransaccionId != value)
                        {
                            Transacciones2 = null;
                        }
                        _subTransaccionId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _subTransaccionId;
    
        public virtual string InstanceXML
        {
            get;
            set;
        }
    
        public virtual byte Prioridad
        {
            get;
            set;
        }
    
        public virtual Nullable<int> TipoModeloId
        {
            get;
            set;
        }
    
        public virtual string Token
        {
            get;
            set;
        }
    
        public virtual Nullable<int> TipoComprobanteId
        {
            get;
            set;
        }
    
        public virtual string Comentario
        {
            get;
            set;
        }
    
        public virtual string CorreoEmpresa
        {
            get;
            set;
        }
    
        public virtual string CorreoContacto
        {
            get;
            set;
        }
    
        public virtual string NumeroReciboOnapi
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> MontoReciboOnapi
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> FechaReciboOnapi
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> ServicioVentanillaUnica
        {
            get;
            set;
        }
    
        public virtual string CedulaPF
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> RegistradoDgiiPF
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> Modificado
        {
            get;
            set;
        }
    
        public virtual string UltimoEstadoCamara
        {
            get;
            set;
        }
    
        public virtual Nullable<int> UltimoEstadoId
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> ContratoFirmado
        {
            get;
            set;
        }
    
        public virtual string FolderId
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> EsCasoAperturado
        {
            get;
            set;
        }
    
        public virtual Nullable<int> WebRegistroId
        {
            get;
            set;
        }
    
        public virtual string ComentariosProblema
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> bDataLoadedInSRM
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> ImprimirCopias
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> DepositarCansilleria
        {
            get;
            set;
        }
    
        public virtual string ANombreQuien
        {
            get;
            set;
        }
    
        public virtual string DocumentoNombreQuien
        {
            get;
            set;
        }
    
        public virtual Nullable<int> CantidadCopiaCertificaciones
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> EsCertificacion
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> PagadoConNota
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual EstatusTransacciones EstatusTransacciones
        {
            get { return _estatusTransacciones; }
            set
            {
                if (!ReferenceEquals(_estatusTransacciones, value))
                {
                    var previousValue = _estatusTransacciones;
                    _estatusTransacciones = value;
                    FixupEstatusTransacciones(previousValue);
                }
            }
        }
        private EstatusTransacciones _estatusTransacciones;
    
        public virtual ICollection<Facturas> Facturas
        {
            get
            {
                if (_facturas == null)
                {
                    var newCollection = new FixupCollection<Facturas>();
                    newCollection.CollectionChanged += FixupFacturas;
                    _facturas = newCollection;
                }
                return _facturas;
            }
            set
            {
                if (!ReferenceEquals(_facturas, value))
                {
                    var previousValue = _facturas as FixupCollection<Facturas>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupFacturas;
                    }
                    _facturas = value;
                    var newValue = value as FixupCollection<Facturas>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupFacturas;
                    }
                }
            }
        }
        private ICollection<Facturas> _facturas;
    
        public virtual ICollection<Transacciones> SubTransacciones
        {
            get
            {
                if (_subTransacciones == null)
                {
                    var newCollection = new FixupCollection<Transacciones>();
                    newCollection.CollectionChanged += FixupSubTransacciones;
                    _subTransacciones = newCollection;
                }
                return _subTransacciones;
            }
            set
            {
                if (!ReferenceEquals(_subTransacciones, value))
                {
                    var previousValue = _subTransacciones as FixupCollection<Transacciones>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSubTransacciones;
                    }
                    _subTransacciones = value;
                    var newValue = value as FixupCollection<Transacciones>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSubTransacciones;
                    }
                }
            }
        }
        private ICollection<Transacciones> _subTransacciones;
    
        public virtual Transacciones Transacciones2
        {
            get { return _transacciones2; }
            set
            {
                if (!ReferenceEquals(_transacciones2, value))
                {
                    var previousValue = _transacciones2;
                    _transacciones2 = value;
                    FixupTransacciones2(previousValue);
                }
            }
        }
        private Transacciones _transacciones2;
    
        public virtual ICollection<TransaccionesDocDescargas> TransaccionesDocDescargas
        {
            get
            {
                if (_transaccionesDocDescargas == null)
                {
                    var newCollection = new FixupCollection<TransaccionesDocDescargas>();
                    newCollection.CollectionChanged += FixupTransaccionesDocDescargas;
                    _transaccionesDocDescargas = newCollection;
                }
                return _transaccionesDocDescargas;
            }
            set
            {
                if (!ReferenceEquals(_transaccionesDocDescargas, value))
                {
                    var previousValue = _transaccionesDocDescargas as FixupCollection<TransaccionesDocDescargas>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTransaccionesDocDescargas;
                    }
                    _transaccionesDocDescargas = value;
                    var newValue = value as FixupCollection<TransaccionesDocDescargas>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTransaccionesDocDescargas;
                    }
                }
            }
        }
        private ICollection<TransaccionesDocDescargas> _transaccionesDocDescargas;
    
        public virtual ICollection<TransaccionesDocumentos> TransaccionesDocumentos
        {
            get
            {
                if (_transaccionesDocumentos == null)
                {
                    var newCollection = new FixupCollection<TransaccionesDocumentos>();
                    newCollection.CollectionChanged += FixupTransaccionesDocumentos;
                    _transaccionesDocumentos = newCollection;
                }
                return _transaccionesDocumentos;
            }
            set
            {
                if (!ReferenceEquals(_transaccionesDocumentos, value))
                {
                    var previousValue = _transaccionesDocumentos as FixupCollection<TransaccionesDocumentos>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTransaccionesDocumentos;
                    }
                    _transaccionesDocumentos = value;
                    var newValue = value as FixupCollection<TransaccionesDocumentos>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTransaccionesDocumentos;
                    }
                }
            }
        }
        private ICollection<TransaccionesDocumentos> _transaccionesDocumentos;
    
        public virtual ICollection<TransaccionDocSeleccionado> TransaccionDocSeleccionado
        {
            get
            {
                if (_transaccionDocSeleccionado == null)
                {
                    var newCollection = new FixupCollection<TransaccionDocSeleccionado>();
                    newCollection.CollectionChanged += FixupTransaccionDocSeleccionado;
                    _transaccionDocSeleccionado = newCollection;
                }
                return _transaccionDocSeleccionado;
            }
            set
            {
                if (!ReferenceEquals(_transaccionDocSeleccionado, value))
                {
                    var previousValue = _transaccionDocSeleccionado as FixupCollection<TransaccionDocSeleccionado>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTransaccionDocSeleccionado;
                    }
                    _transaccionDocSeleccionado = value;
                    var newValue = value as FixupCollection<TransaccionDocSeleccionado>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTransaccionDocSeleccionado;
                    }
                }
            }
        }
        private ICollection<TransaccionDocSeleccionado> _transaccionDocSeleccionado;
    
        public virtual ICollection<ReferenciasBancarias> ReferenciasBancarias
        {
            get
            {
                if (_referenciasBancarias == null)
                {
                    var newCollection = new FixupCollection<ReferenciasBancarias>();
                    newCollection.CollectionChanged += FixupReferenciasBancarias;
                    _referenciasBancarias = newCollection;
                }
                return _referenciasBancarias;
            }
            set
            {
                if (!ReferenceEquals(_referenciasBancarias, value))
                {
                    var previousValue = _referenciasBancarias as FixupCollection<ReferenciasBancarias>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupReferenciasBancarias;
                    }
                    _referenciasBancarias = value;
                    var newValue = value as FixupCollection<ReferenciasBancarias>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupReferenciasBancarias;
                    }
                }
            }
        }
        private ICollection<ReferenciasBancarias> _referenciasBancarias;
    
        public virtual ICollection<ReferenciasComerciales> ReferenciasComerciales
        {
            get
            {
                if (_referenciasComerciales == null)
                {
                    var newCollection = new FixupCollection<ReferenciasComerciales>();
                    newCollection.CollectionChanged += FixupReferenciasComerciales;
                    _referenciasComerciales = newCollection;
                }
                return _referenciasComerciales;
            }
            set
            {
                if (!ReferenceEquals(_referenciasComerciales, value))
                {
                    var previousValue = _referenciasComerciales as FixupCollection<ReferenciasComerciales>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupReferenciasComerciales;
                    }
                    _referenciasComerciales = value;
                    var newValue = value as FixupCollection<ReferenciasComerciales>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupReferenciasComerciales;
                    }
                }
            }
        }
        private ICollection<ReferenciasComerciales> _referenciasComerciales;
    
        public virtual ICollection<Registros> Registros
        {
            get
            {
                if (_registros == null)
                {
                    var newCollection = new FixupCollection<Registros>();
                    newCollection.CollectionChanged += FixupRegistros;
                    _registros = newCollection;
                }
                return _registros;
            }
            set
            {
                if (!ReferenceEquals(_registros, value))
                {
                    var previousValue = _registros as FixupCollection<Registros>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupRegistros;
                    }
                    _registros = value;
                    var newValue = value as FixupCollection<Registros>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupRegistros;
                    }
                }
            }
        }
        private ICollection<Registros> _registros;
    
        public virtual ICollection<Sociedades> Sociedades
        {
            get
            {
                if (_sociedades == null)
                {
                    var newCollection = new FixupCollection<Sociedades>();
                    newCollection.CollectionChanged += FixupSociedades;
                    _sociedades = newCollection;
                }
                return _sociedades;
            }
            set
            {
                if (!ReferenceEquals(_sociedades, value))
                {
                    var previousValue = _sociedades as FixupCollection<Sociedades>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSociedades;
                    }
                    _sociedades = value;
                    var newValue = value as FixupCollection<Sociedades>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSociedades;
                    }
                }
            }
        }
        private ICollection<Sociedades> _sociedades;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupEstatusTransacciones(EstatusTransacciones previousValue)
        {
            if (previousValue != null && previousValue.Transacciones.Contains(this))
            {
                previousValue.Transacciones.Remove(this);
            }
    
            if (EstatusTransacciones != null)
            {
                if (!EstatusTransacciones.Transacciones.Contains(this))
                {
                    EstatusTransacciones.Transacciones.Add(this);
                }
                if (EstatusTransId != EstatusTransacciones.EstatusTransId)
                {
                    EstatusTransId = EstatusTransacciones.EstatusTransId;
                }
            }
        }
    
        private void FixupTransacciones2(Transacciones previousValue)
        {
            if (previousValue != null && previousValue.SubTransacciones.Contains(this))
            {
                previousValue.SubTransacciones.Remove(this);
            }
    
            if (Transacciones2 != null)
            {
                if (!Transacciones2.SubTransacciones.Contains(this))
                {
                    Transacciones2.SubTransacciones.Add(this);
                }
                if (SubTransaccionId != Transacciones2.TransaccionId)
                {
                    SubTransaccionId = Transacciones2.TransaccionId;
                }
            }
            else if (!_settingFK)
            {
                SubTransaccionId = null;
            }
        }
    
        private void FixupFacturas(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Facturas item in e.NewItems)
                {
                    item.Transacciones = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Facturas item in e.OldItems)
                {
                    if (ReferenceEquals(item.Transacciones, this))
                    {
                        item.Transacciones = null;
                    }
                }
            }
        }
    
        private void FixupSubTransacciones(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Transacciones item in e.NewItems)
                {
                    item.Transacciones2 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Transacciones item in e.OldItems)
                {
                    if (ReferenceEquals(item.Transacciones2, this))
                    {
                        item.Transacciones2 = null;
                    }
                }
            }
        }
    
        private void FixupTransaccionesDocDescargas(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TransaccionesDocDescargas item in e.NewItems)
                {
                    item.Transacciones = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TransaccionesDocDescargas item in e.OldItems)
                {
                    if (ReferenceEquals(item.Transacciones, this))
                    {
                        item.Transacciones = null;
                    }
                }
            }
        }
    
        private void FixupTransaccionesDocumentos(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TransaccionesDocumentos item in e.NewItems)
                {
                    item.Transacciones = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TransaccionesDocumentos item in e.OldItems)
                {
                    if (ReferenceEquals(item.Transacciones, this))
                    {
                        item.Transacciones = null;
                    }
                }
            }
        }
    
        private void FixupTransaccionDocSeleccionado(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TransaccionDocSeleccionado item in e.NewItems)
                {
                    item.Transacciones = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TransaccionDocSeleccionado item in e.OldItems)
                {
                    if (ReferenceEquals(item.Transacciones, this))
                    {
                        item.Transacciones = null;
                    }
                }
            }
        }
    
        private void FixupReferenciasBancarias(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ReferenciasBancarias item in e.NewItems)
                {
                    item.Transacciones = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ReferenciasBancarias item in e.OldItems)
                {
                    if (ReferenceEquals(item.Transacciones, this))
                    {
                        item.Transacciones = null;
                    }
                }
            }
        }
    
        private void FixupReferenciasComerciales(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ReferenciasComerciales item in e.NewItems)
                {
                    item.Transacciones = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ReferenciasComerciales item in e.OldItems)
                {
                    if (ReferenceEquals(item.Transacciones, this))
                    {
                        item.Transacciones = null;
                    }
                }
            }
        }
    
        private void FixupRegistros(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Registros item in e.NewItems)
                {
                    item.Transacciones = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Registros item in e.OldItems)
                {
                    if (ReferenceEquals(item.Transacciones, this))
                    {
                        item.Transacciones = null;
                    }
                }
            }
        }
    
        private void FixupSociedades(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Sociedades item in e.NewItems)
                {
                    item.Transacciones = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Sociedades item in e.OldItems)
                {
                    if (ReferenceEquals(item.Transacciones, this))
                    {
                        item.Transacciones = null;
                    }
                }
            }
        }

        #endregion

    }
}
