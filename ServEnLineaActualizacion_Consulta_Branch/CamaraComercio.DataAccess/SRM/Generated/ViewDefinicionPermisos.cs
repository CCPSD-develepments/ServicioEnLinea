using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace CamaraComercio.DataAccess.SRM{
    /// <summary>
    /// Strongly-typed collection for the ViewDefinicionPermisos class.
    /// </summary>
    [Serializable]
    public partial class ViewDefinicionPermisosCollection : ReadOnlyList<ViewDefinicionPermisos, ViewDefinicionPermisosCollection>
    {        
        public ViewDefinicionPermisosCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the cvw_DefinicionPermisos view.
    /// </summary>
    [Serializable]
    public partial class ViewDefinicionPermisos : ReadOnlyRecord<ViewDefinicionPermisos>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("cvw_DefinicionPermisos", TableType.View, DataService.GetInstance("SrmProvider"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
                colvarId.ColumnName = "ID";
                colvarId.DataType = DbType.Int32;
                colvarId.MaxLength = 0;
                colvarId.AutoIncrement = false;
                colvarId.IsNullable = true;
                colvarId.IsPrimaryKey = false;
                colvarId.IsForeignKey = false;
                colvarId.IsReadOnly = false;
                
                schema.Columns.Add(colvarId);
                
                TableSchema.TableColumn colvarModuloId = new TableSchema.TableColumn(schema);
                colvarModuloId.ColumnName = "ModuloId";
                colvarModuloId.DataType = DbType.Int32;
                colvarModuloId.MaxLength = 0;
                colvarModuloId.AutoIncrement = false;
                colvarModuloId.IsNullable = false;
                colvarModuloId.IsPrimaryKey = false;
                colvarModuloId.IsForeignKey = false;
                colvarModuloId.IsReadOnly = false;
                
                schema.Columns.Add(colvarModuloId);
                
                TableSchema.TableColumn colvarModuloPadreId = new TableSchema.TableColumn(schema);
                colvarModuloPadreId.ColumnName = "ModuloPadreId";
                colvarModuloPadreId.DataType = DbType.Int32;
                colvarModuloPadreId.MaxLength = 0;
                colvarModuloPadreId.AutoIncrement = false;
                colvarModuloPadreId.IsNullable = true;
                colvarModuloPadreId.IsPrimaryKey = false;
                colvarModuloPadreId.IsForeignKey = false;
                colvarModuloPadreId.IsReadOnly = false;
                
                schema.Columns.Add(colvarModuloPadreId);
                
                TableSchema.TableColumn colvarNombre = new TableSchema.TableColumn(schema);
                colvarNombre.ColumnName = "Nombre";
                colvarNombre.DataType = DbType.String;
                colvarNombre.MaxLength = 75;
                colvarNombre.AutoIncrement = false;
                colvarNombre.IsNullable = false;
                colvarNombre.IsPrimaryKey = false;
                colvarNombre.IsForeignKey = false;
                colvarNombre.IsReadOnly = false;
                
                schema.Columns.Add(colvarNombre);
                
                TableSchema.TableColumn colvarNombreEtiqueta = new TableSchema.TableColumn(schema);
                colvarNombreEtiqueta.ColumnName = "NombreEtiqueta";
                colvarNombreEtiqueta.DataType = DbType.String;
                colvarNombreEtiqueta.MaxLength = 75;
                colvarNombreEtiqueta.AutoIncrement = false;
                colvarNombreEtiqueta.IsNullable = false;
                colvarNombreEtiqueta.IsPrimaryKey = false;
                colvarNombreEtiqueta.IsForeignKey = false;
                colvarNombreEtiqueta.IsReadOnly = false;
                
                schema.Columns.Add(colvarNombreEtiqueta);
                
                TableSchema.TableColumn colvarTag = new TableSchema.TableColumn(schema);
                colvarTag.ColumnName = "Tag";
                colvarTag.DataType = DbType.AnsiString;
                colvarTag.MaxLength = 50;
                colvarTag.AutoIncrement = false;
                colvarTag.IsNullable = true;
                colvarTag.IsPrimaryKey = false;
                colvarTag.IsForeignKey = false;
                colvarTag.IsReadOnly = false;
                
                schema.Columns.Add(colvarTag);
                
                TableSchema.TableColumn colvarHeredaPadre = new TableSchema.TableColumn(schema);
                colvarHeredaPadre.ColumnName = "HeredaPadre";
                colvarHeredaPadre.DataType = DbType.Boolean;
                colvarHeredaPadre.MaxLength = 0;
                colvarHeredaPadre.AutoIncrement = false;
                colvarHeredaPadre.IsNullable = true;
                colvarHeredaPadre.IsPrimaryKey = false;
                colvarHeredaPadre.IsForeignKey = false;
                colvarHeredaPadre.IsReadOnly = false;
                
                schema.Columns.Add(colvarHeredaPadre);
                
                TableSchema.TableColumn colvarRolId = new TableSchema.TableColumn(schema);
                colvarRolId.ColumnName = "RolId";
                colvarRolId.DataType = DbType.Int32;
                colvarRolId.MaxLength = 0;
                colvarRolId.AutoIncrement = false;
                colvarRolId.IsNullable = true;
                colvarRolId.IsPrimaryKey = false;
                colvarRolId.IsForeignKey = false;
                colvarRolId.IsReadOnly = false;
                
                schema.Columns.Add(colvarRolId);
                
                TableSchema.TableColumn colvarTipoAcceso = new TableSchema.TableColumn(schema);
                colvarTipoAcceso.ColumnName = "TipoAcceso";
                colvarTipoAcceso.DataType = DbType.AnsiString;
                colvarTipoAcceso.MaxLength = 2;
                colvarTipoAcceso.AutoIncrement = false;
                colvarTipoAcceso.IsNullable = true;
                colvarTipoAcceso.IsPrimaryKey = false;
                colvarTipoAcceso.IsForeignKey = false;
                colvarTipoAcceso.IsReadOnly = false;
                
                schema.Columns.Add(colvarTipoAcceso);
                
                TableSchema.TableColumn colvarHiddenOption = new TableSchema.TableColumn(schema);
                colvarHiddenOption.ColumnName = "HiddenOption";
                colvarHiddenOption.DataType = DbType.Boolean;
                colvarHiddenOption.MaxLength = 0;
                colvarHiddenOption.AutoIncrement = false;
                colvarHiddenOption.IsNullable = true;
                colvarHiddenOption.IsPrimaryKey = false;
                colvarHiddenOption.IsForeignKey = false;
                colvarHiddenOption.IsReadOnly = false;
                
                schema.Columns.Add(colvarHiddenOption);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["SrmProvider"].AddSchema("cvw_DefinicionPermisos",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public ViewDefinicionPermisos()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public ViewDefinicionPermisos(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public ViewDefinicionPermisos(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public ViewDefinicionPermisos(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("Id")]
        [Bindable(true)]
        public int? Id 
	    {
		    get
		    {
			    return GetColumnValue<int?>("ID");
		    }
            set 
		    {
			    SetColumnValue("ID", value);
            }
        }
	      
        [XmlAttribute("ModuloId")]
        [Bindable(true)]
        public int ModuloId 
	    {
		    get
		    {
			    return GetColumnValue<int>("ModuloId");
		    }
            set 
		    {
			    SetColumnValue("ModuloId", value);
            }
        }
	      
        [XmlAttribute("ModuloPadreId")]
        [Bindable(true)]
        public int? ModuloPadreId 
	    {
		    get
		    {
			    return GetColumnValue<int?>("ModuloPadreId");
		    }
            set 
		    {
			    SetColumnValue("ModuloPadreId", value);
            }
        }
	      
        [XmlAttribute("Nombre")]
        [Bindable(true)]
        public string Nombre 
	    {
		    get
		    {
			    return GetColumnValue<string>("Nombre");
		    }
            set 
		    {
			    SetColumnValue("Nombre", value);
            }
        }
	      
        [XmlAttribute("NombreEtiqueta")]
        [Bindable(true)]
        public string NombreEtiqueta 
	    {
		    get
		    {
			    return GetColumnValue<string>("NombreEtiqueta");
		    }
            set 
		    {
			    SetColumnValue("NombreEtiqueta", value);
            }
        }
	      
        [XmlAttribute("Tag")]
        [Bindable(true)]
        public string Tag 
	    {
		    get
		    {
			    return GetColumnValue<string>("Tag");
		    }
            set 
		    {
			    SetColumnValue("Tag", value);
            }
        }
	      
        [XmlAttribute("HeredaPadre")]
        [Bindable(true)]
        public bool? HeredaPadre 
	    {
		    get
		    {
			    return GetColumnValue<bool?>("HeredaPadre");
		    }
            set 
		    {
			    SetColumnValue("HeredaPadre", value);
            }
        }
	      
        [XmlAttribute("RolId")]
        [Bindable(true)]
        public int? RolId 
	    {
		    get
		    {
			    return GetColumnValue<int?>("RolId");
		    }
            set 
		    {
			    SetColumnValue("RolId", value);
            }
        }
	      
        [XmlAttribute("TipoAcceso")]
        [Bindable(true)]
        public string TipoAcceso 
	    {
		    get
		    {
			    return GetColumnValue<string>("TipoAcceso");
		    }
            set 
		    {
			    SetColumnValue("TipoAcceso", value);
            }
        }
	      
        [XmlAttribute("HiddenOption")]
        [Bindable(true)]
        public bool? HiddenOption 
	    {
		    get
		    {
			    return GetColumnValue<bool?>("HiddenOption");
		    }
            set 
		    {
			    SetColumnValue("HiddenOption", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string Id = @"ID";
            
            public static string ModuloId = @"ModuloId";
            
            public static string ModuloPadreId = @"ModuloPadreId";
            
            public static string Nombre = @"Nombre";
            
            public static string NombreEtiqueta = @"NombreEtiqueta";
            
            public static string Tag = @"Tag";
            
            public static string HeredaPadre = @"HeredaPadre";
            
            public static string RolId = @"RolId";
            
            public static string TipoAcceso = @"TipoAcceso";
            
            public static string HiddenOption = @"HiddenOption";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
