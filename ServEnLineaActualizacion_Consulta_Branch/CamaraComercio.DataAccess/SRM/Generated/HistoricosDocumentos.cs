using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace CamaraComercio.DataAccess.SRM
{
	/// <summary>
	/// Strongly-typed collection for the HistoricosDocumentos class.
	/// </summary>
    [Serializable]
	public partial class HistoricosDocumentosCollection : ActiveList<HistoricosDocumentos, HistoricosDocumentosCollection>
	{	   
		public HistoricosDocumentosCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>HistoricosDocumentosCollection</returns>
		public HistoricosDocumentosCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                HistoricosDocumentos o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the HistoricosDocumentos table.
	/// </summary>
	[Serializable]
	public partial class HistoricosDocumentos : ActiveRecord<HistoricosDocumentos>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public HistoricosDocumentos()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public HistoricosDocumentos(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public HistoricosDocumentos(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public HistoricosDocumentos(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("HistoricosDocumentos", TableType.Table, DataService.GetInstance("SrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"Historico";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "Id";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarRegistroId = new TableSchema.TableColumn(schema);
				colvarRegistroId.ColumnName = "RegistroId";
				colvarRegistroId.DataType = DbType.Int32;
				colvarRegistroId.MaxLength = 0;
				colvarRegistroId.AutoIncrement = false;
				colvarRegistroId.IsNullable = false;
				colvarRegistroId.IsPrimaryKey = false;
				colvarRegistroId.IsForeignKey = true;
				colvarRegistroId.IsReadOnly = false;
				colvarRegistroId.DefaultSetting = @"";
				
					colvarRegistroId.ForeignKeyTableName = "Registros";
				schema.Columns.Add(colvarRegistroId);
				
				TableSchema.TableColumn colvarDocumentoId = new TableSchema.TableColumn(schema);
				colvarDocumentoId.ColumnName = "DocumentoId";
				colvarDocumentoId.DataType = DbType.Int32;
				colvarDocumentoId.MaxLength = 0;
				colvarDocumentoId.AutoIncrement = false;
				colvarDocumentoId.IsNullable = false;
				colvarDocumentoId.IsPrimaryKey = false;
				colvarDocumentoId.IsForeignKey = false;
				colvarDocumentoId.IsReadOnly = false;
				colvarDocumentoId.DefaultSetting = @"";
				colvarDocumentoId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDocumentoId);
				
				TableSchema.TableColumn colvarFechaDocumento = new TableSchema.TableColumn(schema);
				colvarFechaDocumento.ColumnName = "FechaDocumento";
				colvarFechaDocumento.DataType = DbType.DateTime;
				colvarFechaDocumento.MaxLength = 0;
				colvarFechaDocumento.AutoIncrement = false;
				colvarFechaDocumento.IsNullable = true;
				colvarFechaDocumento.IsPrimaryKey = false;
				colvarFechaDocumento.IsForeignKey = false;
				colvarFechaDocumento.IsReadOnly = false;
				colvarFechaDocumento.DefaultSetting = @"";
				colvarFechaDocumento.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFechaDocumento);
				
				TableSchema.TableColumn colvarNoDocumento = new TableSchema.TableColumn(schema);
				colvarNoDocumento.ColumnName = "NoDocumento";
				colvarNoDocumento.DataType = DbType.Int32;
				colvarNoDocumento.MaxLength = 0;
				colvarNoDocumento.AutoIncrement = false;
				colvarNoDocumento.IsNullable = true;
				colvarNoDocumento.IsPrimaryKey = false;
				colvarNoDocumento.IsForeignKey = false;
				colvarNoDocumento.IsReadOnly = false;
				colvarNoDocumento.DefaultSetting = @"";
				colvarNoDocumento.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNoDocumento);
				
				TableSchema.TableColumn colvarLibro = new TableSchema.TableColumn(schema);
				colvarLibro.ColumnName = "Libro";
				colvarLibro.DataType = DbType.Int32;
				colvarLibro.MaxLength = 0;
				colvarLibro.AutoIncrement = false;
				colvarLibro.IsNullable = true;
				colvarLibro.IsPrimaryKey = false;
				colvarLibro.IsForeignKey = false;
				colvarLibro.IsReadOnly = false;
				colvarLibro.DefaultSetting = @"";
				colvarLibro.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLibro);
				
				TableSchema.TableColumn colvarFolio = new TableSchema.TableColumn(schema);
				colvarFolio.ColumnName = "Folio";
				colvarFolio.DataType = DbType.Int32;
				colvarFolio.MaxLength = 0;
				colvarFolio.AutoIncrement = false;
				colvarFolio.IsNullable = true;
				colvarFolio.IsPrimaryKey = false;
				colvarFolio.IsForeignKey = false;
				colvarFolio.IsReadOnly = false;
				colvarFolio.DefaultSetting = @"";
				colvarFolio.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFolio);
				
				TableSchema.TableColumn colvarNoExpediente = new TableSchema.TableColumn(schema);
				colvarNoExpediente.ColumnName = "NoExpediente";
				colvarNoExpediente.DataType = DbType.Int32;
				colvarNoExpediente.MaxLength = 0;
				colvarNoExpediente.AutoIncrement = false;
				colvarNoExpediente.IsNullable = false;
				colvarNoExpediente.IsPrimaryKey = false;
				colvarNoExpediente.IsForeignKey = false;
				colvarNoExpediente.IsReadOnly = false;
				colvarNoExpediente.DefaultSetting = @"";
				colvarNoExpediente.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNoExpediente);
				
				TableSchema.TableColumn colvarDocumento = new TableSchema.TableColumn(schema);
				colvarDocumento.ColumnName = "Documento";
				colvarDocumento.DataType = DbType.AnsiString;
				colvarDocumento.MaxLength = 150;
				colvarDocumento.AutoIncrement = false;
				colvarDocumento.IsNullable = true;
				colvarDocumento.IsPrimaryKey = false;
				colvarDocumento.IsForeignKey = false;
				colvarDocumento.IsReadOnly = false;
				colvarDocumento.DefaultSetting = @"";
				colvarDocumento.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDocumento);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["SrmProvider"].AddSchema("HistoricosDocumentos",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("RegistroId")]
		[Bindable(true)]
		public int RegistroId 
		{
			get { return GetColumnValue<int>(Columns.RegistroId); }
			set { SetColumnValue(Columns.RegistroId, value); }
		}
		  
		[XmlAttribute("DocumentoId")]
		[Bindable(true)]
		public int DocumentoId 
		{
			get { return GetColumnValue<int>(Columns.DocumentoId); }
			set { SetColumnValue(Columns.DocumentoId, value); }
		}
		  
		[XmlAttribute("FechaDocumento")]
		[Bindable(true)]
		public DateTime? FechaDocumento 
		{
			get { return GetColumnValue<DateTime?>(Columns.FechaDocumento); }
			set { SetColumnValue(Columns.FechaDocumento, value); }
		}
		  
		[XmlAttribute("NoDocumento")]
		[Bindable(true)]
		public int? NoDocumento 
		{
			get { return GetColumnValue<int?>(Columns.NoDocumento); }
			set { SetColumnValue(Columns.NoDocumento, value); }
		}
		  
		[XmlAttribute("Libro")]
		[Bindable(true)]
		public int? Libro 
		{
			get { return GetColumnValue<int?>(Columns.Libro); }
			set { SetColumnValue(Columns.Libro, value); }
		}
		  
		[XmlAttribute("Folio")]
		[Bindable(true)]
		public int? Folio 
		{
			get { return GetColumnValue<int?>(Columns.Folio); }
			set { SetColumnValue(Columns.Folio, value); }
		}
		  
		[XmlAttribute("NoExpediente")]
		[Bindable(true)]
		public int NoExpediente 
		{
			get { return GetColumnValue<int>(Columns.NoExpediente); }
			set { SetColumnValue(Columns.NoExpediente, value); }
		}
		  
		[XmlAttribute("Documento")]
		[Bindable(true)]
		public string Documento 
		{
			get { return GetColumnValue<string>(Columns.Documento); }
			set { SetColumnValue(Columns.Documento, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a Registros ActiveRecord object related to this HistoricosDocumentos
		/// 
		/// </summary>
		public CamaraComercio.DataAccess.SRM.Registros Registros
		{
			get { return CamaraComercio.DataAccess.SRM.Registros.FetchByID(this.RegistroId); }
			set { SetColumnValue("RegistroId", value.RegistroId); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varRegistroId,int varDocumentoId,DateTime? varFechaDocumento,int? varNoDocumento,int? varLibro,int? varFolio,int varNoExpediente,string varDocumento)
		{
			HistoricosDocumentos item = new HistoricosDocumentos();
			
			item.RegistroId = varRegistroId;
			
			item.DocumentoId = varDocumentoId;
			
			item.FechaDocumento = varFechaDocumento;
			
			item.NoDocumento = varNoDocumento;
			
			item.Libro = varLibro;
			
			item.Folio = varFolio;
			
			item.NoExpediente = varNoExpediente;
			
			item.Documento = varDocumento;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,int varRegistroId,int varDocumentoId,DateTime? varFechaDocumento,int? varNoDocumento,int? varLibro,int? varFolio,int varNoExpediente,string varDocumento)
		{
			HistoricosDocumentos item = new HistoricosDocumentos();
			
				item.Id = varId;
			
				item.RegistroId = varRegistroId;
			
				item.DocumentoId = varDocumentoId;
			
				item.FechaDocumento = varFechaDocumento;
			
				item.NoDocumento = varNoDocumento;
			
				item.Libro = varLibro;
			
				item.Folio = varFolio;
			
				item.NoExpediente = varNoExpediente;
			
				item.Documento = varDocumento;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn RegistroIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn DocumentoIdColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn FechaDocumentoColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn NoDocumentoColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn LibroColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn FolioColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn NoExpedienteColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn DocumentoColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"Id";
			 public static string RegistroId = @"RegistroId";
			 public static string DocumentoId = @"DocumentoId";
			 public static string FechaDocumento = @"FechaDocumento";
			 public static string NoDocumento = @"NoDocumento";
			 public static string Libro = @"Libro";
			 public static string Folio = @"Folio";
			 public static string NoExpediente = @"NoExpediente";
			 public static string Documento = @"Documento";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
