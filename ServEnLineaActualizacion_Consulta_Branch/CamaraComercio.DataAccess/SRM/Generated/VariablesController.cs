using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace CamaraComercio.DataAccess.SRM
{
    /// <summary>
    /// Controller class for Variables
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class VariablesController
    {
        // Preload our schema..
        Variables thisSchemaLoad = new Variables();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public VariablesCollection FetchAll()
        {
            VariablesCollection coll = new VariablesCollection();
            Query qry = new Query(Variables.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public VariablesCollection FetchByID(object VariableId)
        {
            VariablesCollection coll = new VariablesCollection().Where("VariableId", VariableId).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public VariablesCollection FetchByQuery(Query qry)
        {
            VariablesCollection coll = new VariablesCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object VariableId)
        {
            return (Variables.Delete(VariableId) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object VariableId)
        {
            return (Variables.Destroy(VariableId) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(string VariableId,string Descripcion,string TablaVariable,string CampoVariable,string ValorPredeterminado,int TipoFormato,string Formato,int TipoDespliegue,string Filtro,int CaseFormat,int TipoVariable,bool MultiCampoVariable,int MultiCampoDespiegue,bool MultiRow,bool AutoReplace)
	    {
		    Variables item = new Variables();
		    
            item.VariableId = VariableId;
            
            item.Descripcion = Descripcion;
            
            item.TablaVariable = TablaVariable;
            
            item.CampoVariable = CampoVariable;
            
            item.ValorPredeterminado = ValorPredeterminado;
            
            item.TipoFormato = TipoFormato;
            
            item.Formato = Formato;
            
            item.TipoDespliegue = TipoDespliegue;
            
            item.Filtro = Filtro;
            
            item.CaseFormat = CaseFormat;
            
            item.TipoVariable = TipoVariable;
            
            item.MultiCampoVariable = MultiCampoVariable;
            
            item.MultiCampoDespiegue = MultiCampoDespiegue;
            
            item.MultiRow = MultiRow;
            
            item.AutoReplace = AutoReplace;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(string VariableId,string Descripcion,string TablaVariable,string CampoVariable,string ValorPredeterminado,int TipoFormato,string Formato,int TipoDespliegue,string Filtro,int CaseFormat,int TipoVariable,bool MultiCampoVariable,int MultiCampoDespiegue,bool MultiRow,bool AutoReplace)
	    {
		    Variables item = new Variables();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.VariableId = VariableId;
				
			item.Descripcion = Descripcion;
				
			item.TablaVariable = TablaVariable;
				
			item.CampoVariable = CampoVariable;
				
			item.ValorPredeterminado = ValorPredeterminado;
				
			item.TipoFormato = TipoFormato;
				
			item.Formato = Formato;
				
			item.TipoDespliegue = TipoDespliegue;
				
			item.Filtro = Filtro;
				
			item.CaseFormat = CaseFormat;
				
			item.TipoVariable = TipoVariable;
				
			item.MultiCampoVariable = MultiCampoVariable;
				
			item.MultiCampoDespiegue = MultiCampoDespiegue;
				
			item.MultiRow = MultiRow;
				
			item.AutoReplace = AutoReplace;
				
	        item.Save(UserName);
	    }
    }
}
