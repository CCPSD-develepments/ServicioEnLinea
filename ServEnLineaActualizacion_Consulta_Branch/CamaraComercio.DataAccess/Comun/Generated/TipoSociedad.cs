using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace CamaraComercio.DataAccess.Comun
{
	/// <summary>
	/// Strongly-typed collection for the TipoSociedad class.
	/// </summary>
    [Serializable]
	public partial class TipoSociedadCollection : ActiveList<TipoSociedad, TipoSociedadCollection>
	{	   
		public TipoSociedadCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TipoSociedadCollection</returns>
		public TipoSociedadCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TipoSociedad o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TipoSociedad table.
	/// </summary>
	[Serializable]
	public partial class TipoSociedad : ActiveRecord<TipoSociedad>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TipoSociedad()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TipoSociedad(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TipoSociedad(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TipoSociedad(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TipoSociedad", TableType.Table, DataService.GetInstance("ComunProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarTipoSociedadId = new TableSchema.TableColumn(schema);
				colvarTipoSociedadId.ColumnName = "TipoSociedadId";
				colvarTipoSociedadId.DataType = DbType.Int32;
				colvarTipoSociedadId.MaxLength = 0;
				colvarTipoSociedadId.AutoIncrement = true;
				colvarTipoSociedadId.IsNullable = false;
				colvarTipoSociedadId.IsPrimaryKey = true;
				colvarTipoSociedadId.IsForeignKey = false;
				colvarTipoSociedadId.IsReadOnly = false;
				colvarTipoSociedadId.DefaultSetting = @"";
				colvarTipoSociedadId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTipoSociedadId);
				
				TableSchema.TableColumn colvarDescripcion = new TableSchema.TableColumn(schema);
				colvarDescripcion.ColumnName = "Descripcion";
				colvarDescripcion.DataType = DbType.AnsiString;
				colvarDescripcion.MaxLength = 100;
				colvarDescripcion.AutoIncrement = false;
				colvarDescripcion.IsNullable = false;
				colvarDescripcion.IsPrimaryKey = false;
				colvarDescripcion.IsForeignKey = false;
				colvarDescripcion.IsReadOnly = false;
				colvarDescripcion.DefaultSetting = @"";
				colvarDescripcion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescripcion);
				
				TableSchema.TableColumn colvarTipoIdentificador = new TableSchema.TableColumn(schema);
				colvarTipoIdentificador.ColumnName = "TipoIdentificador";
				colvarTipoIdentificador.DataType = DbType.Int32;
				colvarTipoIdentificador.MaxLength = 0;
				colvarTipoIdentificador.AutoIncrement = false;
				colvarTipoIdentificador.IsNullable = false;
				colvarTipoIdentificador.IsPrimaryKey = false;
				colvarTipoIdentificador.IsForeignKey = false;
				colvarTipoIdentificador.IsReadOnly = false;
				colvarTipoIdentificador.DefaultSetting = @"";
				colvarTipoIdentificador.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTipoIdentificador);
				
				TableSchema.TableColumn colvarEtiqueta = new TableSchema.TableColumn(schema);
				colvarEtiqueta.ColumnName = "Etiqueta";
				colvarEtiqueta.DataType = DbType.AnsiString;
				colvarEtiqueta.MaxLength = 5;
				colvarEtiqueta.AutoIncrement = false;
				colvarEtiqueta.IsNullable = false;
				colvarEtiqueta.IsPrimaryKey = false;
				colvarEtiqueta.IsForeignKey = false;
				colvarEtiqueta.IsReadOnly = false;
				colvarEtiqueta.DefaultSetting = @"";
				colvarEtiqueta.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEtiqueta);
				
				TableSchema.TableColumn colvarFechaModificacion = new TableSchema.TableColumn(schema);
				colvarFechaModificacion.ColumnName = "FechaModificacion";
				colvarFechaModificacion.DataType = DbType.DateTime;
				colvarFechaModificacion.MaxLength = 0;
				colvarFechaModificacion.AutoIncrement = false;
				colvarFechaModificacion.IsNullable = false;
				colvarFechaModificacion.IsPrimaryKey = false;
				colvarFechaModificacion.IsForeignKey = false;
				colvarFechaModificacion.IsReadOnly = false;
				
						colvarFechaModificacion.DefaultSetting = @"(getdate())";
				colvarFechaModificacion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFechaModificacion);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ComunProvider"].AddSchema("TipoSociedad",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("TipoSociedadId")]
		[Bindable(true)]
		public int TipoSociedadId 
		{
			get { return GetColumnValue<int>(Columns.TipoSociedadId); }
			set { SetColumnValue(Columns.TipoSociedadId, value); }
		}
		  
		[XmlAttribute("Descripcion")]
		[Bindable(true)]
		public string Descripcion 
		{
			get { return GetColumnValue<string>(Columns.Descripcion); }
			set { SetColumnValue(Columns.Descripcion, value); }
		}
		  
		[XmlAttribute("TipoIdentificador")]
		[Bindable(true)]
		public int TipoIdentificador 
		{
			get { return GetColumnValue<int>(Columns.TipoIdentificador); }
			set { SetColumnValue(Columns.TipoIdentificador, value); }
		}
		  
		[XmlAttribute("Etiqueta")]
		[Bindable(true)]
		public string Etiqueta 
		{
			get { return GetColumnValue<string>(Columns.Etiqueta); }
			set { SetColumnValue(Columns.Etiqueta, value); }
		}
		  
		[XmlAttribute("FechaModificacion")]
		[Bindable(true)]
		public DateTime FechaModificacion 
		{
			get { return GetColumnValue<DateTime>(Columns.FechaModificacion); }
			set { SetColumnValue(Columns.FechaModificacion, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public CamaraComercio.DataAccess.Comun.ServicioDocumentoRequeridoCollection ServicioDocumentoRequeridoRecords()
		{
			return new CamaraComercio.DataAccess.Comun.ServicioDocumentoRequeridoCollection().Where(ServicioDocumentoRequerido.Columns.TipoSociedadId, TipoSociedadId).Load();
		}
		public CamaraComercio.DataAccess.Comun.TipoSociedadSufijoCollection TipoSociedadSufijoRecords()
		{
			return new CamaraComercio.DataAccess.Comun.TipoSociedadSufijoCollection().Where(TipoSociedadSufijo.Columns.TipoSociedadId, TipoSociedadId).Load();
		}
		#endregion
		
			
		
		//no foreign key tables defined (0)
		
		
		
		#region Many To Many Helpers
		
		 
		public CamaraComercio.DataAccess.Comun.ServicioCollection GetServicioCollection() { return TipoSociedad.GetServicioCollection(this.TipoSociedadId); }
		public static CamaraComercio.DataAccess.Comun.ServicioCollection GetServicioCollection(int varTipoSociedadId)
		{
		    SubSonic.QueryCommand cmd = new SubSonic.QueryCommand("SELECT * FROM [dbo].[Servicio] INNER JOIN [ServicioDocumentoRequerido] ON [Servicio].[ServicioId] = [ServicioDocumentoRequerido].[ServicioId] WHERE [ServicioDocumentoRequerido].[TipoSociedadId] = @TipoSociedadId", TipoSociedad.Schema.Provider.Name);
			cmd.AddParameter("@TipoSociedadId", varTipoSociedadId, DbType.Int32);
			IDataReader rdr = SubSonic.DataService.GetReader(cmd);
			ServicioCollection coll = new ServicioCollection();
			coll.LoadAndCloseReader(rdr);
			return coll;
		}
		
		public static void SaveServicioMap(int varTipoSociedadId, ServicioCollection items)
		{
			QueryCommandCollection coll = new SubSonic.QueryCommandCollection();
			//delete out the existing
			QueryCommand cmdDel = new QueryCommand("DELETE FROM [ServicioDocumentoRequerido] WHERE [ServicioDocumentoRequerido].[TipoSociedadId] = @TipoSociedadId", TipoSociedad.Schema.Provider.Name);
			cmdDel.AddParameter("@TipoSociedadId", varTipoSociedadId, DbType.Int32);
			coll.Add(cmdDel);
			DataService.ExecuteTransaction(coll);
			foreach (Servicio item in items)
			{
				ServicioDocumentoRequerido varServicioDocumentoRequerido = new ServicioDocumentoRequerido();
				varServicioDocumentoRequerido.SetColumnValue("TipoSociedadId", varTipoSociedadId);
				varServicioDocumentoRequerido.SetColumnValue("ServicioId", item.GetPrimaryKeyValue());
				varServicioDocumentoRequerido.Save();
			}
		}
		public static void SaveServicioMap(int varTipoSociedadId, System.Web.UI.WebControls.ListItemCollection itemList) 
		{
			QueryCommandCollection coll = new SubSonic.QueryCommandCollection();
			//delete out the existing
			 QueryCommand cmdDel = new QueryCommand("DELETE FROM [ServicioDocumentoRequerido] WHERE [ServicioDocumentoRequerido].[TipoSociedadId] = @TipoSociedadId", TipoSociedad.Schema.Provider.Name);
			cmdDel.AddParameter("@TipoSociedadId", varTipoSociedadId, DbType.Int32);
			coll.Add(cmdDel);
			DataService.ExecuteTransaction(coll);
			foreach (System.Web.UI.WebControls.ListItem l in itemList) 
			{
				if (l.Selected) 
				{
					ServicioDocumentoRequerido varServicioDocumentoRequerido = new ServicioDocumentoRequerido();
					varServicioDocumentoRequerido.SetColumnValue("TipoSociedadId", varTipoSociedadId);
					varServicioDocumentoRequerido.SetColumnValue("ServicioId", l.Value);
					varServicioDocumentoRequerido.Save();
				}
			}
		}
		public static void SaveServicioMap(int varTipoSociedadId , int[] itemList) 
		{
			QueryCommandCollection coll = new SubSonic.QueryCommandCollection();
			//delete out the existing
			 QueryCommand cmdDel = new QueryCommand("DELETE FROM [ServicioDocumentoRequerido] WHERE [ServicioDocumentoRequerido].[TipoSociedadId] = @TipoSociedadId", TipoSociedad.Schema.Provider.Name);
			cmdDel.AddParameter("@TipoSociedadId", varTipoSociedadId, DbType.Int32);
			coll.Add(cmdDel);
			DataService.ExecuteTransaction(coll);
			foreach (int item in itemList) 
			{
				ServicioDocumentoRequerido varServicioDocumentoRequerido = new ServicioDocumentoRequerido();
				varServicioDocumentoRequerido.SetColumnValue("TipoSociedadId", varTipoSociedadId);
				varServicioDocumentoRequerido.SetColumnValue("ServicioId", item);
				varServicioDocumentoRequerido.Save();
			}
		}
		
		public static void DeleteServicioMap(int varTipoSociedadId) 
		{
			QueryCommand cmdDel = new QueryCommand("DELETE FROM [ServicioDocumentoRequerido] WHERE [ServicioDocumentoRequerido].[TipoSociedadId] = @TipoSociedadId", TipoSociedad.Schema.Provider.Name);
			cmdDel.AddParameter("@TipoSociedadId", varTipoSociedadId, DbType.Int32);
			DataService.ExecuteQuery(cmdDel);
		}
		
		 
		public CamaraComercio.DataAccess.Comun.TipoDocumentoCollection GetTipoDocumentoCollection() { return TipoSociedad.GetTipoDocumentoCollection(this.TipoSociedadId); }
		public static CamaraComercio.DataAccess.Comun.TipoDocumentoCollection GetTipoDocumentoCollection(int varTipoSociedadId)
		{
		    SubSonic.QueryCommand cmd = new SubSonic.QueryCommand("SELECT * FROM [dbo].[TipoDocumento] INNER JOIN [ServicioDocumentoRequerido] ON [TipoDocumento].[TipoDocumentoId] = [ServicioDocumentoRequerido].[TipoDocumentoId] WHERE [ServicioDocumentoRequerido].[TipoSociedadId] = @TipoSociedadId", TipoSociedad.Schema.Provider.Name);
			cmd.AddParameter("@TipoSociedadId", varTipoSociedadId, DbType.Int32);
			IDataReader rdr = SubSonic.DataService.GetReader(cmd);
			TipoDocumentoCollection coll = new TipoDocumentoCollection();
			coll.LoadAndCloseReader(rdr);
			return coll;
		}
		
		public static void SaveTipoDocumentoMap(int varTipoSociedadId, TipoDocumentoCollection items)
		{
			QueryCommandCollection coll = new SubSonic.QueryCommandCollection();
			//delete out the existing
			QueryCommand cmdDel = new QueryCommand("DELETE FROM [ServicioDocumentoRequerido] WHERE [ServicioDocumentoRequerido].[TipoSociedadId] = @TipoSociedadId", TipoSociedad.Schema.Provider.Name);
			cmdDel.AddParameter("@TipoSociedadId", varTipoSociedadId, DbType.Int32);
			coll.Add(cmdDel);
			DataService.ExecuteTransaction(coll);
			foreach (TipoDocumento item in items)
			{
				ServicioDocumentoRequerido varServicioDocumentoRequerido = new ServicioDocumentoRequerido();
				varServicioDocumentoRequerido.SetColumnValue("TipoSociedadId", varTipoSociedadId);
				varServicioDocumentoRequerido.SetColumnValue("TipoDocumentoId", item.GetPrimaryKeyValue());
				varServicioDocumentoRequerido.Save();
			}
		}
		public static void SaveTipoDocumentoMap(int varTipoSociedadId, System.Web.UI.WebControls.ListItemCollection itemList) 
		{
			QueryCommandCollection coll = new SubSonic.QueryCommandCollection();
			//delete out the existing
			 QueryCommand cmdDel = new QueryCommand("DELETE FROM [ServicioDocumentoRequerido] WHERE [ServicioDocumentoRequerido].[TipoSociedadId] = @TipoSociedadId", TipoSociedad.Schema.Provider.Name);
			cmdDel.AddParameter("@TipoSociedadId", varTipoSociedadId, DbType.Int32);
			coll.Add(cmdDel);
			DataService.ExecuteTransaction(coll);
			foreach (System.Web.UI.WebControls.ListItem l in itemList) 
			{
				if (l.Selected) 
				{
					ServicioDocumentoRequerido varServicioDocumentoRequerido = new ServicioDocumentoRequerido();
					varServicioDocumentoRequerido.SetColumnValue("TipoSociedadId", varTipoSociedadId);
					varServicioDocumentoRequerido.SetColumnValue("TipoDocumentoId", l.Value);
					varServicioDocumentoRequerido.Save();
				}
			}
		}
		public static void SaveTipoDocumentoMap(int varTipoSociedadId , int[] itemList) 
		{
			QueryCommandCollection coll = new SubSonic.QueryCommandCollection();
			//delete out the existing
			 QueryCommand cmdDel = new QueryCommand("DELETE FROM [ServicioDocumentoRequerido] WHERE [ServicioDocumentoRequerido].[TipoSociedadId] = @TipoSociedadId", TipoSociedad.Schema.Provider.Name);
			cmdDel.AddParameter("@TipoSociedadId", varTipoSociedadId, DbType.Int32);
			coll.Add(cmdDel);
			DataService.ExecuteTransaction(coll);
			foreach (int item in itemList) 
			{
				ServicioDocumentoRequerido varServicioDocumentoRequerido = new ServicioDocumentoRequerido();
				varServicioDocumentoRequerido.SetColumnValue("TipoSociedadId", varTipoSociedadId);
				varServicioDocumentoRequerido.SetColumnValue("TipoDocumentoId", item);
				varServicioDocumentoRequerido.Save();
			}
		}
		
		public static void DeleteTipoDocumentoMap(int varTipoSociedadId) 
		{
			QueryCommand cmdDel = new QueryCommand("DELETE FROM [ServicioDocumentoRequerido] WHERE [ServicioDocumentoRequerido].[TipoSociedadId] = @TipoSociedadId", TipoSociedad.Schema.Provider.Name);
			cmdDel.AddParameter("@TipoSociedadId", varTipoSociedadId, DbType.Int32);
			DataService.ExecuteQuery(cmdDel);
		}
		
		#endregion
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varDescripcion,int varTipoIdentificador,string varEtiqueta,DateTime varFechaModificacion)
		{
			TipoSociedad item = new TipoSociedad();
			
			item.Descripcion = varDescripcion;
			
			item.TipoIdentificador = varTipoIdentificador;
			
			item.Etiqueta = varEtiqueta;
			
			item.FechaModificacion = varFechaModificacion;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varTipoSociedadId,string varDescripcion,int varTipoIdentificador,string varEtiqueta,DateTime varFechaModificacion)
		{
			TipoSociedad item = new TipoSociedad();
			
				item.TipoSociedadId = varTipoSociedadId;
			
				item.Descripcion = varDescripcion;
			
				item.TipoIdentificador = varTipoIdentificador;
			
				item.Etiqueta = varEtiqueta;
			
				item.FechaModificacion = varFechaModificacion;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn TipoSociedadIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn DescripcionColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn TipoIdentificadorColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn EtiquetaColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn FechaModificacionColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string TipoSociedadId = @"TipoSociedadId";
			 public static string Descripcion = @"Descripcion";
			 public static string TipoIdentificador = @"TipoIdentificador";
			 public static string Etiqueta = @"Etiqueta";
			 public static string FechaModificacion = @"FechaModificacion";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
