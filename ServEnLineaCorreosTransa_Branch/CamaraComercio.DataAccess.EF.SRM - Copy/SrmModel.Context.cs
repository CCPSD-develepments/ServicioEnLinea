//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.EntityClient;

namespace CamaraComercio.DataAccess.EF.SRM
{
    public partial class CamaraSRMEntities : ObjectContext
    {
        public const string ConnectionString = "name=CamaraSRMEntities";
        public const string ContainerName = "CamaraSRMEntities";
    
        #region Constructors
    
        public CamaraSRMEntities()
            : base(ConnectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        public CamaraSRMEntities(string connectionString)
            : base(connectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        public CamaraSRMEntities(EntityConnection connection)
            : base(connection, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public ObjectSet<Modulos> Modulos
        {
            get { return _modulos  ?? (_modulos = CreateObjectSet<Modulos>("Modulos")); }
        }
        private ObjectSet<Modulos> _modulos;
    
        public ObjectSet<ModulosRoles> ModulosRoles
        {
            get { return _modulosRoles  ?? (_modulosRoles = CreateObjectSet<ModulosRoles>("ModulosRoles")); }
        }
        private ObjectSet<ModulosRoles> _modulosRoles;
    
        public ObjectSet<Roles> Roles
        {
            get { return _roles  ?? (_roles = CreateObjectSet<Roles>("Roles")); }
        }
        private ObjectSet<Roles> _roles;
    
        public ObjectSet<Tarifas> Tarifas
        {
            get { return _tarifas  ?? (_tarifas = CreateObjectSet<Tarifas>("Tarifas")); }
        }
        private ObjectSet<Tarifas> _tarifas;
    
        public ObjectSet<TiposContadores> TiposContadores
        {
            get { return _tiposContadores  ?? (_tiposContadores = CreateObjectSet<TiposContadores>("TiposContadores")); }
        }
        private ObjectSet<TiposContadores> _tiposContadores;
    
        public ObjectSet<Usuarios> Usuarios
        {
            get { return _usuarios  ?? (_usuarios = CreateObjectSet<Usuarios>("Usuarios")); }
        }
        private ObjectSet<Usuarios> _usuarios;
    
        public ObjectSet<UsuariosContadores> UsuariosContadores
        {
            get { return _usuariosContadores  ?? (_usuariosContadores = CreateObjectSet<UsuariosContadores>("UsuariosContadores")); }
        }
        private ObjectSet<UsuariosContadores> _usuariosContadores;
    
        public ObjectSet<UsuariosRoles> UsuariosRoles
        {
            get { return _usuariosRoles  ?? (_usuariosRoles = CreateObjectSet<UsuariosRoles>("UsuariosRoles")); }
        }
        private ObjectSet<UsuariosRoles> _usuariosRoles;
    
        public ObjectSet<HistoricosDocumentos> HistoricosDocumentos
        {
            get { return _historicosDocumentos  ?? (_historicosDocumentos = CreateObjectSet<HistoricosDocumentos>("HistoricosDocumentos")); }
        }
        private ObjectSet<HistoricosDocumentos> _historicosDocumentos;
    
        public ObjectSet<TransaccionLog> TransaccionLog
        {
            get { return _transaccionLog  ?? (_transaccionLog = CreateObjectSet<TransaccionLog>("TransaccionLog")); }
        }
        private ObjectSet<TransaccionLog> _transaccionLog;
    
        public ObjectSet<Direcciones> Direcciones
        {
            get { return _direcciones  ?? (_direcciones = CreateObjectSet<Direcciones>("Direcciones")); }
        }
        private ObjectSet<Direcciones> _direcciones;
    
        public ObjectSet<Personas> Personas
        {
            get { return _personas  ?? (_personas = CreateObjectSet<Personas>("Personas")); }
        }
        private ObjectSet<Personas> _personas;
    
        public ObjectSet<PersonasDirecciones> PersonasDirecciones
        {
            get { return _personasDirecciones  ?? (_personasDirecciones = CreateObjectSet<PersonasDirecciones>("PersonasDirecciones")); }
        }
        private ObjectSet<PersonasDirecciones> _personasDirecciones;
    
        public ObjectSet<PersonasRegistros> PersonasRegistros
        {
            get { return _personasRegistros  ?? (_personasRegistros = CreateObjectSet<PersonasRegistros>("PersonasRegistros")); }
        }
        private ObjectSet<PersonasRegistros> _personasRegistros;
    
        public ObjectSet<Agenda> Agenda
        {
            get { return _agenda  ?? (_agenda = CreateObjectSet<Agenda>("Agenda")); }
        }
        private ObjectSet<Agenda> _agenda;
    
        public ObjectSet<AngendaTransacciones> AngendaTransacciones
        {
            get { return _angendaTransacciones  ?? (_angendaTransacciones = CreateObjectSet<AngendaTransacciones>("AngendaTransacciones")); }
        }
        private ObjectSet<AngendaTransacciones> _angendaTransacciones;
    
        public ObjectSet<TiposTareas> TiposTareas
        {
            get { return _tiposTareas  ?? (_tiposTareas = CreateObjectSet<TiposTareas>("TiposTareas")); }
        }
        private ObjectSet<TiposTareas> _tiposTareas;
    
        public ObjectSet<CategoriasSocios> CategoriasSocios
        {
            get { return _categoriasSocios  ?? (_categoriasSocios = CreateObjectSet<CategoriasSocios>("CategoriasSocios")); }
        }
        private ObjectSet<CategoriasSocios> _categoriasSocios;
    
        public ObjectSet<ContadorRegistro> ContadorRegistro
        {
            get { return _contadorRegistro  ?? (_contadorRegistro = CreateObjectSet<ContadorRegistro>("ContadorRegistro")); }
        }
        private ObjectSet<ContadorRegistro> _contadorRegistro;
    
        public ObjectSet<LibroDigital> LibroDigital
        {
            get { return _libroDigital  ?? (_libroDigital = CreateObjectSet<LibroDigital>("LibroDigital")); }
        }
        private ObjectSet<LibroDigital> _libroDigital;
    
        public ObjectSet<Oposiciones> Oposiciones
        {
            get { return _oposiciones  ?? (_oposiciones = CreateObjectSet<Oposiciones>("Oposiciones")); }
        }
        private ObjectSet<Oposiciones> _oposiciones;
    
        public ObjectSet<Productos> Productos
        {
            get { return _productos  ?? (_productos = CreateObjectSet<Productos>("Productos")); }
        }
        private ObjectSet<Productos> _productos;
    
        public ObjectSet<ReferenciasBancarias> ReferenciasBancarias
        {
            get { return _referenciasBancarias  ?? (_referenciasBancarias = CreateObjectSet<ReferenciasBancarias>("ReferenciasBancarias")); }
        }
        private ObjectSet<ReferenciasBancarias> _referenciasBancarias;
    
        public ObjectSet<ReferenciasComerciales> ReferenciasComerciales
        {
            get { return _referenciasComerciales  ?? (_referenciasComerciales = CreateObjectSet<ReferenciasComerciales>("ReferenciasComerciales")); }
        }
        private ObjectSet<ReferenciasComerciales> _referenciasComerciales;
    
        public ObjectSet<RegistrosActividades> RegistrosActividades
        {
            get { return _registrosActividades  ?? (_registrosActividades = CreateObjectSet<RegistrosActividades>("RegistrosActividades")); }
        }
        private ObjectSet<RegistrosActividades> _registrosActividades;
    
        public ObjectSet<RegistrosActividadesEspecificas> RegistrosActividadesEspecificas
        {
            get { return _registrosActividadesEspecificas  ?? (_registrosActividadesEspecificas = CreateObjectSet<RegistrosActividadesEspecificas>("RegistrosActividadesEspecificas")); }
        }
        private ObjectSet<RegistrosActividadesEspecificas> _registrosActividadesEspecificas;
    
        public ObjectSet<RegistrosOposiciones> RegistrosOposiciones
        {
            get { return _registrosOposiciones  ?? (_registrosOposiciones = CreateObjectSet<RegistrosOposiciones>("RegistrosOposiciones")); }
        }
        private ObjectSet<RegistrosOposiciones> _registrosOposiciones;
    
        public ObjectSet<RegistrosSocios> RegistrosSocios
        {
            get { return _registrosSocios  ?? (_registrosSocios = CreateObjectSet<RegistrosSocios>("RegistrosSocios")); }
        }
        private ObjectSet<RegistrosSocios> _registrosSocios;
    
        public ObjectSet<SistemasArmonizados> SistemasArmonizados
        {
            get { return _sistemasArmonizados  ?? (_sistemasArmonizados = CreateObjectSet<SistemasArmonizados>("SistemasArmonizados")); }
        }
        private ObjectSet<SistemasArmonizados> _sistemasArmonizados;
    
        public ObjectSet<TiposSentencias> TiposSentencias
        {
            get { return _tiposSentencias  ?? (_tiposSentencias = CreateObjectSet<TiposSentencias>("TiposSentencias")); }
        }
        private ObjectSet<TiposSentencias> _tiposSentencias;
    
        public ObjectSet<Variables> Variables
        {
            get { return _variables  ?? (_variables = CreateObjectSet<Variables>("Variables")); }
        }
        private ObjectSet<Variables> _variables;
    
        public ObjectSet<Sociedades> Sociedades
        {
            get { return _sociedades  ?? (_sociedades = CreateObjectSet<Sociedades>("Sociedades")); }
        }
        private ObjectSet<Sociedades> _sociedades;
    
        public ObjectSet<SociedadesLogos> SociedadesLogos
        {
            get { return _sociedadesLogos  ?? (_sociedadesLogos = CreateObjectSet<SociedadesLogos>("SociedadesLogos")); }
        }
        private ObjectSet<SociedadesLogos> _sociedadesLogos;
    
        public ObjectSet<Suscursales> Suscursales
        {
            get { return _suscursales  ?? (_suscursales = CreateObjectSet<Suscursales>("Suscursales")); }
        }
        private ObjectSet<Suscursales> _suscursales;
    
        public ObjectSet<DEFINICION_COLUMNAS> DEFINICION_COLUMNAS
        {
            get { return _dEFINICION_COLUMNAS  ?? (_dEFINICION_COLUMNAS = CreateObjectSet<DEFINICION_COLUMNAS>("DEFINICION_COLUMNAS")); }
        }
        private ObjectSet<DEFINICION_COLUMNAS> _dEFINICION_COLUMNAS;
    
        public ObjectSet<Asignaciones> Asignaciones
        {
            get { return _asignaciones  ?? (_asignaciones = CreateObjectSet<Asignaciones>("Asignaciones")); }
        }
        private ObjectSet<Asignaciones> _asignaciones;
    
        public ObjectSet<DocumentosTransacciones> DocumentosTransacciones
        {
            get { return _documentosTransacciones  ?? (_documentosTransacciones = CreateObjectSet<DocumentosTransacciones>("DocumentosTransacciones")); }
        }
        private ObjectSet<DocumentosTransacciones> _documentosTransacciones;
    
        public ObjectSet<EstatusTransacciones> EstatusTransacciones
        {
            get { return _estatusTransacciones  ?? (_estatusTransacciones = CreateObjectSet<EstatusTransacciones>("EstatusTransacciones")); }
        }
        private ObjectSet<EstatusTransacciones> _estatusTransacciones;
    
        public ObjectSet<NotificacionesTransacciones> NotificacionesTransacciones
        {
            get { return _notificacionesTransacciones  ?? (_notificacionesTransacciones = CreateObjectSet<NotificacionesTransacciones>("NotificacionesTransacciones")); }
        }
        private ObjectSet<NotificacionesTransacciones> _notificacionesTransacciones;
    
        public ObjectSet<SeguimientoTransacciones> SeguimientoTransacciones
        {
            get { return _seguimientoTransacciones  ?? (_seguimientoTransacciones = CreateObjectSet<SeguimientoTransacciones>("SeguimientoTransacciones")); }
        }
        private ObjectSet<SeguimientoTransacciones> _seguimientoTransacciones;
    
        public ObjectSet<TiposPagos> TiposPagos
        {
            get { return _tiposPagos  ?? (_tiposPagos = CreateObjectSet<TiposPagos>("TiposPagos")); }
        }
        private ObjectSet<TiposPagos> _tiposPagos;
    
        public ObjectSet<Transacciones> Transacciones
        {
            get { return _transacciones  ?? (_transacciones = CreateObjectSet<Transacciones>("Transacciones")); }
        }
        private ObjectSet<Transacciones> _transacciones;
    
        public ObjectSet<TransaccionesPersonas> TransaccionesPersonas
        {
            get { return _transaccionesPersonas  ?? (_transaccionesPersonas = CreateObjectSet<TransaccionesPersonas>("TransaccionesPersonas")); }
        }
        private ObjectSet<TransaccionesPersonas> _transaccionesPersonas;
    
        public ObjectSet<TransaccionesSociedades> TransaccionesSociedades
        {
            get { return _transaccionesSociedades  ?? (_transaccionesSociedades = CreateObjectSet<TransaccionesSociedades>("TransaccionesSociedades")); }
        }
        private ObjectSet<TransaccionesSociedades> _transaccionesSociedades;
    
        public ObjectSet<UbicacionesExpedientes> UbicacionesExpedientes
        {
            get { return _ubicacionesExpedientes  ?? (_ubicacionesExpedientes = CreateObjectSet<UbicacionesExpedientes>("UbicacionesExpedientes")); }
        }
        private ObjectSet<UbicacionesExpedientes> _ubicacionesExpedientes;
    
        public ObjectSet<ViewSumarioSociedades> ViewSumarioSociedades
        {
            get { return _viewSumarioSociedades  ?? (_viewSumarioSociedades = CreateObjectSet<ViewSumarioSociedades>("ViewSumarioSociedades")); }
        }
        private ObjectSet<ViewSumarioSociedades> _viewSumarioSociedades;
    
        public ObjectSet<ViewRegistrosProductos> ViewRegistrosProductos
        {
            get { return _viewRegistrosProductos  ?? (_viewRegistrosProductos = CreateObjectSet<ViewRegistrosProductos>("ViewRegistrosProductos")); }
        }
        private ObjectSet<ViewRegistrosProductos> _viewRegistrosProductos;
    
        public ObjectSet<ViewRegistrosSocios> ViewRegistrosSocios
        {
            get { return _viewRegistrosSocios  ?? (_viewRegistrosSocios = CreateObjectSet<ViewRegistrosSocios>("ViewRegistrosSocios")); }
        }
        private ObjectSet<ViewRegistrosSocios> _viewRegistrosSocios;
    
        public ObjectSet<ViewReferenciasBancarias> ViewReferenciasBancarias
        {
            get { return _viewReferenciasBancarias  ?? (_viewReferenciasBancarias = CreateObjectSet<ViewReferenciasBancarias>("ViewReferenciasBancarias")); }
        }
        private ObjectSet<ViewReferenciasBancarias> _viewReferenciasBancarias;
    
        public ObjectSet<ViewPersonasEnSociedades> ViewPersonasEnSociedades
        {
            get { return _viewPersonasEnSociedades  ?? (_viewPersonasEnSociedades = CreateObjectSet<ViewPersonasEnSociedades>("ViewPersonasEnSociedades")); }
        }
        private ObjectSet<ViewPersonasEnSociedades> _viewPersonasEnSociedades;
    
        public ObjectSet<ViewRegistrosActividades> ViewRegistrosActividades
        {
            get { return _viewRegistrosActividades  ?? (_viewRegistrosActividades = CreateObjectSet<ViewRegistrosActividades>("ViewRegistrosActividades")); }
        }
        private ObjectSet<ViewRegistrosActividades> _viewRegistrosActividades;
    
        public ObjectSet<ViewDirecciones> ViewDirecciones
        {
            get { return _viewDirecciones  ?? (_viewDirecciones = CreateObjectSet<ViewDirecciones>("ViewDirecciones")); }
        }
        private ObjectSet<ViewDirecciones> _viewDirecciones;
    
        public ObjectSet<ViewRegistrosOposiciones> ViewRegistrosOposiciones
        {
            get { return _viewRegistrosOposiciones  ?? (_viewRegistrosOposiciones = CreateObjectSet<ViewRegistrosOposiciones>("ViewRegistrosOposiciones")); }
        }
        private ObjectSet<ViewRegistrosOposiciones> _viewRegistrosOposiciones;
    
        public ObjectSet<Facturas> Facturas
        {
            get { return _facturas  ?? (_facturas = CreateObjectSet<Facturas>("Facturas")); }
        }
        private ObjectSet<Facturas> _facturas;
    
        public ObjectSet<FormasPagos> FormasPagos
        {
            get { return _formasPagos  ?? (_formasPagos = CreateObjectSet<FormasPagos>("FormasPagos")); }
        }
        private ObjectSet<FormasPagos> _formasPagos;
    
        public ObjectSet<TransaccionDetalle> TransaccionDetalle
        {
            get { return _transaccionDetalle  ?? (_transaccionDetalle = CreateObjectSet<TransaccionDetalle>("TransaccionDetalle")); }
        }
        private ObjectSet<TransaccionDetalle> _transaccionDetalle;
    
        public ObjectSet<Registros> Registros
        {
            get { return _registros  ?? (_registros = CreateObjectSet<Registros>("Registros")); }
        }
        private ObjectSet<Registros> _registros;
    
        public ObjectSet<ModelosCertificaciones> ModelosCertificaciones
        {
            get { return _modelosCertificaciones  ?? (_modelosCertificaciones = CreateObjectSet<ModelosCertificaciones>("ModelosCertificaciones")); }
        }
        private ObjectSet<ModelosCertificaciones> _modelosCertificaciones;
    
        public ObjectSet<NotasCredito> NotasCredito
        {
            get { return _notasCredito  ?? (_notasCredito = CreateObjectSet<NotasCredito>("NotasCredito")); }
        }
        private ObjectSet<NotasCredito> _notasCredito;
    
        public ObjectSet<SubTransacciones> SubTransacciones
        {
            get { return _subTransacciones  ?? (_subTransacciones = CreateObjectSet<SubTransacciones>("SubTransacciones")); }
        }
        private ObjectSet<SubTransacciones> _subTransacciones;
    
        public ObjectSet<SociedadesRegistros> SociedadesRegistros
        {
            get { return _sociedadesRegistros  ?? (_sociedadesRegistros = CreateObjectSet<SociedadesRegistros>("SociedadesRegistros")); }
        }
        private ObjectSet<SociedadesRegistros> _sociedadesRegistros;
    
        public ObjectSet<UsuariosEstatus> UsuariosEstatus
        {
            get { return _usuariosEstatus  ?? (_usuariosEstatus = CreateObjectSet<UsuariosEstatus>("UsuariosEstatus")); }
        }
        private ObjectSet<UsuariosEstatus> _usuariosEstatus;
    
        public ObjectSet<cvw_SociedadesRegistros> cvw_SociedadesRegistros
        {
            get { return _cvw_SociedadesRegistros  ?? (_cvw_SociedadesRegistros = CreateObjectSet<cvw_SociedadesRegistros>("cvw_SociedadesRegistros")); }
        }
        private ObjectSet<cvw_SociedadesRegistros> _cvw_SociedadesRegistros;
    
        public ObjectSet<SeguimientoOposiciones> SeguimientoOposiciones
        {
            get { return _seguimientoOposiciones  ?? (_seguimientoOposiciones = CreateObjectSet<SeguimientoOposiciones>("SeguimientoOposiciones")); }
        }
        private ObjectSet<SeguimientoOposiciones> _seguimientoOposiciones;

        #endregion

        #region Function Imports
        public ObjectResult<string> GetNcfSecuencia(string codigo)
        {
    
            ObjectParameter codigoParameter;
    
            if (codigo != null)
            {
                codigoParameter = new ObjectParameter("Codigo", codigo);
            }
            else
            {
                codigoParameter = new ObjectParameter("Codigo", typeof(string));
            }
            return base.ExecuteFunction<string>("GetNcfSecuencia", codigoParameter);
        }
        public ObjectResult<Nullable<int>> SentInvoiceDetailToAccounting(Nullable<int> transaccionId, Nullable<System.DateTime> fecha, string nombreUsuarioReferencia, string cuenta, string detalle, Nullable<decimal> cantidad, Nullable<decimal> precioUnitario, Nullable<decimal> descuentoDetalle, Nullable<decimal> totalDetalle, Nullable<decimal> totalBrutoDetalle, Nullable<System.Guid> flowId)
        {
    
            ObjectParameter transaccionIdParameter;
    
            if (transaccionId.HasValue)
            {
                transaccionIdParameter = new ObjectParameter("TransaccionId", transaccionId);
            }
            else
            {
                transaccionIdParameter = new ObjectParameter("TransaccionId", typeof(int));
            }
    
            ObjectParameter fechaParameter;
    
            if (fecha.HasValue)
            {
                fechaParameter = new ObjectParameter("Fecha", fecha);
            }
            else
            {
                fechaParameter = new ObjectParameter("Fecha", typeof(System.DateTime));
            }
    
            ObjectParameter nombreUsuarioReferenciaParameter;
    
            if (nombreUsuarioReferencia != null)
            {
                nombreUsuarioReferenciaParameter = new ObjectParameter("NombreUsuarioReferencia", nombreUsuarioReferencia);
            }
            else
            {
                nombreUsuarioReferenciaParameter = new ObjectParameter("NombreUsuarioReferencia", typeof(string));
            }
    
            ObjectParameter cuentaParameter;
    
            if (cuenta != null)
            {
                cuentaParameter = new ObjectParameter("Cuenta", cuenta);
            }
            else
            {
                cuentaParameter = new ObjectParameter("Cuenta", typeof(string));
            }
    
            ObjectParameter detalleParameter;
    
            if (detalle != null)
            {
                detalleParameter = new ObjectParameter("Detalle", detalle);
            }
            else
            {
                detalleParameter = new ObjectParameter("Detalle", typeof(string));
            }
    
            ObjectParameter cantidadParameter;
    
            if (cantidad.HasValue)
            {
                cantidadParameter = new ObjectParameter("Cantidad", cantidad);
            }
            else
            {
                cantidadParameter = new ObjectParameter("Cantidad", typeof(decimal));
            }
    
            ObjectParameter precioUnitarioParameter;
    
            if (precioUnitario.HasValue)
            {
                precioUnitarioParameter = new ObjectParameter("PrecioUnitario", precioUnitario);
            }
            else
            {
                precioUnitarioParameter = new ObjectParameter("PrecioUnitario", typeof(decimal));
            }
    
            ObjectParameter descuentoDetalleParameter;
    
            if (descuentoDetalle.HasValue)
            {
                descuentoDetalleParameter = new ObjectParameter("DescuentoDetalle", descuentoDetalle);
            }
            else
            {
                descuentoDetalleParameter = new ObjectParameter("DescuentoDetalle", typeof(decimal));
            }
    
            ObjectParameter totalDetalleParameter;
    
            if (totalDetalle.HasValue)
            {
                totalDetalleParameter = new ObjectParameter("TotalDetalle", totalDetalle);
            }
            else
            {
                totalDetalleParameter = new ObjectParameter("TotalDetalle", typeof(decimal));
            }
    
            ObjectParameter totalBrutoDetalleParameter;
    
            if (totalBrutoDetalle.HasValue)
            {
                totalBrutoDetalleParameter = new ObjectParameter("TotalBrutoDetalle", totalBrutoDetalle);
            }
            else
            {
                totalBrutoDetalleParameter = new ObjectParameter("TotalBrutoDetalle", typeof(decimal));
            }
    
            ObjectParameter flowIdParameter;
    
            if (flowId.HasValue)
            {
                flowIdParameter = new ObjectParameter("FlowId", flowId);
            }
            else
            {
                flowIdParameter = new ObjectParameter("FlowId", typeof(System.Guid));
            }
            return base.ExecuteFunction<Nullable<int>>("SentInvoiceDetailToAccounting", transaccionIdParameter, fechaParameter, nombreUsuarioReferenciaParameter, cuentaParameter, detalleParameter, cantidadParameter, precioUnitarioParameter, descuentoDetalleParameter, totalDetalleParameter, totalBrutoDetalleParameter, flowIdParameter);
        }
        public ObjectResult<Nullable<int>> SentInvoiceHeaderToAccounting(Nullable<int> transaccionId, Nullable<System.DateTime> fecha, string rNCSolicitante, Nullable<System.Guid> flowId, string cliente, Nullable<System.Guid> rowguid, string nCF, Nullable<int> estatus, string nombreUsuarioReferencia, Nullable<decimal> totalBruto)
        {
    
            ObjectParameter transaccionIdParameter;
    
            if (transaccionId.HasValue)
            {
                transaccionIdParameter = new ObjectParameter("TransaccionId", transaccionId);
            }
            else
            {
                transaccionIdParameter = new ObjectParameter("TransaccionId", typeof(int));
            }
    
            ObjectParameter fechaParameter;
    
            if (fecha.HasValue)
            {
                fechaParameter = new ObjectParameter("Fecha", fecha);
            }
            else
            {
                fechaParameter = new ObjectParameter("Fecha", typeof(System.DateTime));
            }
    
            ObjectParameter rNCSolicitanteParameter;
    
            if (rNCSolicitante != null)
            {
                rNCSolicitanteParameter = new ObjectParameter("RNCSolicitante", rNCSolicitante);
            }
            else
            {
                rNCSolicitanteParameter = new ObjectParameter("RNCSolicitante", typeof(string));
            }
    
            ObjectParameter flowIdParameter;
    
            if (flowId.HasValue)
            {
                flowIdParameter = new ObjectParameter("FlowId", flowId);
            }
            else
            {
                flowIdParameter = new ObjectParameter("FlowId", typeof(System.Guid));
            }
    
            ObjectParameter clienteParameter;
    
            if (cliente != null)
            {
                clienteParameter = new ObjectParameter("Cliente", cliente);
            }
            else
            {
                clienteParameter = new ObjectParameter("Cliente", typeof(string));
            }
    
            ObjectParameter rowguidParameter;
    
            if (rowguid.HasValue)
            {
                rowguidParameter = new ObjectParameter("rowguid", rowguid);
            }
            else
            {
                rowguidParameter = new ObjectParameter("rowguid", typeof(System.Guid));
            }
    
            ObjectParameter nCFParameter;
    
            if (nCF != null)
            {
                nCFParameter = new ObjectParameter("NCF", nCF);
            }
            else
            {
                nCFParameter = new ObjectParameter("NCF", typeof(string));
            }
    
            ObjectParameter estatusParameter;
    
            if (estatus.HasValue)
            {
                estatusParameter = new ObjectParameter("Estatus", estatus);
            }
            else
            {
                estatusParameter = new ObjectParameter("Estatus", typeof(int));
            }
    
            ObjectParameter nombreUsuarioReferenciaParameter;
    
            if (nombreUsuarioReferencia != null)
            {
                nombreUsuarioReferenciaParameter = new ObjectParameter("NombreUsuarioReferencia", nombreUsuarioReferencia);
            }
            else
            {
                nombreUsuarioReferenciaParameter = new ObjectParameter("NombreUsuarioReferencia", typeof(string));
            }
    
            ObjectParameter totalBrutoParameter;
    
            if (totalBruto.HasValue)
            {
                totalBrutoParameter = new ObjectParameter("TotalBruto", totalBruto);
            }
            else
            {
                totalBrutoParameter = new ObjectParameter("TotalBruto", typeof(decimal));
            }
            return base.ExecuteFunction<Nullable<int>>("SentInvoiceHeaderToAccounting", transaccionIdParameter, fechaParameter, rNCSolicitanteParameter, flowIdParameter, clienteParameter, rowguidParameter, nCFParameter, estatusParameter, nombreUsuarioReferenciaParameter, totalBrutoParameter);
        }
        public ObjectResult<Nullable<int>> SentPaymentMethodsToAccounting(Nullable<int> transaccionId, Nullable<System.DateTime> fechaCuadre, string formaPago, Nullable<decimal> valor, Nullable<decimal> tasa, string referencia, string noTarjeta, Nullable<decimal> divisa, Nullable<decimal> valorEntregado, Nullable<decimal> valorDevuelto, string nota, string nombreUsuarioReferencia, Nullable<decimal> totalBruto, Nullable<System.Guid> flowId)
        {
    
            ObjectParameter transaccionIdParameter;
    
            if (transaccionId.HasValue)
            {
                transaccionIdParameter = new ObjectParameter("TransaccionId", transaccionId);
            }
            else
            {
                transaccionIdParameter = new ObjectParameter("TransaccionId", typeof(int));
            }
    
            ObjectParameter fechaCuadreParameter;
    
            if (fechaCuadre.HasValue)
            {
                fechaCuadreParameter = new ObjectParameter("FechaCuadre", fechaCuadre);
            }
            else
            {
                fechaCuadreParameter = new ObjectParameter("FechaCuadre", typeof(System.DateTime));
            }
    
            ObjectParameter formaPagoParameter;
    
            if (formaPago != null)
            {
                formaPagoParameter = new ObjectParameter("FormaPago", formaPago);
            }
            else
            {
                formaPagoParameter = new ObjectParameter("FormaPago", typeof(string));
            }
    
            ObjectParameter valorParameter;
    
            if (valor.HasValue)
            {
                valorParameter = new ObjectParameter("Valor", valor);
            }
            else
            {
                valorParameter = new ObjectParameter("Valor", typeof(decimal));
            }
    
            ObjectParameter tasaParameter;
    
            if (tasa.HasValue)
            {
                tasaParameter = new ObjectParameter("Tasa", tasa);
            }
            else
            {
                tasaParameter = new ObjectParameter("Tasa", typeof(decimal));
            }
    
            ObjectParameter referenciaParameter;
    
            if (referencia != null)
            {
                referenciaParameter = new ObjectParameter("Referencia", referencia);
            }
            else
            {
                referenciaParameter = new ObjectParameter("Referencia", typeof(string));
            }
    
            ObjectParameter noTarjetaParameter;
    
            if (noTarjeta != null)
            {
                noTarjetaParameter = new ObjectParameter("NoTarjeta", noTarjeta);
            }
            else
            {
                noTarjetaParameter = new ObjectParameter("NoTarjeta", typeof(string));
            }
    
            ObjectParameter divisaParameter;
    
            if (divisa.HasValue)
            {
                divisaParameter = new ObjectParameter("Divisa", divisa);
            }
            else
            {
                divisaParameter = new ObjectParameter("Divisa", typeof(decimal));
            }
    
            ObjectParameter valorEntregadoParameter;
    
            if (valorEntregado.HasValue)
            {
                valorEntregadoParameter = new ObjectParameter("ValorEntregado", valorEntregado);
            }
            else
            {
                valorEntregadoParameter = new ObjectParameter("ValorEntregado", typeof(decimal));
            }
    
            ObjectParameter valorDevueltoParameter;
    
            if (valorDevuelto.HasValue)
            {
                valorDevueltoParameter = new ObjectParameter("ValorDevuelto", valorDevuelto);
            }
            else
            {
                valorDevueltoParameter = new ObjectParameter("ValorDevuelto", typeof(decimal));
            }
    
            ObjectParameter notaParameter;
    
            if (nota != null)
            {
                notaParameter = new ObjectParameter("Nota", nota);
            }
            else
            {
                notaParameter = new ObjectParameter("Nota", typeof(string));
            }
    
            ObjectParameter nombreUsuarioReferenciaParameter;
    
            if (nombreUsuarioReferencia != null)
            {
                nombreUsuarioReferenciaParameter = new ObjectParameter("NombreUsuarioReferencia", nombreUsuarioReferencia);
            }
            else
            {
                nombreUsuarioReferenciaParameter = new ObjectParameter("NombreUsuarioReferencia", typeof(string));
            }
    
            ObjectParameter totalBrutoParameter;
    
            if (totalBruto.HasValue)
            {
                totalBrutoParameter = new ObjectParameter("TotalBruto", totalBruto);
            }
            else
            {
                totalBrutoParameter = new ObjectParameter("TotalBruto", typeof(decimal));
            }
    
            ObjectParameter flowIdParameter;
    
            if (flowId.HasValue)
            {
                flowIdParameter = new ObjectParameter("FlowId", flowId);
            }
            else
            {
                flowIdParameter = new ObjectParameter("FlowId", typeof(System.Guid));
            }
            return base.ExecuteFunction<Nullable<int>>("SentPaymentMethodsToAccounting", transaccionIdParameter, fechaCuadreParameter, formaPagoParameter, valorParameter, tasaParameter, referenciaParameter, noTarjetaParameter, divisaParameter, valorEntregadoParameter, valorDevueltoParameter, notaParameter, nombreUsuarioReferenciaParameter, totalBrutoParameter, flowIdParameter);
        }
        public ObjectResult<Nullable<decimal>> csp_GetCostoBaseReduccionCapital(Nullable<decimal> capitalAutorizado, Nullable<decimal> capitalModificado)
        {
    
            ObjectParameter capitalAutorizadoParameter;
    
            if (capitalAutorizado.HasValue)
            {
                capitalAutorizadoParameter = new ObjectParameter("CapitalAutorizado", capitalAutorizado);
            }
            else
            {
                capitalAutorizadoParameter = new ObjectParameter("CapitalAutorizado", typeof(decimal));
            }
    
            ObjectParameter capitalModificadoParameter;
    
            if (capitalModificado.HasValue)
            {
                capitalModificadoParameter = new ObjectParameter("CapitalModificado", capitalModificado);
            }
            else
            {
                capitalModificadoParameter = new ObjectParameter("CapitalModificado", typeof(decimal));
            }
            return base.ExecuteFunction<Nullable<decimal>>("csp_GetCostoBaseReduccionCapital", capitalAutorizadoParameter, capitalModificadoParameter);
        }
        public ObjectResult<Nullable<decimal>> csp_GetCostoBaseModificacionCapital(Nullable<decimal> capitalAutorizado, Nullable<decimal> capitalModificado)
        {
    
            ObjectParameter capitalAutorizadoParameter;
    
            if (capitalAutorizado.HasValue)
            {
                capitalAutorizadoParameter = new ObjectParameter("CapitalAutorizado", capitalAutorizado);
            }
            else
            {
                capitalAutorizadoParameter = new ObjectParameter("CapitalAutorizado", typeof(decimal));
            }
    
            ObjectParameter capitalModificadoParameter;
    
            if (capitalModificado.HasValue)
            {
                capitalModificadoParameter = new ObjectParameter("CapitalModificado", capitalModificado);
            }
            else
            {
                capitalModificadoParameter = new ObjectParameter("CapitalModificado", typeof(decimal));
            }
            return base.ExecuteFunction<Nullable<decimal>>("csp_GetCostoBaseModificacionCapital", capitalAutorizadoParameter, capitalModificadoParameter);
        }
        public ObjectResult<Nullable<decimal>> csp_GetCostoBaseCapital(Nullable<int> tipoCosto, Nullable<decimal> capitalAutorizado)
        {
    
            ObjectParameter tipoCostoParameter;
    
            if (tipoCosto.HasValue)
            {
                tipoCostoParameter = new ObjectParameter("TipoCosto", tipoCosto);
            }
            else
            {
                tipoCostoParameter = new ObjectParameter("TipoCosto", typeof(int));
            }
    
            ObjectParameter capitalAutorizadoParameter;
    
            if (capitalAutorizado.HasValue)
            {
                capitalAutorizadoParameter = new ObjectParameter("CapitalAutorizado", capitalAutorizado);
            }
            else
            {
                capitalAutorizadoParameter = new ObjectParameter("CapitalAutorizado", typeof(decimal));
            }
            return base.ExecuteFunction<Nullable<decimal>>("csp_GetCostoBaseCapital", tipoCostoParameter, capitalAutorizadoParameter);
        }
        public ObjectResult<Nullable<decimal>> csp_GetCostoServicio(Nullable<int> servicioId, Nullable<decimal> capitalAutorizado, Nullable<decimal> capitalModificado)
        {
    
            ObjectParameter servicioIdParameter;
    
            if (servicioId.HasValue)
            {
                servicioIdParameter = new ObjectParameter("ServicioId", servicioId);
            }
            else
            {
                servicioIdParameter = new ObjectParameter("ServicioId", typeof(int));
            }
    
            ObjectParameter capitalAutorizadoParameter;
    
            if (capitalAutorizado.HasValue)
            {
                capitalAutorizadoParameter = new ObjectParameter("CapitalAutorizado", capitalAutorizado);
            }
            else
            {
                capitalAutorizadoParameter = new ObjectParameter("CapitalAutorizado", typeof(decimal));
            }
    
            ObjectParameter capitalModificadoParameter;
    
            if (capitalModificado.HasValue)
            {
                capitalModificadoParameter = new ObjectParameter("CapitalModificado", capitalModificado);
            }
            else
            {
                capitalModificadoParameter = new ObjectParameter("CapitalModificado", typeof(decimal));
            }
            return base.ExecuteFunction<Nullable<decimal>>("csp_GetCostoServicio", servicioIdParameter, capitalAutorizadoParameter, capitalModificadoParameter);
        }
        public ObjectResult<pGetTransaccionesHistorico_Result> pGetTransaccionesHistorico(Nullable<int> transaccionId)
        {
    
            ObjectParameter transaccionIdParameter;
    
            if (transaccionId.HasValue)
            {
                transaccionIdParameter = new ObjectParameter("TransaccionId", transaccionId);
            }
            else
            {
                transaccionIdParameter = new ObjectParameter("TransaccionId", typeof(int));
            }
            return base.ExecuteFunction<pGetTransaccionesHistorico_Result>("pGetTransaccionesHistorico", transaccionIdParameter);
        }
        public ObjectResult<Nullable<bool>> ValidaRegistroVencido(Nullable<int> numeroRegistro, Nullable<bool> isSociedad)
        {
    
            ObjectParameter numeroRegistroParameter;
    
            if (numeroRegistro.HasValue)
            {
                numeroRegistroParameter = new ObjectParameter("NumeroRegistro", numeroRegistro);
            }
            else
            {
                numeroRegistroParameter = new ObjectParameter("NumeroRegistro", typeof(int));
            }
    
            ObjectParameter isSociedadParameter;
    
            if (isSociedad.HasValue)
            {
                isSociedadParameter = new ObjectParameter("IsSociedad", isSociedad);
            }
            else
            {
                isSociedadParameter = new ObjectParameter("IsSociedad", typeof(bool));
            }
            return base.ExecuteFunction<Nullable<bool>>("ValidaRegistroVencido", numeroRegistroParameter, isSociedadParameter);
        }
        public ObjectResult<SetAsignaciones_Result> SetAsignaciones(Nullable<int> transaccionId, Nullable<int> rolId, string comentario, Nullable<int> lastUserId)
        {
    
            ObjectParameter transaccionIdParameter;
    
            if (transaccionId.HasValue)
            {
                transaccionIdParameter = new ObjectParameter("TransaccionId", transaccionId);
            }
            else
            {
                transaccionIdParameter = new ObjectParameter("TransaccionId", typeof(int));
            }
    
            ObjectParameter rolIdParameter;
    
            if (rolId.HasValue)
            {
                rolIdParameter = new ObjectParameter("RolId", rolId);
            }
            else
            {
                rolIdParameter = new ObjectParameter("RolId", typeof(int));
            }
    
            ObjectParameter comentarioParameter;
    
            if (comentario != null)
            {
                comentarioParameter = new ObjectParameter("Comentario", comentario);
            }
            else
            {
                comentarioParameter = new ObjectParameter("Comentario", typeof(string));
            }
    
            ObjectParameter lastUserIdParameter;
    
            if (lastUserId.HasValue)
            {
                lastUserIdParameter = new ObjectParameter("LastUserId", lastUserId);
            }
            else
            {
                lastUserIdParameter = new ObjectParameter("LastUserId", typeof(int));
            }
            return base.ExecuteFunction<SetAsignaciones_Result>("SetAsignaciones", transaccionIdParameter, rolIdParameter, comentarioParameter, lastUserIdParameter);
        }
        public ObjectResult<Nullable<int>> csp_AsignacionTransaccionVU(Nullable<int> transaccionId, string comentario, Nullable<int> lastUserId)
        {
    
            ObjectParameter transaccionIdParameter;
    
            if (transaccionId.HasValue)
            {
                transaccionIdParameter = new ObjectParameter("TransaccionId", transaccionId);
            }
            else
            {
                transaccionIdParameter = new ObjectParameter("TransaccionId", typeof(int));
            }
    
            ObjectParameter comentarioParameter;
    
            if (comentario != null)
            {
                comentarioParameter = new ObjectParameter("Comentario", comentario);
            }
            else
            {
                comentarioParameter = new ObjectParameter("Comentario", typeof(string));
            }
    
            ObjectParameter lastUserIdParameter;
    
            if (lastUserId.HasValue)
            {
                lastUserIdParameter = new ObjectParameter("LastUserId", lastUserId);
            }
            else
            {
                lastUserIdParameter = new ObjectParameter("LastUserId", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("csp_AsignacionTransaccionVU", transaccionIdParameter, comentarioParameter, lastUserIdParameter);
        }

        #endregion

    }
}
