//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Linq;
using System.Text;

namespace CamaraComercio.DataAccess.EF.SRM
{
    [DataObject]
    public class Transacciones
    {
        #region Property Metadata
    	
    	public struct PropColumns
    	{
    		public static string TransaccionId = @"TransaccionId";
    public static string Fecha = @"Fecha";
    public static string TipoTransaccionId = @"TipoTransaccionId";
    public static string TipoServicioId = @"TipoServicioId";
    public static string Salicitante = @"Salicitante";
    public static string RNCSolicitante = @"RNCSolicitante";
    public static string NombreContacto = @"NombreContacto";
    public static string TelefonoContacto = @"TelefonoContacto";
    public static string FaxContacto = @"FaxContacto";
    public static string NoReciboDGII = @"NoReciboDGII";
    public static string FechaReciboDGII = @"FechaReciboDGII";
    public static string MontoDGII = @"MontoDGII";
    public static string DestinoTraslado = @"DestinoTraslado";
    public static string Comentario = @"Comentario";
    public static string ComentarioHtml = @"ComentarioHtml";
    public static string FlowId = @"FlowId";
    public static string Estatus = @"Estatus";
    public static string Estatus2 = @"Estatus2";
    public static string Prioridad = @"Prioridad";
    public static string CustomString1 = @"CustomString1";
    public static string CustomString2 = @"CustomString2";
    public static string CustomString3 = @"CustomString3";
    public static string CustomInt1 = @"CustomInt1";
    public static string CustomInt2 = @"CustomInt2";
    public static string CustomInt3 = @"CustomInt3";
    public static string CustomDateTime1 = @"CustomDateTime1";
    public static string CustomDateTime2 = @"CustomDateTime2";
    public static string CustomDecimal1 = @"CustomDecimal1";
    public static string CustomDecimal2 = @"CustomDecimal2";
    public static string FechaModificacion = @"FechaModificacion";
    public static string Tipo = @"Tipo";
    public static string NCF = @"NCF";
    public static string UsuarioId = @"UsuarioId";
    public static string HoraInicio = @"HoraInicio";
    public static string HoraFinal = @"HoraFinal";
    public static string Receptor = @"Receptor";
    public static string TipoNcf = @"TipoNcf";
    public static string UbicacionExpedienteId = @"UbicacionExpedienteId";
    public static string UbicacionExterna = @"UbicacionExterna";
    public static string TipoServicio = @"TipoServicio";
    public static string Servicio = @"Servicio";
    public static string TipoServicioSufijo = @"TipoServicioSufijo";
    public static string TransaccionIdAnterior = @"TransaccionIdAnterior";
    public static string DesdeOfv = @"DesdeOfv";
    public static string VieneProblemas = @"VieneProblemas";
    public static string EsDigital = @"EsDigital";
    public static string TipoDocumento = @"TipoDocumento";
    public static string CorreoContacto = @"CorreoContacto";
    public static string NumeroReciboOnapi = @"NumeroReciboOnapi";
    public static string MontoReciboOnapi = @"MontoReciboOnapi";
    public static string FecharReciboOnapi = @"FecharReciboOnapi";
    public static string ServicioVentanillaUnica = @"ServicioVentanillaUnica";
    public static string bEnviadoDGII = @"bEnviadoDGII";
    public static string bConfirmacionDGII = @"bConfirmacionDGII";
    public static string numeroSolicitudDGII = @"numeroSolicitudDGII";
    public static string OrigenTransaccion = @"OrigenTransaccion";
    public static string SolicitanteWeb = @"SolicitanteWeb";
    public static string RNCSolicitanteWeb = @"RNCSolicitanteWeb";
            public static string ImprimirCopias = @"ImprimirCopias";
			  public static string CorreoEmpresa = @"CorreoEmpresa";
     
    	}
        #endregion

        #region Primitive Properties
    
        public virtual int TransaccionId
        {
            get;
            set;
        }
    
        public virtual System.DateTime Fecha
        {
            get;
            set;
        }
    
        public virtual int TipoTransaccionId
        {
            get;
            set;
        }
    
        public virtual int TipoServicioId
        {
            get;
            set;
        }
    
        public virtual string Salicitante
        {
            get;
            set;
        }
    
        public virtual string RNCSolicitante
        {
            get;
            set;
        }
    
        public virtual string NombreContacto
        {
            get;
            set;
        }
    
        public virtual string TelefonoContacto
        {
            get;
            set;
        }
    
        public virtual string FaxContacto
        {
            get;
            set;
        }
    
        public virtual string NoReciboDGII
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> FechaReciboDGII
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> MontoDGII
        {
            get;
            set;
        }
    
        public virtual string DestinoTraslado
        {
            get;
            set;
        }
    
        public virtual string Comentario
        {
            get;
            set;
        }
    
        public virtual string ComentarioHtml
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> FlowId
        {
            get;
            set;
        }
    
        public virtual int Estatus
        {
            get;
            set;
        }
    
        public virtual Nullable<int> Estatus2
        {
            get;
            set;
        }
    
        public virtual string Prioridad
        {
            get;
            set;
        }
    
        public virtual string CustomString1
        {
            get;
            set;
        }
    
        public virtual string CustomString2
        {
            get;
            set;
        }
    
        public virtual string CustomString3
        {
            get;
            set;
        }
    
        public virtual Nullable<int> CustomInt1
        {
            get;
            set;
        }
    
        public virtual Nullable<int> CustomInt2
        {
            get;
            set;
        }
    
        public virtual Nullable<int> CustomInt3
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> CustomDateTime1
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> CustomDateTime2
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> CustomDecimal1
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> CustomDecimal2
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> FechaModificacion
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> rowguid
        {
            get;
            set;
        }
    
        public virtual Nullable<int> Tipo
        {
            get;
            set;
        }
    
        public virtual string NCF
        {
            get;
            set;
        }
    
        public virtual Nullable<int> UsuarioId
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> HoraInicio
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> HoraFinal
        {
            get;
            set;
        }
    
        public virtual string Receptor
        {
            get;
            set;
        }
    
        public virtual string TipoNcf
        {
            get;
            set;
        }
        public virtual string SolicitanteWeb
        {
            get;
            set;
        }
        public virtual string RNCSolicitanteWeb
        {
            get;
            set;
        }
		
		   public virtual string CorreoEmpresa
        {
            get;
            set;
        }
    
        public virtual Nullable<int> UbicacionExpedienteId
        {
            get { return _ubicacionExpedienteId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_ubicacionExpedienteId != value)
                    {
                        if (UbicacionesExpedientes != null && UbicacionesExpedientes.Id != value)
                        {
                            UbicacionesExpedientes = null;
                        }
                        _ubicacionExpedienteId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _ubicacionExpedienteId;
    
        public virtual string UbicacionExterna
        {
            get;
            set;
        }
    
        public virtual string TipoServicio
        {
            get;
            set;
        }
    
        public virtual string Servicio
        {
            get;
            set;
        }
    
        public virtual string TipoServicioSufijo
        {
            get;
            set;
        }
    
        public virtual Nullable<int> TransaccionIdAnterior
        {
            get;
            set;
        }
    
        public virtual bool DesdeOfv
        {
            get;
            set;
        }
    
        public virtual bool VieneProblemas
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> EsDigital
        {
            get;
            set;
        }
    
        public virtual string TipoDocumento
        {
            get;
            set;
        }
    
        public virtual string CorreoContacto
        {
            get;
            set;
        }
    
        public virtual string NumeroReciboOnapi
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> MontoReciboOnapi
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> FecharReciboOnapi
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> ServicioVentanillaUnica
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> bEnviadoDGII
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> bConfirmacionDGII
        {
            get;
            set;
        }
    
        public virtual Nullable<int> numeroSolicitudDGII
        {
            get;
            set;
        }
    
        public virtual string OrigenTransaccion
        {
            get;
            set;
        }

        public virtual Nullable<bool> ImprimirCopias
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties

        public virtual ICollection<AngendaTransacciones> AngendaTransacciones
        {
            get
            {
                if (_angendaTransacciones == null)
                {
                    var newCollection = new FixupCollection<AngendaTransacciones>();
                    newCollection.CollectionChanged += FixupAngendaTransacciones;
                    _angendaTransacciones = newCollection;
                }
                return _angendaTransacciones;
            }
            set
            {
                if (!ReferenceEquals(_angendaTransacciones, value))
                {
                    var previousValue = _angendaTransacciones as FixupCollection<AngendaTransacciones>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAngendaTransacciones;
                    }
                    _angendaTransacciones = value;
                    var newValue = value as FixupCollection<AngendaTransacciones>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAngendaTransacciones;
                    }
                }
            }
        }
        private ICollection<AngendaTransacciones> _angendaTransacciones;
    
        public virtual ICollection<Asignaciones> Asignaciones
        {
            get
            {
                if (_asignaciones == null)
                {
                    var newCollection = new FixupCollection<Asignaciones>();
                    newCollection.CollectionChanged += FixupAsignaciones;
                    _asignaciones = newCollection;
                }
                return _asignaciones;
            }
            set
            {
                if (!ReferenceEquals(_asignaciones, value))
                {
                    var previousValue = _asignaciones as FixupCollection<Asignaciones>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAsignaciones;
                    }
                    _asignaciones = value;
                    var newValue = value as FixupCollection<Asignaciones>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAsignaciones;
                    }
                }
            }
        }
        private ICollection<Asignaciones> _asignaciones;
    
        public virtual ICollection<DocumentosTransacciones> DocumentosTransacciones
        {
            get
            {
                if (_documentosTransacciones == null)
                {
                    var newCollection = new FixupCollection<DocumentosTransacciones>();
                    newCollection.CollectionChanged += FixupDocumentosTransacciones;
                    _documentosTransacciones = newCollection;
                }
                return _documentosTransacciones;
            }
            set
            {
                if (!ReferenceEquals(_documentosTransacciones, value))
                {
                    var previousValue = _documentosTransacciones as FixupCollection<DocumentosTransacciones>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDocumentosTransacciones;
                    }
                    _documentosTransacciones = value;
                    var newValue = value as FixupCollection<DocumentosTransacciones>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDocumentosTransacciones;
                    }
                }
            }
        }
        private ICollection<DocumentosTransacciones> _documentosTransacciones;
    
        public virtual ICollection<NotificacionesTransacciones> NotificacionesTransacciones
        {
            get
            {
                if (_notificacionesTransacciones == null)
                {
                    var newCollection = new FixupCollection<NotificacionesTransacciones>();
                    newCollection.CollectionChanged += FixupNotificacionesTransacciones;
                    _notificacionesTransacciones = newCollection;
                }
                return _notificacionesTransacciones;
            }
            set
            {
                if (!ReferenceEquals(_notificacionesTransacciones, value))
                {
                    var previousValue = _notificacionesTransacciones as FixupCollection<NotificacionesTransacciones>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupNotificacionesTransacciones;
                    }
                    _notificacionesTransacciones = value;
                    var newValue = value as FixupCollection<NotificacionesTransacciones>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupNotificacionesTransacciones;
                    }
                }
            }
        }
        private ICollection<NotificacionesTransacciones> _notificacionesTransacciones;
    
        public virtual ICollection<SeguimientoTransacciones> SeguimientoTransacciones
        {
            get
            {
                if (_seguimientoTransacciones == null)
                {
                    var newCollection = new FixupCollection<SeguimientoTransacciones>();
                    newCollection.CollectionChanged += FixupSeguimientoTransacciones;
                    _seguimientoTransacciones = newCollection;
                }
                return _seguimientoTransacciones;
            }
            set
            {
                if (!ReferenceEquals(_seguimientoTransacciones, value))
                {
                    var previousValue = _seguimientoTransacciones as FixupCollection<SeguimientoTransacciones>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSeguimientoTransacciones;
                    }
                    _seguimientoTransacciones = value;
                    var newValue = value as FixupCollection<SeguimientoTransacciones>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSeguimientoTransacciones;
                    }
                }
            }
        }
        private ICollection<SeguimientoTransacciones> _seguimientoTransacciones;
    
        public virtual UbicacionesExpedientes UbicacionesExpedientes
        {
            get { return _ubicacionesExpedientes; }
            set
            {
                if (!ReferenceEquals(_ubicacionesExpedientes, value))
                {
                    var previousValue = _ubicacionesExpedientes;
                    _ubicacionesExpedientes = value;
                    FixupUbicacionesExpedientes(previousValue);
                }
            }
        }
        private UbicacionesExpedientes _ubicacionesExpedientes;
    
        public virtual TransaccionesPersonas TransaccionesPersonas
        {
            get { return _transaccionesPersonas; }
            set
            {
                if (!ReferenceEquals(_transaccionesPersonas, value))
                {
                    var previousValue = _transaccionesPersonas;
                    _transaccionesPersonas = value;
                    FixupTransaccionesPersonas(previousValue);
                }
            }
        }
        private TransaccionesPersonas _transaccionesPersonas;
    
        public virtual TransaccionesSociedades TransaccionesSociedades
        {
            get { return _transaccionesSociedades; }
            set
            {
                if (!ReferenceEquals(_transaccionesSociedades, value))
                {
                    var previousValue = _transaccionesSociedades;
                    _transaccionesSociedades = value;
                    FixupTransaccionesSociedades(previousValue);
                }
            }
        }
        private TransaccionesSociedades _transaccionesSociedades;
    
        public virtual ICollection<Facturas> Facturas
        {
            get
            {
                if (_facturas == null)
                {
                    var newCollection = new FixupCollection<Facturas>();
                    newCollection.CollectionChanged += FixupFacturas;
                    _facturas = newCollection;
                }
                return _facturas;
            }
            set
            {
                if (!ReferenceEquals(_facturas, value))
                {
                    var previousValue = _facturas as FixupCollection<Facturas>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupFacturas;
                    }
                    _facturas = value;
                    var newValue = value as FixupCollection<Facturas>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupFacturas;
                    }
                }
            }
        }
        private ICollection<Facturas> _facturas;
    
        public virtual ICollection<SubTransacciones> SubTransacciones
        {
            get
            {
                if (_subTransacciones == null)
                {
                    var newCollection = new FixupCollection<SubTransacciones>();
                    newCollection.CollectionChanged += FixupSubTransacciones;
                    _subTransacciones = newCollection;
                }
                return _subTransacciones;
            }
            set
            {
                if (!ReferenceEquals(_subTransacciones, value))
                {
                    var previousValue = _subTransacciones as FixupCollection<SubTransacciones>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSubTransacciones;
                    }
                    _subTransacciones = value;
                    var newValue = value as FixupCollection<SubTransacciones>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSubTransacciones;
                    }
                }
            }
        }
        private ICollection<SubTransacciones> _subTransacciones;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupUbicacionesExpedientes(UbicacionesExpedientes previousValue)
        {
            if (previousValue != null && previousValue.Transacciones.Contains(this))
            {
                previousValue.Transacciones.Remove(this);
            }
    
            if (UbicacionesExpedientes != null)
            {
                if (!UbicacionesExpedientes.Transacciones.Contains(this))
                {
                    UbicacionesExpedientes.Transacciones.Add(this);
                }
                if (UbicacionExpedienteId != UbicacionesExpedientes.Id)
                {
                    UbicacionExpedienteId = UbicacionesExpedientes.Id;
                }
            }
            else if (!_settingFK)
            {
                UbicacionExpedienteId = null;
            }
        }
    
        private void FixupTransaccionesPersonas(TransaccionesPersonas previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.Transacciones, this))
            {
                previousValue.Transacciones = null;
            }
    
            if (TransaccionesPersonas != null)
            {
                TransaccionesPersonas.Transacciones = this;
            }
        }
    
        private void FixupTransaccionesSociedades(TransaccionesSociedades previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.Transacciones, this))
            {
                previousValue.Transacciones = null;
            }
    
            if (TransaccionesSociedades != null)
            {
                TransaccionesSociedades.Transacciones = this;
            }
        }
    
        private void FixupAngendaTransacciones(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AngendaTransacciones item in e.NewItems)
                {
                    item.Transacciones = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AngendaTransacciones item in e.OldItems)
                {
                    if (ReferenceEquals(item.Transacciones, this))
                    {
                        item.Transacciones = null;
                    }
                }
            }
        }
    
        private void FixupAsignaciones(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Asignaciones item in e.NewItems)
                {
                    item.Transacciones = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Asignaciones item in e.OldItems)
                {
                    if (ReferenceEquals(item.Transacciones, this))
                    {
                        item.Transacciones = null;
                    }
                }
            }
        }
    
        private void FixupDocumentosTransacciones(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (DocumentosTransacciones item in e.NewItems)
                {
                    item.Transacciones = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DocumentosTransacciones item in e.OldItems)
                {
                    if (ReferenceEquals(item.Transacciones, this))
                    {
                        item.Transacciones = null;
                    }
                }
            }
        }
    
        private void FixupNotificacionesTransacciones(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (NotificacionesTransacciones item in e.NewItems)
                {
                    item.Transacciones = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (NotificacionesTransacciones item in e.OldItems)
                {
                    if (ReferenceEquals(item.Transacciones, this))
                    {
                        item.Transacciones = null;
                    }
                }
            }
        }
    
        private void FixupSeguimientoTransacciones(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SeguimientoTransacciones item in e.NewItems)
                {
                    item.Transacciones = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SeguimientoTransacciones item in e.OldItems)
                {
                    if (ReferenceEquals(item.Transacciones, this))
                    {
                        item.Transacciones = null;
                    }
                }
            }
        }
    
        private void FixupFacturas(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Facturas item in e.NewItems)
                {
                    item.Transacciones = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Facturas item in e.OldItems)
                {
                    if (ReferenceEquals(item.Transacciones, this))
                    {
                        item.Transacciones = null;
                    }
                }
            }
        }
    
        private void FixupSubTransacciones(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SubTransacciones item in e.NewItems)
                {
                    item.Transacciones = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SubTransacciones item in e.OldItems)
                {
                    if (ReferenceEquals(item.Transacciones, this))
                    {
                        item.Transacciones = null;
                    }
                }
            }
        }

        #endregion

        #region method

        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public InformacionCertificacion CheckCertificacionEsValida(string camaraId, int numeroCertificacion, Guid numeroValidacion)
        {
            var db = CamaraSRMEntitiesFactory.CreateSrmEntitiesContext(camaraId);
            var exiteGuid = db.Transacciones.Where(s => s.rowguid == numeroValidacion && s.TransaccionId == numeroCertificacion).FirstOrDefault();
            if (exiteGuid != null)
            {
                var registro = db.SeguimientoTransacciones.Where(s => s.TransaccionId == numeroCertificacion && s.Estado == 7).OrderByDescending(s => s.SeguimientoId).FirstOrDefault();
                if (registro != null)
                {

                    return new InformacionCertificacion()
                    {
                        RazonSocial = exiteGuid.CustomString1,
                        FechaEmision = registro.FechaModificacion,
                        FechaVencimiento = registro.FechaModificacion.AddDays(30),
                        UltimoRegistro = (DateTime.Now < registro.FechaModificacion.AddDays(30))
                    };
                }
            }

            //Si no se encontraron registros con la informacion pasada al método se retorna nulo
            return null;
        }

        public class InformacionCertificacion
        {
            public string RazonSocial { get; set; }
            public DateTime? FechaEmision { get; set; }
            public DateTime? FechaVencimiento { get; set; }
            public bool UltimoRegistro { get; set; }

        }

        #endregion method


    }
}
