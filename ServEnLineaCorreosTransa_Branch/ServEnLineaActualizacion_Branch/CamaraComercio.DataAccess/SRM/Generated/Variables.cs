using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace CamaraComercio.DataAccess.SRM
{
	/// <summary>
	/// Strongly-typed collection for the Variables class.
	/// </summary>
    [Serializable]
	public partial class VariablesCollection : ActiveList<Variables, VariablesCollection>
	{	   
		public VariablesCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>VariablesCollection</returns>
		public VariablesCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Variables o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Variables table.
	/// </summary>
	[Serializable]
	public partial class Variables : ActiveRecord<Variables>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public Variables()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public Variables(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public Variables(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public Variables(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Variables", TableType.Table, DataService.GetInstance("SrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"Sistema";
				//columns
				
				TableSchema.TableColumn colvarVariableId = new TableSchema.TableColumn(schema);
				colvarVariableId.ColumnName = "VariableId";
				colvarVariableId.DataType = DbType.AnsiString;
				colvarVariableId.MaxLength = 150;
				colvarVariableId.AutoIncrement = false;
				colvarVariableId.IsNullable = false;
				colvarVariableId.IsPrimaryKey = true;
				colvarVariableId.IsForeignKey = false;
				colvarVariableId.IsReadOnly = false;
				colvarVariableId.DefaultSetting = @"";
				colvarVariableId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVariableId);
				
				TableSchema.TableColumn colvarDescripcion = new TableSchema.TableColumn(schema);
				colvarDescripcion.ColumnName = "Descripcion";
				colvarDescripcion.DataType = DbType.String;
				colvarDescripcion.MaxLength = -1;
				colvarDescripcion.AutoIncrement = false;
				colvarDescripcion.IsNullable = false;
				colvarDescripcion.IsPrimaryKey = false;
				colvarDescripcion.IsForeignKey = false;
				colvarDescripcion.IsReadOnly = false;
				colvarDescripcion.DefaultSetting = @"";
				colvarDescripcion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescripcion);
				
				TableSchema.TableColumn colvarTablaVariable = new TableSchema.TableColumn(schema);
				colvarTablaVariable.ColumnName = "TablaVariable";
				colvarTablaVariable.DataType = DbType.String;
				colvarTablaVariable.MaxLength = -1;
				colvarTablaVariable.AutoIncrement = false;
				colvarTablaVariable.IsNullable = false;
				colvarTablaVariable.IsPrimaryKey = false;
				colvarTablaVariable.IsForeignKey = false;
				colvarTablaVariable.IsReadOnly = false;
				colvarTablaVariable.DefaultSetting = @"";
				colvarTablaVariable.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTablaVariable);
				
				TableSchema.TableColumn colvarCampoVariable = new TableSchema.TableColumn(schema);
				colvarCampoVariable.ColumnName = "CampoVariable";
				colvarCampoVariable.DataType = DbType.String;
				colvarCampoVariable.MaxLength = -1;
				colvarCampoVariable.AutoIncrement = false;
				colvarCampoVariable.IsNullable = false;
				colvarCampoVariable.IsPrimaryKey = false;
				colvarCampoVariable.IsForeignKey = false;
				colvarCampoVariable.IsReadOnly = false;
				colvarCampoVariable.DefaultSetting = @"";
				colvarCampoVariable.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCampoVariable);
				
				TableSchema.TableColumn colvarValorPredeterminado = new TableSchema.TableColumn(schema);
				colvarValorPredeterminado.ColumnName = "ValorPredeterminado";
				colvarValorPredeterminado.DataType = DbType.String;
				colvarValorPredeterminado.MaxLength = 150;
				colvarValorPredeterminado.AutoIncrement = false;
				colvarValorPredeterminado.IsNullable = true;
				colvarValorPredeterminado.IsPrimaryKey = false;
				colvarValorPredeterminado.IsForeignKey = false;
				colvarValorPredeterminado.IsReadOnly = false;
				colvarValorPredeterminado.DefaultSetting = @"";
				colvarValorPredeterminado.ForeignKeyTableName = "";
				schema.Columns.Add(colvarValorPredeterminado);
				
				TableSchema.TableColumn colvarTipoFormato = new TableSchema.TableColumn(schema);
				colvarTipoFormato.ColumnName = "TipoFormato";
				colvarTipoFormato.DataType = DbType.Int32;
				colvarTipoFormato.MaxLength = 0;
				colvarTipoFormato.AutoIncrement = false;
				colvarTipoFormato.IsNullable = false;
				colvarTipoFormato.IsPrimaryKey = false;
				colvarTipoFormato.IsForeignKey = false;
				colvarTipoFormato.IsReadOnly = false;
				colvarTipoFormato.DefaultSetting = @"";
				colvarTipoFormato.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTipoFormato);
				
				TableSchema.TableColumn colvarFormato = new TableSchema.TableColumn(schema);
				colvarFormato.ColumnName = "Formato";
				colvarFormato.DataType = DbType.AnsiString;
				colvarFormato.MaxLength = 50;
				colvarFormato.AutoIncrement = false;
				colvarFormato.IsNullable = true;
				colvarFormato.IsPrimaryKey = false;
				colvarFormato.IsForeignKey = false;
				colvarFormato.IsReadOnly = false;
				colvarFormato.DefaultSetting = @"";
				colvarFormato.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFormato);
				
				TableSchema.TableColumn colvarTipoDespliegue = new TableSchema.TableColumn(schema);
				colvarTipoDespliegue.ColumnName = "TipoDespliegue";
				colvarTipoDespliegue.DataType = DbType.Int32;
				colvarTipoDespliegue.MaxLength = 0;
				colvarTipoDespliegue.AutoIncrement = false;
				colvarTipoDespliegue.IsNullable = false;
				colvarTipoDespliegue.IsPrimaryKey = false;
				colvarTipoDespliegue.IsForeignKey = false;
				colvarTipoDespliegue.IsReadOnly = false;
				
						colvarTipoDespliegue.DefaultSetting = @"((0))";
				colvarTipoDespliegue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTipoDespliegue);
				
				TableSchema.TableColumn colvarFiltro = new TableSchema.TableColumn(schema);
				colvarFiltro.ColumnName = "Filtro";
				colvarFiltro.DataType = DbType.String;
				colvarFiltro.MaxLength = -1;
				colvarFiltro.AutoIncrement = false;
				colvarFiltro.IsNullable = true;
				colvarFiltro.IsPrimaryKey = false;
				colvarFiltro.IsForeignKey = false;
				colvarFiltro.IsReadOnly = false;
				colvarFiltro.DefaultSetting = @"";
				colvarFiltro.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFiltro);
				
				TableSchema.TableColumn colvarCaseFormat = new TableSchema.TableColumn(schema);
				colvarCaseFormat.ColumnName = "CaseFormat";
				colvarCaseFormat.DataType = DbType.Int32;
				colvarCaseFormat.MaxLength = 0;
				colvarCaseFormat.AutoIncrement = false;
				colvarCaseFormat.IsNullable = false;
				colvarCaseFormat.IsPrimaryKey = false;
				colvarCaseFormat.IsForeignKey = false;
				colvarCaseFormat.IsReadOnly = false;
				
						colvarCaseFormat.DefaultSetting = @"((0))";
				colvarCaseFormat.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCaseFormat);
				
				TableSchema.TableColumn colvarTipoVariable = new TableSchema.TableColumn(schema);
				colvarTipoVariable.ColumnName = "TipoVariable";
				colvarTipoVariable.DataType = DbType.Int32;
				colvarTipoVariable.MaxLength = 0;
				colvarTipoVariable.AutoIncrement = false;
				colvarTipoVariable.IsNullable = false;
				colvarTipoVariable.IsPrimaryKey = false;
				colvarTipoVariable.IsForeignKey = false;
				colvarTipoVariable.IsReadOnly = false;
				
						colvarTipoVariable.DefaultSetting = @"((0))";
				colvarTipoVariable.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTipoVariable);
				
				TableSchema.TableColumn colvarMultiCampoVariable = new TableSchema.TableColumn(schema);
				colvarMultiCampoVariable.ColumnName = "MultiCampoVariable";
				colvarMultiCampoVariable.DataType = DbType.Boolean;
				colvarMultiCampoVariable.MaxLength = 0;
				colvarMultiCampoVariable.AutoIncrement = false;
				colvarMultiCampoVariable.IsNullable = false;
				colvarMultiCampoVariable.IsPrimaryKey = false;
				colvarMultiCampoVariable.IsForeignKey = false;
				colvarMultiCampoVariable.IsReadOnly = false;
				colvarMultiCampoVariable.DefaultSetting = @"";
				colvarMultiCampoVariable.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMultiCampoVariable);
				
				TableSchema.TableColumn colvarMultiCampoDespiegue = new TableSchema.TableColumn(schema);
				colvarMultiCampoDespiegue.ColumnName = "MultiCampoDespiegue";
				colvarMultiCampoDespiegue.DataType = DbType.Int32;
				colvarMultiCampoDespiegue.MaxLength = 0;
				colvarMultiCampoDespiegue.AutoIncrement = false;
				colvarMultiCampoDespiegue.IsNullable = false;
				colvarMultiCampoDespiegue.IsPrimaryKey = false;
				colvarMultiCampoDespiegue.IsForeignKey = false;
				colvarMultiCampoDespiegue.IsReadOnly = false;
				
						colvarMultiCampoDespiegue.DefaultSetting = @"((0))";
				colvarMultiCampoDespiegue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMultiCampoDespiegue);
				
				TableSchema.TableColumn colvarMultiRow = new TableSchema.TableColumn(schema);
				colvarMultiRow.ColumnName = "MultiRow";
				colvarMultiRow.DataType = DbType.Boolean;
				colvarMultiRow.MaxLength = 0;
				colvarMultiRow.AutoIncrement = false;
				colvarMultiRow.IsNullable = false;
				colvarMultiRow.IsPrimaryKey = false;
				colvarMultiRow.IsForeignKey = false;
				colvarMultiRow.IsReadOnly = false;
				
						colvarMultiRow.DefaultSetting = @"((0))";
				colvarMultiRow.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMultiRow);
				
				TableSchema.TableColumn colvarAutoReplace = new TableSchema.TableColumn(schema);
				colvarAutoReplace.ColumnName = "AutoReplace";
				colvarAutoReplace.DataType = DbType.Boolean;
				colvarAutoReplace.MaxLength = 0;
				colvarAutoReplace.AutoIncrement = false;
				colvarAutoReplace.IsNullable = false;
				colvarAutoReplace.IsPrimaryKey = false;
				colvarAutoReplace.IsForeignKey = false;
				colvarAutoReplace.IsReadOnly = false;
				
						colvarAutoReplace.DefaultSetting = @"((1))";
				colvarAutoReplace.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAutoReplace);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["SrmProvider"].AddSchema("Variables",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("VariableId")]
		[Bindable(true)]
		public string VariableId 
		{
			get { return GetColumnValue<string>(Columns.VariableId); }
			set { SetColumnValue(Columns.VariableId, value); }
		}
		  
		[XmlAttribute("Descripcion")]
		[Bindable(true)]
		public string Descripcion 
		{
			get { return GetColumnValue<string>(Columns.Descripcion); }
			set { SetColumnValue(Columns.Descripcion, value); }
		}
		  
		[XmlAttribute("TablaVariable")]
		[Bindable(true)]
		public string TablaVariable 
		{
			get { return GetColumnValue<string>(Columns.TablaVariable); }
			set { SetColumnValue(Columns.TablaVariable, value); }
		}
		  
		[XmlAttribute("CampoVariable")]
		[Bindable(true)]
		public string CampoVariable 
		{
			get { return GetColumnValue<string>(Columns.CampoVariable); }
			set { SetColumnValue(Columns.CampoVariable, value); }
		}
		  
		[XmlAttribute("ValorPredeterminado")]
		[Bindable(true)]
		public string ValorPredeterminado 
		{
			get { return GetColumnValue<string>(Columns.ValorPredeterminado); }
			set { SetColumnValue(Columns.ValorPredeterminado, value); }
		}
		  
		[XmlAttribute("TipoFormato")]
		[Bindable(true)]
		public int TipoFormato 
		{
			get { return GetColumnValue<int>(Columns.TipoFormato); }
			set { SetColumnValue(Columns.TipoFormato, value); }
		}
		  
		[XmlAttribute("Formato")]
		[Bindable(true)]
		public string Formato 
		{
			get { return GetColumnValue<string>(Columns.Formato); }
			set { SetColumnValue(Columns.Formato, value); }
		}
		  
		[XmlAttribute("TipoDespliegue")]
		[Bindable(true)]
		public int TipoDespliegue 
		{
			get { return GetColumnValue<int>(Columns.TipoDespliegue); }
			set { SetColumnValue(Columns.TipoDespliegue, value); }
		}
		  
		[XmlAttribute("Filtro")]
		[Bindable(true)]
		public string Filtro 
		{
			get { return GetColumnValue<string>(Columns.Filtro); }
			set { SetColumnValue(Columns.Filtro, value); }
		}
		  
		[XmlAttribute("CaseFormat")]
		[Bindable(true)]
		public int CaseFormat 
		{
			get { return GetColumnValue<int>(Columns.CaseFormat); }
			set { SetColumnValue(Columns.CaseFormat, value); }
		}
		  
		[XmlAttribute("TipoVariable")]
		[Bindable(true)]
		public int TipoVariable 
		{
			get { return GetColumnValue<int>(Columns.TipoVariable); }
			set { SetColumnValue(Columns.TipoVariable, value); }
		}
		  
		[XmlAttribute("MultiCampoVariable")]
		[Bindable(true)]
		public bool MultiCampoVariable 
		{
			get { return GetColumnValue<bool>(Columns.MultiCampoVariable); }
			set { SetColumnValue(Columns.MultiCampoVariable, value); }
		}
		  
		[XmlAttribute("MultiCampoDespiegue")]
		[Bindable(true)]
		public int MultiCampoDespiegue 
		{
			get { return GetColumnValue<int>(Columns.MultiCampoDespiegue); }
			set { SetColumnValue(Columns.MultiCampoDespiegue, value); }
		}
		  
		[XmlAttribute("MultiRow")]
		[Bindable(true)]
		public bool MultiRow 
		{
			get { return GetColumnValue<bool>(Columns.MultiRow); }
			set { SetColumnValue(Columns.MultiRow, value); }
		}
		  
		[XmlAttribute("AutoReplace")]
		[Bindable(true)]
		public bool AutoReplace 
		{
			get { return GetColumnValue<bool>(Columns.AutoReplace); }
			set { SetColumnValue(Columns.AutoReplace, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varVariableId,string varDescripcion,string varTablaVariable,string varCampoVariable,string varValorPredeterminado,int varTipoFormato,string varFormato,int varTipoDespliegue,string varFiltro,int varCaseFormat,int varTipoVariable,bool varMultiCampoVariable,int varMultiCampoDespiegue,bool varMultiRow,bool varAutoReplace)
		{
			Variables item = new Variables();
			
			item.VariableId = varVariableId;
			
			item.Descripcion = varDescripcion;
			
			item.TablaVariable = varTablaVariable;
			
			item.CampoVariable = varCampoVariable;
			
			item.ValorPredeterminado = varValorPredeterminado;
			
			item.TipoFormato = varTipoFormato;
			
			item.Formato = varFormato;
			
			item.TipoDespliegue = varTipoDespliegue;
			
			item.Filtro = varFiltro;
			
			item.CaseFormat = varCaseFormat;
			
			item.TipoVariable = varTipoVariable;
			
			item.MultiCampoVariable = varMultiCampoVariable;
			
			item.MultiCampoDespiegue = varMultiCampoDespiegue;
			
			item.MultiRow = varMultiRow;
			
			item.AutoReplace = varAutoReplace;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varVariableId,string varDescripcion,string varTablaVariable,string varCampoVariable,string varValorPredeterminado,int varTipoFormato,string varFormato,int varTipoDespliegue,string varFiltro,int varCaseFormat,int varTipoVariable,bool varMultiCampoVariable,int varMultiCampoDespiegue,bool varMultiRow,bool varAutoReplace)
		{
			Variables item = new Variables();
			
				item.VariableId = varVariableId;
			
				item.Descripcion = varDescripcion;
			
				item.TablaVariable = varTablaVariable;
			
				item.CampoVariable = varCampoVariable;
			
				item.ValorPredeterminado = varValorPredeterminado;
			
				item.TipoFormato = varTipoFormato;
			
				item.Formato = varFormato;
			
				item.TipoDespliegue = varTipoDespliegue;
			
				item.Filtro = varFiltro;
			
				item.CaseFormat = varCaseFormat;
			
				item.TipoVariable = varTipoVariable;
			
				item.MultiCampoVariable = varMultiCampoVariable;
			
				item.MultiCampoDespiegue = varMultiCampoDespiegue;
			
				item.MultiRow = varMultiRow;
			
				item.AutoReplace = varAutoReplace;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn VariableIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn DescripcionColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn TablaVariableColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn CampoVariableColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ValorPredeterminadoColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn TipoFormatoColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn FormatoColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn TipoDespliegueColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn FiltroColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn CaseFormatColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn TipoVariableColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn MultiCampoVariableColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn MultiCampoDespiegueColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn MultiRowColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn AutoReplaceColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string VariableId = @"VariableId";
			 public static string Descripcion = @"Descripcion";
			 public static string TablaVariable = @"TablaVariable";
			 public static string CampoVariable = @"CampoVariable";
			 public static string ValorPredeterminado = @"ValorPredeterminado";
			 public static string TipoFormato = @"TipoFormato";
			 public static string Formato = @"Formato";
			 public static string TipoDespliegue = @"TipoDespliegue";
			 public static string Filtro = @"Filtro";
			 public static string CaseFormat = @"CaseFormat";
			 public static string TipoVariable = @"TipoVariable";
			 public static string MultiCampoVariable = @"MultiCampoVariable";
			 public static string MultiCampoDespiegue = @"MultiCampoDespiegue";
			 public static string MultiRow = @"MultiRow";
			 public static string AutoReplace = @"AutoReplace";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
