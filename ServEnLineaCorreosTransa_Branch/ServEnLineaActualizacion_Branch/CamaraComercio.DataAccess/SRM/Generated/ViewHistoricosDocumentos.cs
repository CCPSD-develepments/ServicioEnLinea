using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace CamaraComercio.DataAccess.SRM{
    /// <summary>
    /// Strongly-typed collection for the ViewHistoricosDocumentos class.
    /// </summary>
    [Serializable]
    public partial class ViewHistoricosDocumentosCollection : ReadOnlyList<ViewHistoricosDocumentos, ViewHistoricosDocumentosCollection>
    {        
        public ViewHistoricosDocumentosCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the cvw_HistoricosDocumentos view.
    /// </summary>
    [Serializable]
    public partial class ViewHistoricosDocumentos : ReadOnlyRecord<ViewHistoricosDocumentos>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("cvw_HistoricosDocumentos", TableType.View, DataService.GetInstance("SrmProvider"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"Historico";
                //columns
                
                TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
                colvarId.ColumnName = "Id";
                colvarId.DataType = DbType.Int32;
                colvarId.MaxLength = 0;
                colvarId.AutoIncrement = false;
                colvarId.IsNullable = false;
                colvarId.IsPrimaryKey = false;
                colvarId.IsForeignKey = false;
                colvarId.IsReadOnly = false;
                
                schema.Columns.Add(colvarId);
                
                TableSchema.TableColumn colvarRegistroId = new TableSchema.TableColumn(schema);
                colvarRegistroId.ColumnName = "RegistroId";
                colvarRegistroId.DataType = DbType.Int32;
                colvarRegistroId.MaxLength = 0;
                colvarRegistroId.AutoIncrement = false;
                colvarRegistroId.IsNullable = false;
                colvarRegistroId.IsPrimaryKey = false;
                colvarRegistroId.IsForeignKey = false;
                colvarRegistroId.IsReadOnly = false;
                
                schema.Columns.Add(colvarRegistroId);
                
                TableSchema.TableColumn colvarDocumentoId = new TableSchema.TableColumn(schema);
                colvarDocumentoId.ColumnName = "DocumentoId";
                colvarDocumentoId.DataType = DbType.Int32;
                colvarDocumentoId.MaxLength = 0;
                colvarDocumentoId.AutoIncrement = false;
                colvarDocumentoId.IsNullable = false;
                colvarDocumentoId.IsPrimaryKey = false;
                colvarDocumentoId.IsForeignKey = false;
                colvarDocumentoId.IsReadOnly = false;
                
                schema.Columns.Add(colvarDocumentoId);
                
                TableSchema.TableColumn colvarFechaDocumento = new TableSchema.TableColumn(schema);
                colvarFechaDocumento.ColumnName = "FechaDocumento";
                colvarFechaDocumento.DataType = DbType.DateTime;
                colvarFechaDocumento.MaxLength = 0;
                colvarFechaDocumento.AutoIncrement = false;
                colvarFechaDocumento.IsNullable = true;
                colvarFechaDocumento.IsPrimaryKey = false;
                colvarFechaDocumento.IsForeignKey = false;
                colvarFechaDocumento.IsReadOnly = false;
                
                schema.Columns.Add(colvarFechaDocumento);
                
                TableSchema.TableColumn colvarNoDocumento = new TableSchema.TableColumn(schema);
                colvarNoDocumento.ColumnName = "NoDocumento";
                colvarNoDocumento.DataType = DbType.Int32;
                colvarNoDocumento.MaxLength = 0;
                colvarNoDocumento.AutoIncrement = false;
                colvarNoDocumento.IsNullable = true;
                colvarNoDocumento.IsPrimaryKey = false;
                colvarNoDocumento.IsForeignKey = false;
                colvarNoDocumento.IsReadOnly = false;
                
                schema.Columns.Add(colvarNoDocumento);
                
                TableSchema.TableColumn colvarLibro = new TableSchema.TableColumn(schema);
                colvarLibro.ColumnName = "Libro";
                colvarLibro.DataType = DbType.Int32;
                colvarLibro.MaxLength = 0;
                colvarLibro.AutoIncrement = false;
                colvarLibro.IsNullable = true;
                colvarLibro.IsPrimaryKey = false;
                colvarLibro.IsForeignKey = false;
                colvarLibro.IsReadOnly = false;
                
                schema.Columns.Add(colvarLibro);
                
                TableSchema.TableColumn colvarFolio = new TableSchema.TableColumn(schema);
                colvarFolio.ColumnName = "Folio";
                colvarFolio.DataType = DbType.Int32;
                colvarFolio.MaxLength = 0;
                colvarFolio.AutoIncrement = false;
                colvarFolio.IsNullable = true;
                colvarFolio.IsPrimaryKey = false;
                colvarFolio.IsForeignKey = false;
                colvarFolio.IsReadOnly = false;
                
                schema.Columns.Add(colvarFolio);
                
                TableSchema.TableColumn colvarNoExpediente = new TableSchema.TableColumn(schema);
                colvarNoExpediente.ColumnName = "NoExpediente";
                colvarNoExpediente.DataType = DbType.Int32;
                colvarNoExpediente.MaxLength = 0;
                colvarNoExpediente.AutoIncrement = false;
                colvarNoExpediente.IsNullable = false;
                colvarNoExpediente.IsPrimaryKey = false;
                colvarNoExpediente.IsForeignKey = false;
                colvarNoExpediente.IsReadOnly = false;
                
                schema.Columns.Add(colvarNoExpediente);
                
                TableSchema.TableColumn colvarDocumento = new TableSchema.TableColumn(schema);
                colvarDocumento.ColumnName = "Documento";
                colvarDocumento.DataType = DbType.AnsiString;
                colvarDocumento.MaxLength = 150;
                colvarDocumento.AutoIncrement = false;
                colvarDocumento.IsNullable = true;
                colvarDocumento.IsPrimaryKey = false;
                colvarDocumento.IsForeignKey = false;
                colvarDocumento.IsReadOnly = false;
                
                schema.Columns.Add(colvarDocumento);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["SrmProvider"].AddSchema("cvw_HistoricosDocumentos",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public ViewHistoricosDocumentos()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public ViewHistoricosDocumentos(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public ViewHistoricosDocumentos(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public ViewHistoricosDocumentos(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("Id")]
        [Bindable(true)]
        public int Id 
	    {
		    get
		    {
			    return GetColumnValue<int>("Id");
		    }
            set 
		    {
			    SetColumnValue("Id", value);
            }
        }
	      
        [XmlAttribute("RegistroId")]
        [Bindable(true)]
        public int RegistroId 
	    {
		    get
		    {
			    return GetColumnValue<int>("RegistroId");
		    }
            set 
		    {
			    SetColumnValue("RegistroId", value);
            }
        }
	      
        [XmlAttribute("DocumentoId")]
        [Bindable(true)]
        public int DocumentoId 
	    {
		    get
		    {
			    return GetColumnValue<int>("DocumentoId");
		    }
            set 
		    {
			    SetColumnValue("DocumentoId", value);
            }
        }
	      
        [XmlAttribute("FechaDocumento")]
        [Bindable(true)]
        public DateTime? FechaDocumento 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("FechaDocumento");
		    }
            set 
		    {
			    SetColumnValue("FechaDocumento", value);
            }
        }
	      
        [XmlAttribute("NoDocumento")]
        [Bindable(true)]
        public int? NoDocumento 
	    {
		    get
		    {
			    return GetColumnValue<int?>("NoDocumento");
		    }
            set 
		    {
			    SetColumnValue("NoDocumento", value);
            }
        }
	      
        [XmlAttribute("Libro")]
        [Bindable(true)]
        public int? Libro 
	    {
		    get
		    {
			    return GetColumnValue<int?>("Libro");
		    }
            set 
		    {
			    SetColumnValue("Libro", value);
            }
        }
	      
        [XmlAttribute("Folio")]
        [Bindable(true)]
        public int? Folio 
	    {
		    get
		    {
			    return GetColumnValue<int?>("Folio");
		    }
            set 
		    {
			    SetColumnValue("Folio", value);
            }
        }
	      
        [XmlAttribute("NoExpediente")]
        [Bindable(true)]
        public int NoExpediente 
	    {
		    get
		    {
			    return GetColumnValue<int>("NoExpediente");
		    }
            set 
		    {
			    SetColumnValue("NoExpediente", value);
            }
        }
	      
        [XmlAttribute("Documento")]
        [Bindable(true)]
        public string Documento 
	    {
		    get
		    {
			    return GetColumnValue<string>("Documento");
		    }
            set 
		    {
			    SetColumnValue("Documento", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string Id = @"Id";
            
            public static string RegistroId = @"RegistroId";
            
            public static string DocumentoId = @"DocumentoId";
            
            public static string FechaDocumento = @"FechaDocumento";
            
            public static string NoDocumento = @"NoDocumento";
            
            public static string Libro = @"Libro";
            
            public static string Folio = @"Folio";
            
            public static string NoExpediente = @"NoExpediente";
            
            public static string Documento = @"Documento";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
