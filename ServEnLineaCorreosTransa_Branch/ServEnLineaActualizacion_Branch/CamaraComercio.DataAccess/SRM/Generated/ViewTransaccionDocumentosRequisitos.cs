using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace CamaraComercio.DataAccess.SRM{
    /// <summary>
    /// Strongly-typed collection for the ViewTransaccionDocumentosRequisitos class.
    /// </summary>
    [Serializable]
    public partial class ViewTransaccionDocumentosRequisitosCollection : ReadOnlyList<ViewTransaccionDocumentosRequisitos, ViewTransaccionDocumentosRequisitosCollection>
    {        
        public ViewTransaccionDocumentosRequisitosCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the cvw_TransaccionDocumentosRequisitos view.
    /// </summary>
    [Serializable]
    public partial class ViewTransaccionDocumentosRequisitos : ReadOnlyRecord<ViewTransaccionDocumentosRequisitos>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("cvw_TransaccionDocumentosRequisitos", TableType.View, DataService.GetInstance("SrmProvider"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"Transaccion";
                //columns
                
                TableSchema.TableColumn colvarRquisitosTransaccionId = new TableSchema.TableColumn(schema);
                colvarRquisitosTransaccionId.ColumnName = "RquisitosTransaccionId";
                colvarRquisitosTransaccionId.DataType = DbType.Int32;
                colvarRquisitosTransaccionId.MaxLength = 0;
                colvarRquisitosTransaccionId.AutoIncrement = false;
                colvarRquisitosTransaccionId.IsNullable = false;
                colvarRquisitosTransaccionId.IsPrimaryKey = false;
                colvarRquisitosTransaccionId.IsForeignKey = false;
                colvarRquisitosTransaccionId.IsReadOnly = false;
                
                schema.Columns.Add(colvarRquisitosTransaccionId);
                
                TableSchema.TableColumn colvarDocumentoId = new TableSchema.TableColumn(schema);
                colvarDocumentoId.ColumnName = "DocumentoId";
                colvarDocumentoId.DataType = DbType.Int32;
                colvarDocumentoId.MaxLength = 0;
                colvarDocumentoId.AutoIncrement = false;
                colvarDocumentoId.IsNullable = false;
                colvarDocumentoId.IsPrimaryKey = false;
                colvarDocumentoId.IsForeignKey = false;
                colvarDocumentoId.IsReadOnly = false;
                
                schema.Columns.Add(colvarDocumentoId);
                
                TableSchema.TableColumn colvarTipoServicioId = new TableSchema.TableColumn(schema);
                colvarTipoServicioId.ColumnName = "TipoServicioId";
                colvarTipoServicioId.DataType = DbType.Int32;
                colvarTipoServicioId.MaxLength = 0;
                colvarTipoServicioId.AutoIncrement = false;
                colvarTipoServicioId.IsNullable = true;
                colvarTipoServicioId.IsPrimaryKey = false;
                colvarTipoServicioId.IsForeignKey = false;
                colvarTipoServicioId.IsReadOnly = false;
                
                schema.Columns.Add(colvarTipoServicioId);
                
                TableSchema.TableColumn colvarRequerido = new TableSchema.TableColumn(schema);
                colvarRequerido.ColumnName = "Requerido";
                colvarRequerido.DataType = DbType.Boolean;
                colvarRequerido.MaxLength = 0;
                colvarRequerido.AutoIncrement = false;
                colvarRequerido.IsNullable = true;
                colvarRequerido.IsPrimaryKey = false;
                colvarRequerido.IsForeignKey = false;
                colvarRequerido.IsReadOnly = false;
                
                schema.Columns.Add(colvarRequerido);
                
                TableSchema.TableColumn colvarNombreDocumento = new TableSchema.TableColumn(schema);
                colvarNombreDocumento.ColumnName = "NombreDocumento";
                colvarNombreDocumento.DataType = DbType.String;
                colvarNombreDocumento.MaxLength = 150;
                colvarNombreDocumento.AutoIncrement = false;
                colvarNombreDocumento.IsNullable = false;
                colvarNombreDocumento.IsPrimaryKey = false;
                colvarNombreDocumento.IsForeignKey = false;
                colvarNombreDocumento.IsReadOnly = false;
                
                schema.Columns.Add(colvarNombreDocumento);
                
                TableSchema.TableColumn colvarRegsitrable = new TableSchema.TableColumn(schema);
                colvarRegsitrable.ColumnName = "Regsitrable";
                colvarRegsitrable.DataType = DbType.Boolean;
                colvarRegsitrable.MaxLength = 0;
                colvarRegsitrable.AutoIncrement = false;
                colvarRegsitrable.IsNullable = false;
                colvarRegsitrable.IsPrimaryKey = false;
                colvarRegsitrable.IsForeignKey = false;
                colvarRegsitrable.IsReadOnly = false;
                
                schema.Columns.Add(colvarRegsitrable);
                
                TableSchema.TableColumn colvarTipoServicio = new TableSchema.TableColumn(schema);
                colvarTipoServicio.ColumnName = "TipoServicio";
                colvarTipoServicio.DataType = DbType.AnsiString;
                colvarTipoServicio.MaxLength = -1;
                colvarTipoServicio.AutoIncrement = false;
                colvarTipoServicio.IsNullable = false;
                colvarTipoServicio.IsPrimaryKey = false;
                colvarTipoServicio.IsForeignKey = false;
                colvarTipoServicio.IsReadOnly = false;
                
                schema.Columns.Add(colvarTipoServicio);
                
                TableSchema.TableColumn colvarTipoTransaccionId = new TableSchema.TableColumn(schema);
                colvarTipoTransaccionId.ColumnName = "TipoTransaccionId";
                colvarTipoTransaccionId.DataType = DbType.Int32;
                colvarTipoTransaccionId.MaxLength = 0;
                colvarTipoTransaccionId.AutoIncrement = false;
                colvarTipoTransaccionId.IsNullable = true;
                colvarTipoTransaccionId.IsPrimaryKey = false;
                colvarTipoTransaccionId.IsForeignKey = false;
                colvarTipoTransaccionId.IsReadOnly = false;
                
                schema.Columns.Add(colvarTipoTransaccionId);
                
                TableSchema.TableColumn colvarCostoServicio = new TableSchema.TableColumn(schema);
                colvarCostoServicio.ColumnName = "CostoServicio";
                colvarCostoServicio.DataType = DbType.Currency;
                colvarCostoServicio.MaxLength = 0;
                colvarCostoServicio.AutoIncrement = false;
                colvarCostoServicio.IsNullable = false;
                colvarCostoServicio.IsPrimaryKey = false;
                colvarCostoServicio.IsForeignKey = false;
                colvarCostoServicio.IsReadOnly = false;
                
                schema.Columns.Add(colvarCostoServicio);
                
                TableSchema.TableColumn colvarCalculoBaseCapital = new TableSchema.TableColumn(schema);
                colvarCalculoBaseCapital.ColumnName = "CalculoBaseCapital";
                colvarCalculoBaseCapital.DataType = DbType.Boolean;
                colvarCalculoBaseCapital.MaxLength = 0;
                colvarCalculoBaseCapital.AutoIncrement = false;
                colvarCalculoBaseCapital.IsNullable = true;
                colvarCalculoBaseCapital.IsPrimaryKey = false;
                colvarCalculoBaseCapital.IsForeignKey = false;
                colvarCalculoBaseCapital.IsReadOnly = false;
                
                schema.Columns.Add(colvarCalculoBaseCapital);
                
                TableSchema.TableColumn colvarTipoCalculoBaseCapital = new TableSchema.TableColumn(schema);
                colvarTipoCalculoBaseCapital.ColumnName = "TipoCalculoBaseCapital";
                colvarTipoCalculoBaseCapital.DataType = DbType.Int32;
                colvarTipoCalculoBaseCapital.MaxLength = 0;
                colvarTipoCalculoBaseCapital.AutoIncrement = false;
                colvarTipoCalculoBaseCapital.IsNullable = true;
                colvarTipoCalculoBaseCapital.IsPrimaryKey = false;
                colvarTipoCalculoBaseCapital.IsForeignKey = false;
                colvarTipoCalculoBaseCapital.IsReadOnly = false;
                
                schema.Columns.Add(colvarTipoCalculoBaseCapital);
                
                TableSchema.TableColumn colvarServicioParalelo = new TableSchema.TableColumn(schema);
                colvarServicioParalelo.ColumnName = "ServicioParalelo";
                colvarServicioParalelo.DataType = DbType.Boolean;
                colvarServicioParalelo.MaxLength = 0;
                colvarServicioParalelo.AutoIncrement = false;
                colvarServicioParalelo.IsNullable = true;
                colvarServicioParalelo.IsPrimaryKey = false;
                colvarServicioParalelo.IsForeignKey = false;
                colvarServicioParalelo.IsReadOnly = false;
                
                schema.Columns.Add(colvarServicioParalelo);
                
                TableSchema.TableColumn colvarServicioFlowId = new TableSchema.TableColumn(schema);
                colvarServicioFlowId.ColumnName = "ServicioFlowId";
                colvarServicioFlowId.DataType = DbType.Int32;
                colvarServicioFlowId.MaxLength = 0;
                colvarServicioFlowId.AutoIncrement = false;
                colvarServicioFlowId.IsNullable = true;
                colvarServicioFlowId.IsPrimaryKey = false;
                colvarServicioFlowId.IsForeignKey = false;
                colvarServicioFlowId.IsReadOnly = false;
                
                schema.Columns.Add(colvarServicioFlowId);
                
                TableSchema.TableColumn colvarCuenta = new TableSchema.TableColumn(schema);
                colvarCuenta.ColumnName = "Cuenta";
                colvarCuenta.DataType = DbType.AnsiString;
                colvarCuenta.MaxLength = 25;
                colvarCuenta.AutoIncrement = false;
                colvarCuenta.IsNullable = true;
                colvarCuenta.IsPrimaryKey = false;
                colvarCuenta.IsForeignKey = false;
                colvarCuenta.IsReadOnly = false;
                
                schema.Columns.Add(colvarCuenta);
                
                TableSchema.TableColumn colvarSeCobra = new TableSchema.TableColumn(schema);
                colvarSeCobra.ColumnName = "SeCobra";
                colvarSeCobra.DataType = DbType.Boolean;
                colvarSeCobra.MaxLength = 0;
                colvarSeCobra.AutoIncrement = false;
                colvarSeCobra.IsNullable = true;
                colvarSeCobra.IsPrimaryKey = false;
                colvarSeCobra.IsForeignKey = false;
                colvarSeCobra.IsReadOnly = false;
                
                schema.Columns.Add(colvarSeCobra);
                
                TableSchema.TableColumn colvarSinDocumento = new TableSchema.TableColumn(schema);
                colvarSinDocumento.ColumnName = "SinDocumento";
                colvarSinDocumento.DataType = DbType.Boolean;
                colvarSinDocumento.MaxLength = 0;
                colvarSinDocumento.AutoIncrement = false;
                colvarSinDocumento.IsNullable = true;
                colvarSinDocumento.IsPrimaryKey = false;
                colvarSinDocumento.IsForeignKey = false;
                colvarSinDocumento.IsReadOnly = false;
                
                schema.Columns.Add(colvarSinDocumento);
                
                TableSchema.TableColumn colvarSubTransaccional = new TableSchema.TableColumn(schema);
                colvarSubTransaccional.ColumnName = "SubTransaccional";
                colvarSubTransaccional.DataType = DbType.Boolean;
                colvarSubTransaccional.MaxLength = 0;
                colvarSubTransaccional.AutoIncrement = false;
                colvarSubTransaccional.IsNullable = true;
                colvarSubTransaccional.IsPrimaryKey = false;
                colvarSubTransaccional.IsForeignKey = false;
                colvarSubTransaccional.IsReadOnly = false;
                
                schema.Columns.Add(colvarSubTransaccional);
                
                TableSchema.TableColumn colvarAfectaOtraCompania = new TableSchema.TableColumn(schema);
                colvarAfectaOtraCompania.ColumnName = "AfectaOtraCompania";
                colvarAfectaOtraCompania.DataType = DbType.Boolean;
                colvarAfectaOtraCompania.MaxLength = 0;
                colvarAfectaOtraCompania.AutoIncrement = false;
                colvarAfectaOtraCompania.IsNullable = true;
                colvarAfectaOtraCompania.IsPrimaryKey = false;
                colvarAfectaOtraCompania.IsForeignKey = false;
                colvarAfectaOtraCompania.IsReadOnly = false;
                
                schema.Columns.Add(colvarAfectaOtraCompania);
                
                TableSchema.TableColumn colvarTipoTrans = new TableSchema.TableColumn(schema);
                colvarTipoTrans.ColumnName = "TipoTrans";
                colvarTipoTrans.DataType = DbType.AnsiString;
                colvarTipoTrans.MaxLength = 50;
                colvarTipoTrans.AutoIncrement = false;
                colvarTipoTrans.IsNullable = false;
                colvarTipoTrans.IsPrimaryKey = false;
                colvarTipoTrans.IsForeignKey = false;
                colvarTipoTrans.IsReadOnly = false;
                
                schema.Columns.Add(colvarTipoTrans);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["SrmProvider"].AddSchema("cvw_TransaccionDocumentosRequisitos",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public ViewTransaccionDocumentosRequisitos()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public ViewTransaccionDocumentosRequisitos(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public ViewTransaccionDocumentosRequisitos(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public ViewTransaccionDocumentosRequisitos(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("RquisitosTransaccionId")]
        [Bindable(true)]
        public int RquisitosTransaccionId 
	    {
		    get
		    {
			    return GetColumnValue<int>("RquisitosTransaccionId");
		    }
            set 
		    {
			    SetColumnValue("RquisitosTransaccionId", value);
            }
        }
	      
        [XmlAttribute("DocumentoId")]
        [Bindable(true)]
        public int DocumentoId 
	    {
		    get
		    {
			    return GetColumnValue<int>("DocumentoId");
		    }
            set 
		    {
			    SetColumnValue("DocumentoId", value);
            }
        }
	      
        [XmlAttribute("TipoServicioId")]
        [Bindable(true)]
        public int? TipoServicioId 
	    {
		    get
		    {
			    return GetColumnValue<int?>("TipoServicioId");
		    }
            set 
		    {
			    SetColumnValue("TipoServicioId", value);
            }
        }
	      
        [XmlAttribute("Requerido")]
        [Bindable(true)]
        public bool? Requerido 
	    {
		    get
		    {
			    return GetColumnValue<bool?>("Requerido");
		    }
            set 
		    {
			    SetColumnValue("Requerido", value);
            }
        }
	      
        [XmlAttribute("NombreDocumento")]
        [Bindable(true)]
        public string NombreDocumento 
	    {
		    get
		    {
			    return GetColumnValue<string>("NombreDocumento");
		    }
            set 
		    {
			    SetColumnValue("NombreDocumento", value);
            }
        }
	      
        [XmlAttribute("Regsitrable")]
        [Bindable(true)]
        public bool Regsitrable 
	    {
		    get
		    {
			    return GetColumnValue<bool>("Regsitrable");
		    }
            set 
		    {
			    SetColumnValue("Regsitrable", value);
            }
        }
	      
        [XmlAttribute("TipoServicio")]
        [Bindable(true)]
        public string TipoServicio 
	    {
		    get
		    {
			    return GetColumnValue<string>("TipoServicio");
		    }
            set 
		    {
			    SetColumnValue("TipoServicio", value);
            }
        }
	      
        [XmlAttribute("TipoTransaccionId")]
        [Bindable(true)]
        public int? TipoTransaccionId 
	    {
		    get
		    {
			    return GetColumnValue<int?>("TipoTransaccionId");
		    }
            set 
		    {
			    SetColumnValue("TipoTransaccionId", value);
            }
        }
	      
        [XmlAttribute("CostoServicio")]
        [Bindable(true)]
        public decimal CostoServicio 
	    {
		    get
		    {
			    return GetColumnValue<decimal>("CostoServicio");
		    }
            set 
		    {
			    SetColumnValue("CostoServicio", value);
            }
        }
	      
        [XmlAttribute("CalculoBaseCapital")]
        [Bindable(true)]
        public bool? CalculoBaseCapital 
	    {
		    get
		    {
			    return GetColumnValue<bool?>("CalculoBaseCapital");
		    }
            set 
		    {
			    SetColumnValue("CalculoBaseCapital", value);
            }
        }
	      
        [XmlAttribute("TipoCalculoBaseCapital")]
        [Bindable(true)]
        public int? TipoCalculoBaseCapital 
	    {
		    get
		    {
			    return GetColumnValue<int?>("TipoCalculoBaseCapital");
		    }
            set 
		    {
			    SetColumnValue("TipoCalculoBaseCapital", value);
            }
        }
	      
        [XmlAttribute("ServicioParalelo")]
        [Bindable(true)]
        public bool? ServicioParalelo 
	    {
		    get
		    {
			    return GetColumnValue<bool?>("ServicioParalelo");
		    }
            set 
		    {
			    SetColumnValue("ServicioParalelo", value);
            }
        }
	      
        [XmlAttribute("ServicioFlowId")]
        [Bindable(true)]
        public int? ServicioFlowId 
	    {
		    get
		    {
			    return GetColumnValue<int?>("ServicioFlowId");
		    }
            set 
		    {
			    SetColumnValue("ServicioFlowId", value);
            }
        }
	      
        [XmlAttribute("Cuenta")]
        [Bindable(true)]
        public string Cuenta 
	    {
		    get
		    {
			    return GetColumnValue<string>("Cuenta");
		    }
            set 
		    {
			    SetColumnValue("Cuenta", value);
            }
        }
	      
        [XmlAttribute("SeCobra")]
        [Bindable(true)]
        public bool? SeCobra 
	    {
		    get
		    {
			    return GetColumnValue<bool?>("SeCobra");
		    }
            set 
		    {
			    SetColumnValue("SeCobra", value);
            }
        }
	      
        [XmlAttribute("SinDocumento")]
        [Bindable(true)]
        public bool? SinDocumento 
	    {
		    get
		    {
			    return GetColumnValue<bool?>("SinDocumento");
		    }
            set 
		    {
			    SetColumnValue("SinDocumento", value);
            }
        }
	      
        [XmlAttribute("SubTransaccional")]
        [Bindable(true)]
        public bool? SubTransaccional 
	    {
		    get
		    {
			    return GetColumnValue<bool?>("SubTransaccional");
		    }
            set 
		    {
			    SetColumnValue("SubTransaccional", value);
            }
        }
	      
        [XmlAttribute("AfectaOtraCompania")]
        [Bindable(true)]
        public bool? AfectaOtraCompania 
	    {
		    get
		    {
			    return GetColumnValue<bool?>("AfectaOtraCompania");
		    }
            set 
		    {
			    SetColumnValue("AfectaOtraCompania", value);
            }
        }
	      
        [XmlAttribute("TipoTrans")]
        [Bindable(true)]
        public string TipoTrans 
	    {
		    get
		    {
			    return GetColumnValue<string>("TipoTrans");
		    }
            set 
		    {
			    SetColumnValue("TipoTrans", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string RquisitosTransaccionId = @"RquisitosTransaccionId";
            
            public static string DocumentoId = @"DocumentoId";
            
            public static string TipoServicioId = @"TipoServicioId";
            
            public static string Requerido = @"Requerido";
            
            public static string NombreDocumento = @"NombreDocumento";
            
            public static string Regsitrable = @"Regsitrable";
            
            public static string TipoServicio = @"TipoServicio";
            
            public static string TipoTransaccionId = @"TipoTransaccionId";
            
            public static string CostoServicio = @"CostoServicio";
            
            public static string CalculoBaseCapital = @"CalculoBaseCapital";
            
            public static string TipoCalculoBaseCapital = @"TipoCalculoBaseCapital";
            
            public static string ServicioParalelo = @"ServicioParalelo";
            
            public static string ServicioFlowId = @"ServicioFlowId";
            
            public static string Cuenta = @"Cuenta";
            
            public static string SeCobra = @"SeCobra";
            
            public static string SinDocumento = @"SinDocumento";
            
            public static string SubTransaccional = @"SubTransaccional";
            
            public static string AfectaOtraCompania = @"AfectaOtraCompania";
            
            public static string TipoTrans = @"TipoTrans";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
