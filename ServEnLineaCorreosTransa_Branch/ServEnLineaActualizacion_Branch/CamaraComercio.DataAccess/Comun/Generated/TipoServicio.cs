using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace CamaraComercio.DataAccess.Comun
{
	/// <summary>
	/// Strongly-typed collection for the TipoServicio class.
	/// </summary>
    [Serializable]
	public partial class TipoServicioCollection : ActiveList<TipoServicio, TipoServicioCollection>
	{	   
		public TipoServicioCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TipoServicioCollection</returns>
		public TipoServicioCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TipoServicio o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TipoServicio table.
	/// </summary>
	[Serializable]
	public partial class TipoServicio : ActiveRecord<TipoServicio>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TipoServicio()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TipoServicio(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TipoServicio(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TipoServicio(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TipoServicio", TableType.Table, DataService.GetInstance("ComunProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarTipoServicioId = new TableSchema.TableColumn(schema);
				colvarTipoServicioId.ColumnName = "TipoServicioId";
				colvarTipoServicioId.DataType = DbType.Int32;
				colvarTipoServicioId.MaxLength = 0;
				colvarTipoServicioId.AutoIncrement = true;
				colvarTipoServicioId.IsNullable = false;
				colvarTipoServicioId.IsPrimaryKey = true;
				colvarTipoServicioId.IsForeignKey = false;
				colvarTipoServicioId.IsReadOnly = false;
				colvarTipoServicioId.DefaultSetting = @"";
				colvarTipoServicioId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTipoServicioId);
				
				TableSchema.TableColumn colvarDescripcion = new TableSchema.TableColumn(schema);
				colvarDescripcion.ColumnName = "Descripcion";
				colvarDescripcion.DataType = DbType.AnsiString;
				colvarDescripcion.MaxLength = 50;
				colvarDescripcion.AutoIncrement = false;
				colvarDescripcion.IsNullable = false;
				colvarDescripcion.IsPrimaryKey = false;
				colvarDescripcion.IsForeignKey = false;
				colvarDescripcion.IsReadOnly = false;
				colvarDescripcion.DefaultSetting = @"";
				colvarDescripcion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescripcion);
				
				TableSchema.TableColumn colvarSufijo = new TableSchema.TableColumn(schema);
				colvarSufijo.ColumnName = "Sufijo";
				colvarSufijo.DataType = DbType.AnsiString;
				colvarSufijo.MaxLength = 2;
				colvarSufijo.AutoIncrement = false;
				colvarSufijo.IsNullable = false;
				colvarSufijo.IsPrimaryKey = false;
				colvarSufijo.IsForeignKey = false;
				colvarSufijo.IsReadOnly = false;
				colvarSufijo.DefaultSetting = @"";
				colvarSufijo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSufijo);
				
				TableSchema.TableColumn colvarFechaModificacion = new TableSchema.TableColumn(schema);
				colvarFechaModificacion.ColumnName = "FechaModificacion";
				colvarFechaModificacion.DataType = DbType.DateTime;
				colvarFechaModificacion.MaxLength = 0;
				colvarFechaModificacion.AutoIncrement = false;
				colvarFechaModificacion.IsNullable = false;
				colvarFechaModificacion.IsPrimaryKey = false;
				colvarFechaModificacion.IsForeignKey = false;
				colvarFechaModificacion.IsReadOnly = false;
				
						colvarFechaModificacion.DefaultSetting = @"(getdate())";
				colvarFechaModificacion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFechaModificacion);
				
				TableSchema.TableColumn colvarTipoIdentificador = new TableSchema.TableColumn(schema);
				colvarTipoIdentificador.ColumnName = "TipoIdentificador";
				colvarTipoIdentificador.DataType = DbType.Int32;
				colvarTipoIdentificador.MaxLength = 0;
				colvarTipoIdentificador.AutoIncrement = false;
				colvarTipoIdentificador.IsNullable = false;
				colvarTipoIdentificador.IsPrimaryKey = false;
				colvarTipoIdentificador.IsForeignKey = false;
				colvarTipoIdentificador.IsReadOnly = false;
				colvarTipoIdentificador.DefaultSetting = @"";
				colvarTipoIdentificador.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTipoIdentificador);
				
				TableSchema.TableColumn colvarVisible = new TableSchema.TableColumn(schema);
				colvarVisible.ColumnName = "Visible";
				colvarVisible.DataType = DbType.Boolean;
				colvarVisible.MaxLength = 0;
				colvarVisible.AutoIncrement = false;
				colvarVisible.IsNullable = false;
				colvarVisible.IsPrimaryKey = false;
				colvarVisible.IsForeignKey = false;
				colvarVisible.IsReadOnly = false;
				
						colvarVisible.DefaultSetting = @"((1))";
				colvarVisible.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVisible);
				
				TableSchema.TableColumn colvarSiteVisible = new TableSchema.TableColumn(schema);
				colvarSiteVisible.ColumnName = "SiteVisible";
				colvarSiteVisible.DataType = DbType.Boolean;
				colvarSiteVisible.MaxLength = 0;
				colvarSiteVisible.AutoIncrement = false;
				colvarSiteVisible.IsNullable = false;
				colvarSiteVisible.IsPrimaryKey = false;
				colvarSiteVisible.IsForeignKey = false;
				colvarSiteVisible.IsReadOnly = false;
				colvarSiteVisible.DefaultSetting = @"";
				colvarSiteVisible.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSiteVisible);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ComunProvider"].AddSchema("TipoServicio",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("TipoServicioId")]
		[Bindable(true)]
		public int TipoServicioId 
		{
			get { return GetColumnValue<int>(Columns.TipoServicioId); }
			set { SetColumnValue(Columns.TipoServicioId, value); }
		}
		  
		[XmlAttribute("Descripcion")]
		[Bindable(true)]
		public string Descripcion 
		{
			get { return GetColumnValue<string>(Columns.Descripcion); }
			set { SetColumnValue(Columns.Descripcion, value); }
		}
		  
		[XmlAttribute("Sufijo")]
		[Bindable(true)]
		public string Sufijo 
		{
			get { return GetColumnValue<string>(Columns.Sufijo); }
			set { SetColumnValue(Columns.Sufijo, value); }
		}
		  
		[XmlAttribute("FechaModificacion")]
		[Bindable(true)]
		public DateTime FechaModificacion 
		{
			get { return GetColumnValue<DateTime>(Columns.FechaModificacion); }
			set { SetColumnValue(Columns.FechaModificacion, value); }
		}
		  
		[XmlAttribute("TipoIdentificador")]
		[Bindable(true)]
		public int TipoIdentificador 
		{
			get { return GetColumnValue<int>(Columns.TipoIdentificador); }
			set { SetColumnValue(Columns.TipoIdentificador, value); }
		}
		  
		[XmlAttribute("Visible")]
		[Bindable(true)]
		public bool Visible 
		{
			get { return GetColumnValue<bool>(Columns.Visible); }
			set { SetColumnValue(Columns.Visible, value); }
		}
		  
		[XmlAttribute("SiteVisible")]
		[Bindable(true)]
		public bool SiteVisible 
		{
			get { return GetColumnValue<bool>(Columns.SiteVisible); }
			set { SetColumnValue(Columns.SiteVisible, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public CamaraComercio.DataAccess.Comun.ServicioCollection ServicioRecords()
		{
			return new CamaraComercio.DataAccess.Comun.ServicioCollection().Where(Servicio.Columns.TipoServicioId, TipoServicioId).Load();
		}
		#endregion
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varDescripcion,string varSufijo,DateTime varFechaModificacion,int varTipoIdentificador,bool varVisible,bool varSiteVisible)
		{
			TipoServicio item = new TipoServicio();
			
			item.Descripcion = varDescripcion;
			
			item.Sufijo = varSufijo;
			
			item.FechaModificacion = varFechaModificacion;
			
			item.TipoIdentificador = varTipoIdentificador;
			
			item.Visible = varVisible;
			
			item.SiteVisible = varSiteVisible;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varTipoServicioId,string varDescripcion,string varSufijo,DateTime varFechaModificacion,int varTipoIdentificador,bool varVisible,bool varSiteVisible)
		{
			TipoServicio item = new TipoServicio();
			
				item.TipoServicioId = varTipoServicioId;
			
				item.Descripcion = varDescripcion;
			
				item.Sufijo = varSufijo;
			
				item.FechaModificacion = varFechaModificacion;
			
				item.TipoIdentificador = varTipoIdentificador;
			
				item.Visible = varVisible;
			
				item.SiteVisible = varSiteVisible;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn TipoServicioIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn DescripcionColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn SufijoColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn FechaModificacionColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn TipoIdentificadorColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn VisibleColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn SiteVisibleColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string TipoServicioId = @"TipoServicioId";
			 public static string Descripcion = @"Descripcion";
			 public static string Sufijo = @"Sufijo";
			 public static string FechaModificacion = @"FechaModificacion";
			 public static string TipoIdentificador = @"TipoIdentificador";
			 public static string Visible = @"Visible";
			 public static string SiteVisible = @"SiteVisible";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
