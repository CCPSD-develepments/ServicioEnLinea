using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace CamaraComercio.DataAccess.SRM
{
	/// <summary>
	/// Strongly-typed collection for the Modulos class.
	/// </summary>
    [Serializable]
	public partial class ModulosCollection : ActiveList<Modulos, ModulosCollection>
	{	   
		public ModulosCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>ModulosCollection</returns>
		public ModulosCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Modulos o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Modulos table.
	/// </summary>
	[Serializable]
	public partial class Modulos : ActiveRecord<Modulos>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public Modulos()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public Modulos(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public Modulos(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public Modulos(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Modulos", TableType.Table, DataService.GetInstance("SrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarModuloId = new TableSchema.TableColumn(schema);
				colvarModuloId.ColumnName = "ModuloId";
				colvarModuloId.DataType = DbType.Int32;
				colvarModuloId.MaxLength = 0;
				colvarModuloId.AutoIncrement = true;
				colvarModuloId.IsNullable = false;
				colvarModuloId.IsPrimaryKey = true;
				colvarModuloId.IsForeignKey = false;
				colvarModuloId.IsReadOnly = false;
				colvarModuloId.DefaultSetting = @"";
				colvarModuloId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModuloId);
				
				TableSchema.TableColumn colvarModuloPadreId = new TableSchema.TableColumn(schema);
				colvarModuloPadreId.ColumnName = "ModuloPadreId";
				colvarModuloPadreId.DataType = DbType.Int32;
				colvarModuloPadreId.MaxLength = 0;
				colvarModuloPadreId.AutoIncrement = false;
				colvarModuloPadreId.IsNullable = true;
				colvarModuloPadreId.IsPrimaryKey = false;
				colvarModuloPadreId.IsForeignKey = false;
				colvarModuloPadreId.IsReadOnly = false;
				colvarModuloPadreId.DefaultSetting = @"";
				colvarModuloPadreId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModuloPadreId);
				
				TableSchema.TableColumn colvarNombre = new TableSchema.TableColumn(schema);
				colvarNombre.ColumnName = "Nombre";
				colvarNombre.DataType = DbType.String;
				colvarNombre.MaxLength = 75;
				colvarNombre.AutoIncrement = false;
				colvarNombre.IsNullable = false;
				colvarNombre.IsPrimaryKey = false;
				colvarNombre.IsForeignKey = false;
				colvarNombre.IsReadOnly = false;
				colvarNombre.DefaultSetting = @"";
				colvarNombre.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNombre);
				
				TableSchema.TableColumn colvarNombreEtiqueta = new TableSchema.TableColumn(schema);
				colvarNombreEtiqueta.ColumnName = "NombreEtiqueta";
				colvarNombreEtiqueta.DataType = DbType.String;
				colvarNombreEtiqueta.MaxLength = 75;
				colvarNombreEtiqueta.AutoIncrement = false;
				colvarNombreEtiqueta.IsNullable = false;
				colvarNombreEtiqueta.IsPrimaryKey = false;
				colvarNombreEtiqueta.IsForeignKey = false;
				colvarNombreEtiqueta.IsReadOnly = false;
				colvarNombreEtiqueta.DefaultSetting = @"";
				colvarNombreEtiqueta.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNombreEtiqueta);
				
				TableSchema.TableColumn colvarTag = new TableSchema.TableColumn(schema);
				colvarTag.ColumnName = "Tag";
				colvarTag.DataType = DbType.AnsiString;
				colvarTag.MaxLength = 50;
				colvarTag.AutoIncrement = false;
				colvarTag.IsNullable = true;
				colvarTag.IsPrimaryKey = false;
				colvarTag.IsForeignKey = false;
				colvarTag.IsReadOnly = false;
				colvarTag.DefaultSetting = @"";
				colvarTag.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTag);
				
				TableSchema.TableColumn colvarOrden = new TableSchema.TableColumn(schema);
				colvarOrden.ColumnName = "Orden";
				colvarOrden.DataType = DbType.Int32;
				colvarOrden.MaxLength = 0;
				colvarOrden.AutoIncrement = false;
				colvarOrden.IsNullable = true;
				colvarOrden.IsPrimaryKey = false;
				colvarOrden.IsForeignKey = false;
				colvarOrden.IsReadOnly = false;
				colvarOrden.DefaultSetting = @"";
				colvarOrden.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrden);
				
				TableSchema.TableColumn colvarCreateSerparator = new TableSchema.TableColumn(schema);
				colvarCreateSerparator.ColumnName = "CreateSerparator";
				colvarCreateSerparator.DataType = DbType.Boolean;
				colvarCreateSerparator.MaxLength = 0;
				colvarCreateSerparator.AutoIncrement = false;
				colvarCreateSerparator.IsNullable = true;
				colvarCreateSerparator.IsPrimaryKey = false;
				colvarCreateSerparator.IsForeignKey = false;
				colvarCreateSerparator.IsReadOnly = false;
				
						colvarCreateSerparator.DefaultSetting = @"((0))";
				colvarCreateSerparator.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreateSerparator);
				
				TableSchema.TableColumn colvarIcon = new TableSchema.TableColumn(schema);
				colvarIcon.ColumnName = "Icon";
				colvarIcon.DataType = DbType.Binary;
				colvarIcon.MaxLength = -1;
				colvarIcon.AutoIncrement = false;
				colvarIcon.IsNullable = true;
				colvarIcon.IsPrimaryKey = false;
				colvarIcon.IsForeignKey = false;
				colvarIcon.IsReadOnly = false;
				colvarIcon.DefaultSetting = @"";
				colvarIcon.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIcon);
				
				TableSchema.TableColumn colvarShowInNavBar = new TableSchema.TableColumn(schema);
				colvarShowInNavBar.ColumnName = "ShowInNavBar";
				colvarShowInNavBar.DataType = DbType.Boolean;
				colvarShowInNavBar.MaxLength = 0;
				colvarShowInNavBar.AutoIncrement = false;
				colvarShowInNavBar.IsNullable = true;
				colvarShowInNavBar.IsPrimaryKey = false;
				colvarShowInNavBar.IsForeignKey = false;
				colvarShowInNavBar.IsReadOnly = false;
				
						colvarShowInNavBar.DefaultSetting = @"((0))";
				colvarShowInNavBar.ForeignKeyTableName = "";
				schema.Columns.Add(colvarShowInNavBar);
				
				TableSchema.TableColumn colvarShowInTreeNavBar = new TableSchema.TableColumn(schema);
				colvarShowInTreeNavBar.ColumnName = "ShowInTreeNavBar";
				colvarShowInTreeNavBar.DataType = DbType.Boolean;
				colvarShowInTreeNavBar.MaxLength = 0;
				colvarShowInTreeNavBar.AutoIncrement = false;
				colvarShowInTreeNavBar.IsNullable = true;
				colvarShowInTreeNavBar.IsPrimaryKey = false;
				colvarShowInTreeNavBar.IsForeignKey = false;
				colvarShowInTreeNavBar.IsReadOnly = false;
				
						colvarShowInTreeNavBar.DefaultSetting = @"((0))";
				colvarShowInTreeNavBar.ForeignKeyTableName = "";
				schema.Columns.Add(colvarShowInTreeNavBar);
				
				TableSchema.TableColumn colvarSoloAdministrador = new TableSchema.TableColumn(schema);
				colvarSoloAdministrador.ColumnName = "SoloAdministrador";
				colvarSoloAdministrador.DataType = DbType.Boolean;
				colvarSoloAdministrador.MaxLength = 0;
				colvarSoloAdministrador.AutoIncrement = false;
				colvarSoloAdministrador.IsNullable = true;
				colvarSoloAdministrador.IsPrimaryKey = false;
				colvarSoloAdministrador.IsForeignKey = false;
				colvarSoloAdministrador.IsReadOnly = false;
				
						colvarSoloAdministrador.DefaultSetting = @"((0))";
				colvarSoloAdministrador.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSoloAdministrador);
				
				TableSchema.TableColumn colvarHeredaPadre = new TableSchema.TableColumn(schema);
				colvarHeredaPadre.ColumnName = "HeredaPadre";
				colvarHeredaPadre.DataType = DbType.Boolean;
				colvarHeredaPadre.MaxLength = 0;
				colvarHeredaPadre.AutoIncrement = false;
				colvarHeredaPadre.IsNullable = true;
				colvarHeredaPadre.IsPrimaryKey = false;
				colvarHeredaPadre.IsForeignKey = false;
				colvarHeredaPadre.IsReadOnly = false;
				
						colvarHeredaPadre.DefaultSetting = @"((0))";
				colvarHeredaPadre.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHeredaPadre);
				
				TableSchema.TableColumn colvarHiddenOption = new TableSchema.TableColumn(schema);
				colvarHiddenOption.ColumnName = "HiddenOption";
				colvarHiddenOption.DataType = DbType.Boolean;
				colvarHiddenOption.MaxLength = 0;
				colvarHiddenOption.AutoIncrement = false;
				colvarHiddenOption.IsNullable = true;
				colvarHiddenOption.IsPrimaryKey = false;
				colvarHiddenOption.IsForeignKey = false;
				colvarHiddenOption.IsReadOnly = false;
				
						colvarHiddenOption.DefaultSetting = @"((0))";
				colvarHiddenOption.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHiddenOption);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["SrmProvider"].AddSchema("Modulos",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("ModuloId")]
		[Bindable(true)]
		public int ModuloId 
		{
			get { return GetColumnValue<int>(Columns.ModuloId); }
			set { SetColumnValue(Columns.ModuloId, value); }
		}
		  
		[XmlAttribute("ModuloPadreId")]
		[Bindable(true)]
		public int? ModuloPadreId 
		{
			get { return GetColumnValue<int?>(Columns.ModuloPadreId); }
			set { SetColumnValue(Columns.ModuloPadreId, value); }
		}
		  
		[XmlAttribute("Nombre")]
		[Bindable(true)]
		public string Nombre 
		{
			get { return GetColumnValue<string>(Columns.Nombre); }
			set { SetColumnValue(Columns.Nombre, value); }
		}
		  
		[XmlAttribute("NombreEtiqueta")]
		[Bindable(true)]
		public string NombreEtiqueta 
		{
			get { return GetColumnValue<string>(Columns.NombreEtiqueta); }
			set { SetColumnValue(Columns.NombreEtiqueta, value); }
		}
		  
		[XmlAttribute("Tag")]
		[Bindable(true)]
		public string Tag 
		{
			get { return GetColumnValue<string>(Columns.Tag); }
			set { SetColumnValue(Columns.Tag, value); }
		}
		  
		[XmlAttribute("Orden")]
		[Bindable(true)]
		public int? Orden 
		{
			get { return GetColumnValue<int?>(Columns.Orden); }
			set { SetColumnValue(Columns.Orden, value); }
		}
		  
		[XmlAttribute("CreateSerparator")]
		[Bindable(true)]
		public bool? CreateSerparator 
		{
			get { return GetColumnValue<bool?>(Columns.CreateSerparator); }
			set { SetColumnValue(Columns.CreateSerparator, value); }
		}
		  
		[XmlAttribute("Icon")]
		[Bindable(true)]
		public byte[] Icon 
		{
			get { return GetColumnValue<byte[]>(Columns.Icon); }
			set { SetColumnValue(Columns.Icon, value); }
		}
		  
		[XmlAttribute("ShowInNavBar")]
		[Bindable(true)]
		public bool? ShowInNavBar 
		{
			get { return GetColumnValue<bool?>(Columns.ShowInNavBar); }
			set { SetColumnValue(Columns.ShowInNavBar, value); }
		}
		  
		[XmlAttribute("ShowInTreeNavBar")]
		[Bindable(true)]
		public bool? ShowInTreeNavBar 
		{
			get { return GetColumnValue<bool?>(Columns.ShowInTreeNavBar); }
			set { SetColumnValue(Columns.ShowInTreeNavBar, value); }
		}
		  
		[XmlAttribute("SoloAdministrador")]
		[Bindable(true)]
		public bool? SoloAdministrador 
		{
			get { return GetColumnValue<bool?>(Columns.SoloAdministrador); }
			set { SetColumnValue(Columns.SoloAdministrador, value); }
		}
		  
		[XmlAttribute("HeredaPadre")]
		[Bindable(true)]
		public bool? HeredaPadre 
		{
			get { return GetColumnValue<bool?>(Columns.HeredaPadre); }
			set { SetColumnValue(Columns.HeredaPadre, value); }
		}
		  
		[XmlAttribute("HiddenOption")]
		[Bindable(true)]
		public bool? HiddenOption 
		{
			get { return GetColumnValue<bool?>(Columns.HiddenOption); }
			set { SetColumnValue(Columns.HiddenOption, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public CamaraComercio.DataAccess.SRM.ModulosRolesCollection ModulosRolesRecords()
		{
			return new CamaraComercio.DataAccess.SRM.ModulosRolesCollection().Where(ModulosRoles.Columns.ModuloId, ModuloId).Load();
		}
		#endregion
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varModuloPadreId,string varNombre,string varNombreEtiqueta,string varTag,int? varOrden,bool? varCreateSerparator,byte[] varIcon,bool? varShowInNavBar,bool? varShowInTreeNavBar,bool? varSoloAdministrador,bool? varHeredaPadre,bool? varHiddenOption)
		{
			Modulos item = new Modulos();
			
			item.ModuloPadreId = varModuloPadreId;
			
			item.Nombre = varNombre;
			
			item.NombreEtiqueta = varNombreEtiqueta;
			
			item.Tag = varTag;
			
			item.Orden = varOrden;
			
			item.CreateSerparator = varCreateSerparator;
			
			item.Icon = varIcon;
			
			item.ShowInNavBar = varShowInNavBar;
			
			item.ShowInTreeNavBar = varShowInTreeNavBar;
			
			item.SoloAdministrador = varSoloAdministrador;
			
			item.HeredaPadre = varHeredaPadre;
			
			item.HiddenOption = varHiddenOption;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varModuloId,int? varModuloPadreId,string varNombre,string varNombreEtiqueta,string varTag,int? varOrden,bool? varCreateSerparator,byte[] varIcon,bool? varShowInNavBar,bool? varShowInTreeNavBar,bool? varSoloAdministrador,bool? varHeredaPadre,bool? varHiddenOption)
		{
			Modulos item = new Modulos();
			
				item.ModuloId = varModuloId;
			
				item.ModuloPadreId = varModuloPadreId;
			
				item.Nombre = varNombre;
			
				item.NombreEtiqueta = varNombreEtiqueta;
			
				item.Tag = varTag;
			
				item.Orden = varOrden;
			
				item.CreateSerparator = varCreateSerparator;
			
				item.Icon = varIcon;
			
				item.ShowInNavBar = varShowInNavBar;
			
				item.ShowInTreeNavBar = varShowInTreeNavBar;
			
				item.SoloAdministrador = varSoloAdministrador;
			
				item.HeredaPadre = varHeredaPadre;
			
				item.HiddenOption = varHiddenOption;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ModuloIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ModuloPadreIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn NombreColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn NombreEtiquetaColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn TagColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn OrdenColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn CreateSerparatorColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn IconColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ShowInNavBarColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ShowInTreeNavBarColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn SoloAdministradorColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn HeredaPadreColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn HiddenOptionColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string ModuloId = @"ModuloId";
			 public static string ModuloPadreId = @"ModuloPadreId";
			 public static string Nombre = @"Nombre";
			 public static string NombreEtiqueta = @"NombreEtiqueta";
			 public static string Tag = @"Tag";
			 public static string Orden = @"Orden";
			 public static string CreateSerparator = @"CreateSerparator";
			 public static string Icon = @"Icon";
			 public static string ShowInNavBar = @"ShowInNavBar";
			 public static string ShowInTreeNavBar = @"ShowInTreeNavBar";
			 public static string SoloAdministrador = @"SoloAdministrador";
			 public static string HeredaPadre = @"HeredaPadre";
			 public static string HiddenOption = @"HiddenOption";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
