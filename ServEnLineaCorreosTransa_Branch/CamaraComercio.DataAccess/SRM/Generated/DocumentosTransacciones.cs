using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace CamaraComercio.DataAccess.SRM
{
	/// <summary>
	/// Strongly-typed collection for the DocumentosTransacciones class.
	/// </summary>
    [Serializable]
	public partial class DocumentosTransaccionesCollection : ActiveList<DocumentosTransacciones, DocumentosTransaccionesCollection>
	{	   
		public DocumentosTransaccionesCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>DocumentosTransaccionesCollection</returns>
		public DocumentosTransaccionesCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                DocumentosTransacciones o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the DocumentosTransacciones table.
	/// </summary>
	[Serializable]
	public partial class DocumentosTransacciones : ActiveRecord<DocumentosTransacciones>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public DocumentosTransacciones()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public DocumentosTransacciones(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public DocumentosTransacciones(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public DocumentosTransacciones(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("DocumentosTransacciones", TableType.Table, DataService.GetInstance("SrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"Transaccion";
				//columns
				
				TableSchema.TableColumn colvarDocumentoTransaccionId = new TableSchema.TableColumn(schema);
				colvarDocumentoTransaccionId.ColumnName = "DocumentoTransaccionId";
				colvarDocumentoTransaccionId.DataType = DbType.Int32;
				colvarDocumentoTransaccionId.MaxLength = 0;
				colvarDocumentoTransaccionId.AutoIncrement = true;
				colvarDocumentoTransaccionId.IsNullable = false;
				colvarDocumentoTransaccionId.IsPrimaryKey = true;
				colvarDocumentoTransaccionId.IsForeignKey = false;
				colvarDocumentoTransaccionId.IsReadOnly = false;
				colvarDocumentoTransaccionId.DefaultSetting = @"";
				colvarDocumentoTransaccionId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDocumentoTransaccionId);
				
				TableSchema.TableColumn colvarTransaccionId = new TableSchema.TableColumn(schema);
				colvarTransaccionId.ColumnName = "TransaccionId";
				colvarTransaccionId.DataType = DbType.Int32;
				colvarTransaccionId.MaxLength = 0;
				colvarTransaccionId.AutoIncrement = false;
				colvarTransaccionId.IsNullable = false;
				colvarTransaccionId.IsPrimaryKey = false;
				colvarTransaccionId.IsForeignKey = true;
				colvarTransaccionId.IsReadOnly = false;
				colvarTransaccionId.DefaultSetting = @"";
				
					colvarTransaccionId.ForeignKeyTableName = "Transacciones";
				schema.Columns.Add(colvarTransaccionId);
				
				TableSchema.TableColumn colvarSubTransaccionId = new TableSchema.TableColumn(schema);
				colvarSubTransaccionId.ColumnName = "SubTransaccionId";
				colvarSubTransaccionId.DataType = DbType.Int32;
				colvarSubTransaccionId.MaxLength = 0;
				colvarSubTransaccionId.AutoIncrement = false;
				colvarSubTransaccionId.IsNullable = true;
				colvarSubTransaccionId.IsPrimaryKey = false;
				colvarSubTransaccionId.IsForeignKey = false;
				colvarSubTransaccionId.IsReadOnly = false;
				colvarSubTransaccionId.DefaultSetting = @"";
				colvarSubTransaccionId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubTransaccionId);
				
				TableSchema.TableColumn colvarDocumentoId = new TableSchema.TableColumn(schema);
				colvarDocumentoId.ColumnName = "DocumentoId";
				colvarDocumentoId.DataType = DbType.Int32;
				colvarDocumentoId.MaxLength = 0;
				colvarDocumentoId.AutoIncrement = false;
				colvarDocumentoId.IsNullable = false;
				colvarDocumentoId.IsPrimaryKey = false;
				colvarDocumentoId.IsForeignKey = false;
				colvarDocumentoId.IsReadOnly = false;
				colvarDocumentoId.DefaultSetting = @"";
				colvarDocumentoId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDocumentoId);
				
				TableSchema.TableColumn colvarFechaDocumento = new TableSchema.TableColumn(schema);
				colvarFechaDocumento.ColumnName = "FechaDocumento";
				colvarFechaDocumento.DataType = DbType.DateTime;
				colvarFechaDocumento.MaxLength = 0;
				colvarFechaDocumento.AutoIncrement = false;
				colvarFechaDocumento.IsNullable = true;
				colvarFechaDocumento.IsPrimaryKey = false;
				colvarFechaDocumento.IsForeignKey = false;
				colvarFechaDocumento.IsReadOnly = false;
				colvarFechaDocumento.DefaultSetting = @"";
				colvarFechaDocumento.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFechaDocumento);
				
				TableSchema.TableColumn colvarNoDocumento = new TableSchema.TableColumn(schema);
				colvarNoDocumento.ColumnName = "NoDocumento";
				colvarNoDocumento.DataType = DbType.Int32;
				colvarNoDocumento.MaxLength = 0;
				colvarNoDocumento.AutoIncrement = false;
				colvarNoDocumento.IsNullable = true;
				colvarNoDocumento.IsPrimaryKey = false;
				colvarNoDocumento.IsForeignKey = false;
				colvarNoDocumento.IsReadOnly = false;
				colvarNoDocumento.DefaultSetting = @"";
				colvarNoDocumento.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNoDocumento);
				
				TableSchema.TableColumn colvarNoOriginales = new TableSchema.TableColumn(schema);
				colvarNoOriginales.ColumnName = "NoOriginales";
				colvarNoOriginales.DataType = DbType.Int32;
				colvarNoOriginales.MaxLength = 0;
				colvarNoOriginales.AutoIncrement = false;
				colvarNoOriginales.IsNullable = false;
				colvarNoOriginales.IsPrimaryKey = false;
				colvarNoOriginales.IsForeignKey = false;
				colvarNoOriginales.IsReadOnly = false;
				colvarNoOriginales.DefaultSetting = @"";
				colvarNoOriginales.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNoOriginales);
				
				TableSchema.TableColumn colvarNoCopias = new TableSchema.TableColumn(schema);
				colvarNoCopias.ColumnName = "NoCopias";
				colvarNoCopias.DataType = DbType.Int32;
				colvarNoCopias.MaxLength = 0;
				colvarNoCopias.AutoIncrement = false;
				colvarNoCopias.IsNullable = false;
				colvarNoCopias.IsPrimaryKey = false;
				colvarNoCopias.IsForeignKey = false;
				colvarNoCopias.IsReadOnly = false;
				colvarNoCopias.DefaultSetting = @"";
				colvarNoCopias.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNoCopias);
				
				TableSchema.TableColumn colvarLibro = new TableSchema.TableColumn(schema);
				colvarLibro.ColumnName = "Libro";
				colvarLibro.DataType = DbType.Int32;
				colvarLibro.MaxLength = 0;
				colvarLibro.AutoIncrement = false;
				colvarLibro.IsNullable = true;
				colvarLibro.IsPrimaryKey = false;
				colvarLibro.IsForeignKey = false;
				colvarLibro.IsReadOnly = false;
				colvarLibro.DefaultSetting = @"";
				colvarLibro.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLibro);
				
				TableSchema.TableColumn colvarFolio = new TableSchema.TableColumn(schema);
				colvarFolio.ColumnName = "Folio";
				colvarFolio.DataType = DbType.Int32;
				colvarFolio.MaxLength = 0;
				colvarFolio.AutoIncrement = false;
				colvarFolio.IsNullable = true;
				colvarFolio.IsPrimaryKey = false;
				colvarFolio.IsForeignKey = false;
				colvarFolio.IsReadOnly = false;
				colvarFolio.DefaultSetting = @"";
				colvarFolio.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFolio);
				
				TableSchema.TableColumn colvarComentario = new TableSchema.TableColumn(schema);
				colvarComentario.ColumnName = "Comentario";
				colvarComentario.DataType = DbType.String;
				colvarComentario.MaxLength = 1000;
				colvarComentario.AutoIncrement = false;
				colvarComentario.IsNullable = true;
				colvarComentario.IsPrimaryKey = false;
				colvarComentario.IsForeignKey = false;
				colvarComentario.IsReadOnly = false;
				colvarComentario.DefaultSetting = @"";
				colvarComentario.ForeignKeyTableName = "";
				schema.Columns.Add(colvarComentario);
				
				TableSchema.TableColumn colvarAlertaPago = new TableSchema.TableColumn(schema);
				colvarAlertaPago.ColumnName = "AlertaPago";
				colvarAlertaPago.DataType = DbType.Boolean;
				colvarAlertaPago.MaxLength = 0;
				colvarAlertaPago.AutoIncrement = false;
				colvarAlertaPago.IsNullable = true;
				colvarAlertaPago.IsPrimaryKey = false;
				colvarAlertaPago.IsForeignKey = false;
				colvarAlertaPago.IsReadOnly = false;
				colvarAlertaPago.DefaultSetting = @"";
				colvarAlertaPago.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAlertaPago);
				
				TableSchema.TableColumn colvarCheckValidated = new TableSchema.TableColumn(schema);
				colvarCheckValidated.ColumnName = "CheckValidated";
				colvarCheckValidated.DataType = DbType.Boolean;
				colvarCheckValidated.MaxLength = 0;
				colvarCheckValidated.AutoIncrement = false;
				colvarCheckValidated.IsNullable = false;
				colvarCheckValidated.IsPrimaryKey = false;
				colvarCheckValidated.IsForeignKey = false;
				colvarCheckValidated.IsReadOnly = false;
				
						colvarCheckValidated.DefaultSetting = @"((0))";
				colvarCheckValidated.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCheckValidated);
				
				TableSchema.TableColumn colvarDeleted = new TableSchema.TableColumn(schema);
				colvarDeleted.ColumnName = "Deleted";
				colvarDeleted.DataType = DbType.Boolean;
				colvarDeleted.MaxLength = 0;
				colvarDeleted.AutoIncrement = false;
				colvarDeleted.IsNullable = false;
				colvarDeleted.IsPrimaryKey = false;
				colvarDeleted.IsForeignKey = false;
				colvarDeleted.IsReadOnly = false;
				
						colvarDeleted.DefaultSetting = @"((0))";
				colvarDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeleted);
				
				TableSchema.TableColumn colvarNumeroPaginas = new TableSchema.TableColumn(schema);
				colvarNumeroPaginas.ColumnName = "NumeroPaginas";
				colvarNumeroPaginas.DataType = DbType.Int32;
				colvarNumeroPaginas.MaxLength = 0;
				colvarNumeroPaginas.AutoIncrement = false;
				colvarNumeroPaginas.IsNullable = true;
				colvarNumeroPaginas.IsPrimaryKey = false;
				colvarNumeroPaginas.IsForeignKey = false;
				colvarNumeroPaginas.IsReadOnly = false;
				colvarNumeroPaginas.DefaultSetting = @"";
				colvarNumeroPaginas.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNumeroPaginas);
				
				TableSchema.TableColumn colvarDigitalizado = new TableSchema.TableColumn(schema);
				colvarDigitalizado.ColumnName = "Digitalizado";
				colvarDigitalizado.DataType = DbType.Boolean;
				colvarDigitalizado.MaxLength = 0;
				colvarDigitalizado.AutoIncrement = false;
				colvarDigitalizado.IsNullable = true;
				colvarDigitalizado.IsPrimaryKey = false;
				colvarDigitalizado.IsForeignKey = false;
				colvarDigitalizado.IsReadOnly = false;
				colvarDigitalizado.DefaultSetting = @"";
				colvarDigitalizado.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDigitalizado);
				
				TableSchema.TableColumn colvarFechaDigitalizacion = new TableSchema.TableColumn(schema);
				colvarFechaDigitalizacion.ColumnName = "FechaDigitalizacion";
				colvarFechaDigitalizacion.DataType = DbType.DateTime;
				colvarFechaDigitalizacion.MaxLength = 0;
				colvarFechaDigitalizacion.AutoIncrement = false;
				colvarFechaDigitalizacion.IsNullable = true;
				colvarFechaDigitalizacion.IsPrimaryKey = false;
				colvarFechaDigitalizacion.IsForeignKey = false;
				colvarFechaDigitalizacion.IsReadOnly = false;
				colvarFechaDigitalizacion.DefaultSetting = @"";
				colvarFechaDigitalizacion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFechaDigitalizacion);
				
				TableSchema.TableColumn colvarAnalizado = new TableSchema.TableColumn(schema);
				colvarAnalizado.ColumnName = "Analizado";
				colvarAnalizado.DataType = DbType.Boolean;
				colvarAnalizado.MaxLength = 0;
				colvarAnalizado.AutoIncrement = false;
				colvarAnalizado.IsNullable = true;
				colvarAnalizado.IsPrimaryKey = false;
				colvarAnalizado.IsForeignKey = false;
				colvarAnalizado.IsReadOnly = false;
				colvarAnalizado.DefaultSetting = @"";
				colvarAnalizado.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAnalizado);
				
				TableSchema.TableColumn colvarSufijo = new TableSchema.TableColumn(schema);
				colvarSufijo.ColumnName = "Sufijo";
				colvarSufijo.DataType = DbType.AnsiString;
				colvarSufijo.MaxLength = 7;
				colvarSufijo.AutoIncrement = false;
				colvarSufijo.IsNullable = true;
				colvarSufijo.IsPrimaryKey = false;
				colvarSufijo.IsForeignKey = false;
				colvarSufijo.IsReadOnly = false;
				colvarSufijo.DefaultSetting = @"";
				colvarSufijo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSufijo);
				
				TableSchema.TableColumn colvarFechaModificacion = new TableSchema.TableColumn(schema);
				colvarFechaModificacion.ColumnName = "FechaModificacion";
				colvarFechaModificacion.DataType = DbType.DateTime;
				colvarFechaModificacion.MaxLength = 0;
				colvarFechaModificacion.AutoIncrement = false;
				colvarFechaModificacion.IsNullable = false;
				colvarFechaModificacion.IsPrimaryKey = false;
				colvarFechaModificacion.IsForeignKey = false;
				colvarFechaModificacion.IsReadOnly = false;
				
						colvarFechaModificacion.DefaultSetting = @"(getdate())";
				colvarFechaModificacion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFechaModificacion);
				
				TableSchema.TableColumn colvarRowguid = new TableSchema.TableColumn(schema);
				colvarRowguid.ColumnName = "rowguid";
				colvarRowguid.DataType = DbType.Guid;
				colvarRowguid.MaxLength = 0;
				colvarRowguid.AutoIncrement = false;
				colvarRowguid.IsNullable = false;
				colvarRowguid.IsPrimaryKey = false;
				colvarRowguid.IsForeignKey = false;
				colvarRowguid.IsReadOnly = false;
				
						colvarRowguid.DefaultSetting = @"(newid())";
				colvarRowguid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRowguid);
				
				TableSchema.TableColumn colvarDocumento = new TableSchema.TableColumn(schema);
				colvarDocumento.ColumnName = "Documento";
				colvarDocumento.DataType = DbType.String;
				colvarDocumento.MaxLength = 150;
				colvarDocumento.AutoIncrement = false;
				colvarDocumento.IsNullable = true;
				colvarDocumento.IsPrimaryKey = false;
				colvarDocumento.IsForeignKey = false;
				colvarDocumento.IsReadOnly = false;
				colvarDocumento.DefaultSetting = @"";
				colvarDocumento.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDocumento);
				
				TableSchema.TableColumn colvarRegistrable = new TableSchema.TableColumn(schema);
				colvarRegistrable.ColumnName = "Registrable";
				colvarRegistrable.DataType = DbType.Boolean;
				colvarRegistrable.MaxLength = 0;
				colvarRegistrable.AutoIncrement = false;
				colvarRegistrable.IsNullable = true;
				colvarRegistrable.IsPrimaryKey = false;
				colvarRegistrable.IsForeignKey = false;
				colvarRegistrable.IsReadOnly = false;
				
						colvarRegistrable.DefaultSetting = @"((0))";
				colvarRegistrable.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegistrable);
				
				TableSchema.TableColumn colvarCostoOriginal = new TableSchema.TableColumn(schema);
				colvarCostoOriginal.ColumnName = "CostoOriginal";
				colvarCostoOriginal.DataType = DbType.Currency;
				colvarCostoOriginal.MaxLength = 0;
				colvarCostoOriginal.AutoIncrement = false;
				colvarCostoOriginal.IsNullable = true;
				colvarCostoOriginal.IsPrimaryKey = false;
				colvarCostoOriginal.IsForeignKey = false;
				colvarCostoOriginal.IsReadOnly = false;
				colvarCostoOriginal.DefaultSetting = @"";
				colvarCostoOriginal.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCostoOriginal);
				
				TableSchema.TableColumn colvarCostoCopia = new TableSchema.TableColumn(schema);
				colvarCostoCopia.ColumnName = "CostoCopia";
				colvarCostoCopia.DataType = DbType.Currency;
				colvarCostoCopia.MaxLength = 0;
				colvarCostoCopia.AutoIncrement = false;
				colvarCostoCopia.IsNullable = true;
				colvarCostoCopia.IsPrimaryKey = false;
				colvarCostoCopia.IsForeignKey = false;
				colvarCostoCopia.IsReadOnly = false;
				colvarCostoCopia.DefaultSetting = @"";
				colvarCostoCopia.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCostoCopia);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["SrmProvider"].AddSchema("DocumentosTransacciones",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("DocumentoTransaccionId")]
		[Bindable(true)]
		public int DocumentoTransaccionId 
		{
			get { return GetColumnValue<int>(Columns.DocumentoTransaccionId); }
			set { SetColumnValue(Columns.DocumentoTransaccionId, value); }
		}
		  
		[XmlAttribute("TransaccionId")]
		[Bindable(true)]
		public int TransaccionId 
		{
			get { return GetColumnValue<int>(Columns.TransaccionId); }
			set { SetColumnValue(Columns.TransaccionId, value); }
		}
		  
		[XmlAttribute("SubTransaccionId")]
		[Bindable(true)]
		public int? SubTransaccionId 
		{
			get { return GetColumnValue<int?>(Columns.SubTransaccionId); }
			set { SetColumnValue(Columns.SubTransaccionId, value); }
		}
		  
		[XmlAttribute("DocumentoId")]
		[Bindable(true)]
		public int DocumentoId 
		{
			get { return GetColumnValue<int>(Columns.DocumentoId); }
			set { SetColumnValue(Columns.DocumentoId, value); }
		}
		  
		[XmlAttribute("FechaDocumento")]
		[Bindable(true)]
		public DateTime? FechaDocumento 
		{
			get { return GetColumnValue<DateTime?>(Columns.FechaDocumento); }
			set { SetColumnValue(Columns.FechaDocumento, value); }
		}
		  
		[XmlAttribute("NoDocumento")]
		[Bindable(true)]
		public int? NoDocumento 
		{
			get { return GetColumnValue<int?>(Columns.NoDocumento); }
			set { SetColumnValue(Columns.NoDocumento, value); }
		}
		  
		[XmlAttribute("NoOriginales")]
		[Bindable(true)]
		public int NoOriginales 
		{
			get { return GetColumnValue<int>(Columns.NoOriginales); }
			set { SetColumnValue(Columns.NoOriginales, value); }
		}
		  
		[XmlAttribute("NoCopias")]
		[Bindable(true)]
		public int NoCopias 
		{
			get { return GetColumnValue<int>(Columns.NoCopias); }
			set { SetColumnValue(Columns.NoCopias, value); }
		}
		  
		[XmlAttribute("Libro")]
		[Bindable(true)]
		public int? Libro 
		{
			get { return GetColumnValue<int?>(Columns.Libro); }
			set { SetColumnValue(Columns.Libro, value); }
		}
		  
		[XmlAttribute("Folio")]
		[Bindable(true)]
		public int? Folio 
		{
			get { return GetColumnValue<int?>(Columns.Folio); }
			set { SetColumnValue(Columns.Folio, value); }
		}
		  
		[XmlAttribute("Comentario")]
		[Bindable(true)]
		public string Comentario 
		{
			get { return GetColumnValue<string>(Columns.Comentario); }
			set { SetColumnValue(Columns.Comentario, value); }
		}
		  
		[XmlAttribute("AlertaPago")]
		[Bindable(true)]
		public bool? AlertaPago 
		{
			get { return GetColumnValue<bool?>(Columns.AlertaPago); }
			set { SetColumnValue(Columns.AlertaPago, value); }
		}
		  
		[XmlAttribute("CheckValidated")]
		[Bindable(true)]
		public bool CheckValidated 
		{
			get { return GetColumnValue<bool>(Columns.CheckValidated); }
			set { SetColumnValue(Columns.CheckValidated, value); }
		}
		  
		[XmlAttribute("Deleted")]
		[Bindable(true)]
		public bool Deleted 
		{
			get { return GetColumnValue<bool>(Columns.Deleted); }
			set { SetColumnValue(Columns.Deleted, value); }
		}
		  
		[XmlAttribute("NumeroPaginas")]
		[Bindable(true)]
		public int? NumeroPaginas 
		{
			get { return GetColumnValue<int?>(Columns.NumeroPaginas); }
			set { SetColumnValue(Columns.NumeroPaginas, value); }
		}
		  
		[XmlAttribute("Digitalizado")]
		[Bindable(true)]
		public bool? Digitalizado 
		{
			get { return GetColumnValue<bool?>(Columns.Digitalizado); }
			set { SetColumnValue(Columns.Digitalizado, value); }
		}
		  
		[XmlAttribute("FechaDigitalizacion")]
		[Bindable(true)]
		public DateTime? FechaDigitalizacion 
		{
			get { return GetColumnValue<DateTime?>(Columns.FechaDigitalizacion); }
			set { SetColumnValue(Columns.FechaDigitalizacion, value); }
		}
		  
		[XmlAttribute("Analizado")]
		[Bindable(true)]
		public bool? Analizado 
		{
			get { return GetColumnValue<bool?>(Columns.Analizado); }
			set { SetColumnValue(Columns.Analizado, value); }
		}
		  
		[XmlAttribute("Sufijo")]
		[Bindable(true)]
		public string Sufijo 
		{
			get { return GetColumnValue<string>(Columns.Sufijo); }
			set { SetColumnValue(Columns.Sufijo, value); }
		}
		  
		[XmlAttribute("FechaModificacion")]
		[Bindable(true)]
		public DateTime FechaModificacion 
		{
			get { return GetColumnValue<DateTime>(Columns.FechaModificacion); }
			set { SetColumnValue(Columns.FechaModificacion, value); }
		}
		  
		[XmlAttribute("Rowguid")]
		[Bindable(true)]
		public Guid Rowguid 
		{
			get { return GetColumnValue<Guid>(Columns.Rowguid); }
			set { SetColumnValue(Columns.Rowguid, value); }
		}
		  
		[XmlAttribute("Documento")]
		[Bindable(true)]
		public string Documento 
		{
			get { return GetColumnValue<string>(Columns.Documento); }
			set { SetColumnValue(Columns.Documento, value); }
		}
		  
		[XmlAttribute("Registrable")]
		[Bindable(true)]
		public bool? Registrable 
		{
			get { return GetColumnValue<bool?>(Columns.Registrable); }
			set { SetColumnValue(Columns.Registrable, value); }
		}
		  
		[XmlAttribute("CostoOriginal")]
		[Bindable(true)]
		public decimal? CostoOriginal 
		{
			get { return GetColumnValue<decimal?>(Columns.CostoOriginal); }
			set { SetColumnValue(Columns.CostoOriginal, value); }
		}
		  
		[XmlAttribute("CostoCopia")]
		[Bindable(true)]
		public decimal? CostoCopia 
		{
			get { return GetColumnValue<decimal?>(Columns.CostoCopia); }
			set { SetColumnValue(Columns.CostoCopia, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a Transacciones ActiveRecord object related to this DocumentosTransacciones
		/// 
		/// </summary>
		public CamaraComercio.DataAccess.SRM.Transacciones Transacciones
		{
			get { return CamaraComercio.DataAccess.SRM.Transacciones.FetchByID(this.TransaccionId); }
			set { SetColumnValue("TransaccionId", value.TransaccionId); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varTransaccionId,int? varSubTransaccionId,int varDocumentoId,DateTime? varFechaDocumento,int? varNoDocumento,int varNoOriginales,int varNoCopias,int? varLibro,int? varFolio,string varComentario,bool? varAlertaPago,bool varCheckValidated,bool varDeleted,int? varNumeroPaginas,bool? varDigitalizado,DateTime? varFechaDigitalizacion,bool? varAnalizado,string varSufijo,DateTime varFechaModificacion,Guid varRowguid,string varDocumento,bool? varRegistrable,decimal? varCostoOriginal,decimal? varCostoCopia)
		{
			DocumentosTransacciones item = new DocumentosTransacciones();
			
			item.TransaccionId = varTransaccionId;
			
			item.SubTransaccionId = varSubTransaccionId;
			
			item.DocumentoId = varDocumentoId;
			
			item.FechaDocumento = varFechaDocumento;
			
			item.NoDocumento = varNoDocumento;
			
			item.NoOriginales = varNoOriginales;
			
			item.NoCopias = varNoCopias;
			
			item.Libro = varLibro;
			
			item.Folio = varFolio;
			
			item.Comentario = varComentario;
			
			item.AlertaPago = varAlertaPago;
			
			item.CheckValidated = varCheckValidated;
			
			item.Deleted = varDeleted;
			
			item.NumeroPaginas = varNumeroPaginas;
			
			item.Digitalizado = varDigitalizado;
			
			item.FechaDigitalizacion = varFechaDigitalizacion;
			
			item.Analizado = varAnalizado;
			
			item.Sufijo = varSufijo;
			
			item.FechaModificacion = varFechaModificacion;
			
			item.Rowguid = varRowguid;
			
			item.Documento = varDocumento;
			
			item.Registrable = varRegistrable;
			
			item.CostoOriginal = varCostoOriginal;
			
			item.CostoCopia = varCostoCopia;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varDocumentoTransaccionId,int varTransaccionId,int? varSubTransaccionId,int varDocumentoId,DateTime? varFechaDocumento,int? varNoDocumento,int varNoOriginales,int varNoCopias,int? varLibro,int? varFolio,string varComentario,bool? varAlertaPago,bool varCheckValidated,bool varDeleted,int? varNumeroPaginas,bool? varDigitalizado,DateTime? varFechaDigitalizacion,bool? varAnalizado,string varSufijo,DateTime varFechaModificacion,Guid varRowguid,string varDocumento,bool? varRegistrable,decimal? varCostoOriginal,decimal? varCostoCopia)
		{
			DocumentosTransacciones item = new DocumentosTransacciones();
			
				item.DocumentoTransaccionId = varDocumentoTransaccionId;
			
				item.TransaccionId = varTransaccionId;
			
				item.SubTransaccionId = varSubTransaccionId;
			
				item.DocumentoId = varDocumentoId;
			
				item.FechaDocumento = varFechaDocumento;
			
				item.NoDocumento = varNoDocumento;
			
				item.NoOriginales = varNoOriginales;
			
				item.NoCopias = varNoCopias;
			
				item.Libro = varLibro;
			
				item.Folio = varFolio;
			
				item.Comentario = varComentario;
			
				item.AlertaPago = varAlertaPago;
			
				item.CheckValidated = varCheckValidated;
			
				item.Deleted = varDeleted;
			
				item.NumeroPaginas = varNumeroPaginas;
			
				item.Digitalizado = varDigitalizado;
			
				item.FechaDigitalizacion = varFechaDigitalizacion;
			
				item.Analizado = varAnalizado;
			
				item.Sufijo = varSufijo;
			
				item.FechaModificacion = varFechaModificacion;
			
				item.Rowguid = varRowguid;
			
				item.Documento = varDocumento;
			
				item.Registrable = varRegistrable;
			
				item.CostoOriginal = varCostoOriginal;
			
				item.CostoCopia = varCostoCopia;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn DocumentoTransaccionIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn TransaccionIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn SubTransaccionIdColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn DocumentoIdColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn FechaDocumentoColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn NoDocumentoColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn NoOriginalesColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn NoCopiasColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn LibroColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn FolioColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn ComentarioColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn AlertaPagoColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn CheckValidatedColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn DeletedColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn NumeroPaginasColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn DigitalizadoColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn FechaDigitalizacionColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn AnalizadoColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn SufijoColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn FechaModificacionColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn RowguidColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn DocumentoColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn RegistrableColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn CostoOriginalColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn CostoCopiaColumn
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string DocumentoTransaccionId = @"DocumentoTransaccionId";
			 public static string TransaccionId = @"TransaccionId";
			 public static string SubTransaccionId = @"SubTransaccionId";
			 public static string DocumentoId = @"DocumentoId";
			 public static string FechaDocumento = @"FechaDocumento";
			 public static string NoDocumento = @"NoDocumento";
			 public static string NoOriginales = @"NoOriginales";
			 public static string NoCopias = @"NoCopias";
			 public static string Libro = @"Libro";
			 public static string Folio = @"Folio";
			 public static string Comentario = @"Comentario";
			 public static string AlertaPago = @"AlertaPago";
			 public static string CheckValidated = @"CheckValidated";
			 public static string Deleted = @"Deleted";
			 public static string NumeroPaginas = @"NumeroPaginas";
			 public static string Digitalizado = @"Digitalizado";
			 public static string FechaDigitalizacion = @"FechaDigitalizacion";
			 public static string Analizado = @"Analizado";
			 public static string Sufijo = @"Sufijo";
			 public static string FechaModificacion = @"FechaModificacion";
			 public static string Rowguid = @"rowguid";
			 public static string Documento = @"Documento";
			 public static string Registrable = @"Registrable";
			 public static string CostoOriginal = @"CostoOriginal";
			 public static string CostoCopia = @"CostoCopia";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
