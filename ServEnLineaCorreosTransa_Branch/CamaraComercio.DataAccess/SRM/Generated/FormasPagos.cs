using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace CamaraComercio.DataAccess.SRM
{
	/// <summary>
	/// Strongly-typed collection for the FormasPagos class.
	/// </summary>
    [Serializable]
	public partial class FormasPagosCollection : ActiveList<FormasPagos, FormasPagosCollection>
	{	   
		public FormasPagosCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>FormasPagosCollection</returns>
		public FormasPagosCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                FormasPagos o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the FormasPagos table.
	/// </summary>
	[Serializable]
	public partial class FormasPagos : ActiveRecord<FormasPagos>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public FormasPagos()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public FormasPagos(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public FormasPagos(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public FormasPagos(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("FormasPagos", TableType.Table, DataService.GetInstance("SrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"Transaccion";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "Id";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarFechaCuadre = new TableSchema.TableColumn(schema);
				colvarFechaCuadre.ColumnName = "FechaCuadre";
				colvarFechaCuadre.DataType = DbType.AnsiString;
				colvarFechaCuadre.MaxLength = 0;
				colvarFechaCuadre.AutoIncrement = false;
				colvarFechaCuadre.IsNullable = false;
				colvarFechaCuadre.IsPrimaryKey = false;
				colvarFechaCuadre.IsForeignKey = false;
				colvarFechaCuadre.IsReadOnly = false;
				colvarFechaCuadre.DefaultSetting = @"";
				colvarFechaCuadre.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFechaCuadre);
				
				TableSchema.TableColumn colvarFormaPago = new TableSchema.TableColumn(schema);
				colvarFormaPago.ColumnName = "FormaPago";
				colvarFormaPago.DataType = DbType.AnsiStringFixedLength;
				colvarFormaPago.MaxLength = 1;
				colvarFormaPago.AutoIncrement = false;
				colvarFormaPago.IsNullable = false;
				colvarFormaPago.IsPrimaryKey = false;
				colvarFormaPago.IsForeignKey = false;
				colvarFormaPago.IsReadOnly = false;
				colvarFormaPago.DefaultSetting = @"";
				colvarFormaPago.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFormaPago);
				
				TableSchema.TableColumn colvarValor = new TableSchema.TableColumn(schema);
				colvarValor.ColumnName = "Valor";
				colvarValor.DataType = DbType.Currency;
				colvarValor.MaxLength = 0;
				colvarValor.AutoIncrement = false;
				colvarValor.IsNullable = false;
				colvarValor.IsPrimaryKey = false;
				colvarValor.IsForeignKey = false;
				colvarValor.IsReadOnly = false;
				colvarValor.DefaultSetting = @"";
				colvarValor.ForeignKeyTableName = "";
				schema.Columns.Add(colvarValor);
				
				TableSchema.TableColumn colvarTasa = new TableSchema.TableColumn(schema);
				colvarTasa.ColumnName = "Tasa";
				colvarTasa.DataType = DbType.Currency;
				colvarTasa.MaxLength = 0;
				colvarTasa.AutoIncrement = false;
				colvarTasa.IsNullable = false;
				colvarTasa.IsPrimaryKey = false;
				colvarTasa.IsForeignKey = false;
				colvarTasa.IsReadOnly = false;
				colvarTasa.DefaultSetting = @"";
				colvarTasa.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTasa);
				
				TableSchema.TableColumn colvarReferencia = new TableSchema.TableColumn(schema);
				colvarReferencia.ColumnName = "Referencia";
				colvarReferencia.DataType = DbType.AnsiString;
				colvarReferencia.MaxLength = 150;
				colvarReferencia.AutoIncrement = false;
				colvarReferencia.IsNullable = false;
				colvarReferencia.IsPrimaryKey = false;
				colvarReferencia.IsForeignKey = false;
				colvarReferencia.IsReadOnly = false;
				colvarReferencia.DefaultSetting = @"";
				colvarReferencia.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReferencia);
				
				TableSchema.TableColumn colvarNoTarjeta = new TableSchema.TableColumn(schema);
				colvarNoTarjeta.ColumnName = "NoTarjeta";
				colvarNoTarjeta.DataType = DbType.AnsiString;
				colvarNoTarjeta.MaxLength = 50;
				colvarNoTarjeta.AutoIncrement = false;
				colvarNoTarjeta.IsNullable = false;
				colvarNoTarjeta.IsPrimaryKey = false;
				colvarNoTarjeta.IsForeignKey = false;
				colvarNoTarjeta.IsReadOnly = false;
				colvarNoTarjeta.DefaultSetting = @"";
				colvarNoTarjeta.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNoTarjeta);
				
				TableSchema.TableColumn colvarDivisa = new TableSchema.TableColumn(schema);
				colvarDivisa.ColumnName = "Divisa";
				colvarDivisa.DataType = DbType.Currency;
				colvarDivisa.MaxLength = 0;
				colvarDivisa.AutoIncrement = false;
				colvarDivisa.IsNullable = false;
				colvarDivisa.IsPrimaryKey = false;
				colvarDivisa.IsForeignKey = false;
				colvarDivisa.IsReadOnly = false;
				colvarDivisa.DefaultSetting = @"";
				colvarDivisa.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDivisa);
				
				TableSchema.TableColumn colvarValorEntregado = new TableSchema.TableColumn(schema);
				colvarValorEntregado.ColumnName = "ValorEntregado";
				colvarValorEntregado.DataType = DbType.Currency;
				colvarValorEntregado.MaxLength = 0;
				colvarValorEntregado.AutoIncrement = false;
				colvarValorEntregado.IsNullable = false;
				colvarValorEntregado.IsPrimaryKey = false;
				colvarValorEntregado.IsForeignKey = false;
				colvarValorEntregado.IsReadOnly = false;
				colvarValorEntregado.DefaultSetting = @"";
				colvarValorEntregado.ForeignKeyTableName = "";
				schema.Columns.Add(colvarValorEntregado);
				
				TableSchema.TableColumn colvarValorDevuelto = new TableSchema.TableColumn(schema);
				colvarValorDevuelto.ColumnName = "ValorDevuelto";
				colvarValorDevuelto.DataType = DbType.Currency;
				colvarValorDevuelto.MaxLength = 0;
				colvarValorDevuelto.AutoIncrement = false;
				colvarValorDevuelto.IsNullable = false;
				colvarValorDevuelto.IsPrimaryKey = false;
				colvarValorDevuelto.IsForeignKey = false;
				colvarValorDevuelto.IsReadOnly = false;
				colvarValorDevuelto.DefaultSetting = @"";
				colvarValorDevuelto.ForeignKeyTableName = "";
				schema.Columns.Add(colvarValorDevuelto);
				
				TableSchema.TableColumn colvarTransaccionId = new TableSchema.TableColumn(schema);
				colvarTransaccionId.ColumnName = "TransaccionId";
				colvarTransaccionId.DataType = DbType.Int32;
				colvarTransaccionId.MaxLength = 0;
				colvarTransaccionId.AutoIncrement = false;
				colvarTransaccionId.IsNullable = false;
				colvarTransaccionId.IsPrimaryKey = false;
				colvarTransaccionId.IsForeignKey = true;
				colvarTransaccionId.IsReadOnly = false;
				colvarTransaccionId.DefaultSetting = @"";
				
					colvarTransaccionId.ForeignKeyTableName = "Transacciones";
				schema.Columns.Add(colvarTransaccionId);
				
				TableSchema.TableColumn colvarNota = new TableSchema.TableColumn(schema);
				colvarNota.ColumnName = "Nota";
				colvarNota.DataType = DbType.String;
				colvarNota.MaxLength = -1;
				colvarNota.AutoIncrement = false;
				colvarNota.IsNullable = true;
				colvarNota.IsPrimaryKey = false;
				colvarNota.IsForeignKey = false;
				colvarNota.IsReadOnly = false;
				colvarNota.DefaultSetting = @"";
				colvarNota.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNota);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["SrmProvider"].AddSchema("FormasPagos",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("FechaCuadre")]
		[Bindable(true)]
		public string FechaCuadre 
		{
			get { return GetColumnValue<string>(Columns.FechaCuadre); }
			set { SetColumnValue(Columns.FechaCuadre, value); }
		}
		  
		[XmlAttribute("FormaPago")]
		[Bindable(true)]
		public string FormaPago 
		{
			get { return GetColumnValue<string>(Columns.FormaPago); }
			set { SetColumnValue(Columns.FormaPago, value); }
		}
		  
		[XmlAttribute("Valor")]
		[Bindable(true)]
		public decimal Valor 
		{
			get { return GetColumnValue<decimal>(Columns.Valor); }
			set { SetColumnValue(Columns.Valor, value); }
		}
		  
		[XmlAttribute("Tasa")]
		[Bindable(true)]
		public decimal Tasa 
		{
			get { return GetColumnValue<decimal>(Columns.Tasa); }
			set { SetColumnValue(Columns.Tasa, value); }
		}
		  
		[XmlAttribute("Referencia")]
		[Bindable(true)]
		public string Referencia 
		{
			get { return GetColumnValue<string>(Columns.Referencia); }
			set { SetColumnValue(Columns.Referencia, value); }
		}
		  
		[XmlAttribute("NoTarjeta")]
		[Bindable(true)]
		public string NoTarjeta 
		{
			get { return GetColumnValue<string>(Columns.NoTarjeta); }
			set { SetColumnValue(Columns.NoTarjeta, value); }
		}
		  
		[XmlAttribute("Divisa")]
		[Bindable(true)]
		public decimal Divisa 
		{
			get { return GetColumnValue<decimal>(Columns.Divisa); }
			set { SetColumnValue(Columns.Divisa, value); }
		}
		  
		[XmlAttribute("ValorEntregado")]
		[Bindable(true)]
		public decimal ValorEntregado 
		{
			get { return GetColumnValue<decimal>(Columns.ValorEntregado); }
			set { SetColumnValue(Columns.ValorEntregado, value); }
		}
		  
		[XmlAttribute("ValorDevuelto")]
		[Bindable(true)]
		public decimal ValorDevuelto 
		{
			get { return GetColumnValue<decimal>(Columns.ValorDevuelto); }
			set { SetColumnValue(Columns.ValorDevuelto, value); }
		}
		  
		[XmlAttribute("TransaccionId")]
		[Bindable(true)]
		public int TransaccionId 
		{
			get { return GetColumnValue<int>(Columns.TransaccionId); }
			set { SetColumnValue(Columns.TransaccionId, value); }
		}
		  
		[XmlAttribute("Nota")]
		[Bindable(true)]
		public string Nota 
		{
			get { return GetColumnValue<string>(Columns.Nota); }
			set { SetColumnValue(Columns.Nota, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a Transacciones ActiveRecord object related to this FormasPagos
		/// 
		/// </summary>
		public CamaraComercio.DataAccess.SRM.Transacciones Transacciones
		{
			get { return CamaraComercio.DataAccess.SRM.Transacciones.FetchByID(this.TransaccionId); }
			set { SetColumnValue("TransaccionId", value.TransaccionId); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varFechaCuadre,string varFormaPago,decimal varValor,decimal varTasa,string varReferencia,string varNoTarjeta,decimal varDivisa,decimal varValorEntregado,decimal varValorDevuelto,int varTransaccionId,string varNota)
		{
			FormasPagos item = new FormasPagos();
			
			item.FechaCuadre = varFechaCuadre;
			
			item.FormaPago = varFormaPago;
			
			item.Valor = varValor;
			
			item.Tasa = varTasa;
			
			item.Referencia = varReferencia;
			
			item.NoTarjeta = varNoTarjeta;
			
			item.Divisa = varDivisa;
			
			item.ValorEntregado = varValorEntregado;
			
			item.ValorDevuelto = varValorDevuelto;
			
			item.TransaccionId = varTransaccionId;
			
			item.Nota = varNota;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,string varFechaCuadre,string varFormaPago,decimal varValor,decimal varTasa,string varReferencia,string varNoTarjeta,decimal varDivisa,decimal varValorEntregado,decimal varValorDevuelto,int varTransaccionId,string varNota)
		{
			FormasPagos item = new FormasPagos();
			
				item.Id = varId;
			
				item.FechaCuadre = varFechaCuadre;
			
				item.FormaPago = varFormaPago;
			
				item.Valor = varValor;
			
				item.Tasa = varTasa;
			
				item.Referencia = varReferencia;
			
				item.NoTarjeta = varNoTarjeta;
			
				item.Divisa = varDivisa;
			
				item.ValorEntregado = varValorEntregado;
			
				item.ValorDevuelto = varValorDevuelto;
			
				item.TransaccionId = varTransaccionId;
			
				item.Nota = varNota;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn FechaCuadreColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn FormaPagoColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ValorColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn TasaColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ReferenciaColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn NoTarjetaColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn DivisaColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ValorEntregadoColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ValorDevueltoColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn TransaccionIdColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn NotaColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"Id";
			 public static string FechaCuadre = @"FechaCuadre";
			 public static string FormaPago = @"FormaPago";
			 public static string Valor = @"Valor";
			 public static string Tasa = @"Tasa";
			 public static string Referencia = @"Referencia";
			 public static string NoTarjeta = @"NoTarjeta";
			 public static string Divisa = @"Divisa";
			 public static string ValorEntregado = @"ValorEntregado";
			 public static string ValorDevuelto = @"ValorDevuelto";
			 public static string TransaccionId = @"TransaccionId";
			 public static string Nota = @"Nota";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
