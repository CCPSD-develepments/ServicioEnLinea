using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace CamaraComercio.DataAccess.SRM
{
	/// <summary>
	/// Strongly-typed collection for the Agenda class.
	/// </summary>
    [Serializable]
	public partial class AgendaCollection : ActiveList<Agenda, AgendaCollection>
	{	   
		public AgendaCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>AgendaCollection</returns>
		public AgendaCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Agenda o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Agenda table.
	/// </summary>
	[Serializable]
	public partial class Agenda : ActiveRecord<Agenda>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public Agenda()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public Agenda(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public Agenda(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public Agenda(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Agenda", TableType.Table, DataService.GetInstance("SrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"Scheduler";
				//columns
				
				TableSchema.TableColumn colvarAgendaId = new TableSchema.TableColumn(schema);
				colvarAgendaId.ColumnName = "AgendaId";
				colvarAgendaId.DataType = DbType.Int32;
				colvarAgendaId.MaxLength = 0;
				colvarAgendaId.AutoIncrement = true;
				colvarAgendaId.IsNullable = false;
				colvarAgendaId.IsPrimaryKey = true;
				colvarAgendaId.IsForeignKey = false;
				colvarAgendaId.IsReadOnly = false;
				colvarAgendaId.DefaultSetting = @"";
				colvarAgendaId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAgendaId);
				
				TableSchema.TableColumn colvarTipoTareaId = new TableSchema.TableColumn(schema);
				colvarTipoTareaId.ColumnName = "TipoTareaId";
				colvarTipoTareaId.DataType = DbType.Int32;
				colvarTipoTareaId.MaxLength = 0;
				colvarTipoTareaId.AutoIncrement = false;
				colvarTipoTareaId.IsNullable = false;
				colvarTipoTareaId.IsPrimaryKey = false;
				colvarTipoTareaId.IsForeignKey = true;
				colvarTipoTareaId.IsReadOnly = false;
				colvarTipoTareaId.DefaultSetting = @"";
				
					colvarTipoTareaId.ForeignKeyTableName = "TiposTareas";
				schema.Columns.Add(colvarTipoTareaId);
				
				TableSchema.TableColumn colvarFechaInicio = new TableSchema.TableColumn(schema);
				colvarFechaInicio.ColumnName = "FechaInicio";
				colvarFechaInicio.DataType = DbType.DateTime;
				colvarFechaInicio.MaxLength = 0;
				colvarFechaInicio.AutoIncrement = false;
				colvarFechaInicio.IsNullable = false;
				colvarFechaInicio.IsPrimaryKey = false;
				colvarFechaInicio.IsForeignKey = false;
				colvarFechaInicio.IsReadOnly = false;
				colvarFechaInicio.DefaultSetting = @"";
				colvarFechaInicio.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFechaInicio);
				
				TableSchema.TableColumn colvarFechaOcuInicial = new TableSchema.TableColumn(schema);
				colvarFechaOcuInicial.ColumnName = "FechaOcuInicial";
				colvarFechaOcuInicial.DataType = DbType.DateTime;
				colvarFechaOcuInicial.MaxLength = 0;
				colvarFechaOcuInicial.AutoIncrement = false;
				colvarFechaOcuInicial.IsNullable = true;
				colvarFechaOcuInicial.IsPrimaryKey = false;
				colvarFechaOcuInicial.IsForeignKey = false;
				colvarFechaOcuInicial.IsReadOnly = false;
				colvarFechaOcuInicial.DefaultSetting = @"";
				colvarFechaOcuInicial.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFechaOcuInicial);
				
				TableSchema.TableColumn colvarFechaOcuFinal = new TableSchema.TableColumn(schema);
				colvarFechaOcuFinal.ColumnName = "FechaOcuFinal";
				colvarFechaOcuFinal.DataType = DbType.DateTime;
				colvarFechaOcuFinal.MaxLength = 0;
				colvarFechaOcuFinal.AutoIncrement = false;
				colvarFechaOcuFinal.IsNullable = true;
				colvarFechaOcuFinal.IsPrimaryKey = false;
				colvarFechaOcuFinal.IsForeignKey = false;
				colvarFechaOcuFinal.IsReadOnly = false;
				colvarFechaOcuFinal.DefaultSetting = @"";
				colvarFechaOcuFinal.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFechaOcuFinal);
				
				TableSchema.TableColumn colvarEstatus = new TableSchema.TableColumn(schema);
				colvarEstatus.ColumnName = "Estatus";
				colvarEstatus.DataType = DbType.AnsiStringFixedLength;
				colvarEstatus.MaxLength = 1;
				colvarEstatus.AutoIncrement = false;
				colvarEstatus.IsNullable = false;
				colvarEstatus.IsPrimaryKey = false;
				colvarEstatus.IsForeignKey = false;
				colvarEstatus.IsReadOnly = false;
				colvarEstatus.DefaultSetting = @"";
				colvarEstatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEstatus);
				
				TableSchema.TableColumn colvarUltimaAlaarma = new TableSchema.TableColumn(schema);
				colvarUltimaAlaarma.ColumnName = "UltimaAlaarma";
				colvarUltimaAlaarma.DataType = DbType.DateTime;
				colvarUltimaAlaarma.MaxLength = 0;
				colvarUltimaAlaarma.AutoIncrement = false;
				colvarUltimaAlaarma.IsNullable = true;
				colvarUltimaAlaarma.IsPrimaryKey = false;
				colvarUltimaAlaarma.IsForeignKey = false;
				colvarUltimaAlaarma.IsReadOnly = false;
				colvarUltimaAlaarma.DefaultSetting = @"";
				colvarUltimaAlaarma.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUltimaAlaarma);
				
				TableSchema.TableColumn colvarTipoTarea = new TableSchema.TableColumn(schema);
				colvarTipoTarea.ColumnName = "TipoTarea";
				colvarTipoTarea.DataType = DbType.AnsiStringFixedLength;
				colvarTipoTarea.MaxLength = 1;
				colvarTipoTarea.AutoIncrement = false;
				colvarTipoTarea.IsNullable = true;
				colvarTipoTarea.IsPrimaryKey = false;
				colvarTipoTarea.IsForeignKey = false;
				colvarTipoTarea.IsReadOnly = false;
				colvarTipoTarea.DefaultSetting = @"";
				colvarTipoTarea.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTipoTarea);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["SrmProvider"].AddSchema("Agenda",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("AgendaId")]
		[Bindable(true)]
		public int AgendaId 
		{
			get { return GetColumnValue<int>(Columns.AgendaId); }
			set { SetColumnValue(Columns.AgendaId, value); }
		}
		  
		[XmlAttribute("TipoTareaId")]
		[Bindable(true)]
		public int TipoTareaId 
		{
			get { return GetColumnValue<int>(Columns.TipoTareaId); }
			set { SetColumnValue(Columns.TipoTareaId, value); }
		}
		  
		[XmlAttribute("FechaInicio")]
		[Bindable(true)]
		public DateTime FechaInicio 
		{
			get { return GetColumnValue<DateTime>(Columns.FechaInicio); }
			set { SetColumnValue(Columns.FechaInicio, value); }
		}
		  
		[XmlAttribute("FechaOcuInicial")]
		[Bindable(true)]
		public DateTime? FechaOcuInicial 
		{
			get { return GetColumnValue<DateTime?>(Columns.FechaOcuInicial); }
			set { SetColumnValue(Columns.FechaOcuInicial, value); }
		}
		  
		[XmlAttribute("FechaOcuFinal")]
		[Bindable(true)]
		public DateTime? FechaOcuFinal 
		{
			get { return GetColumnValue<DateTime?>(Columns.FechaOcuFinal); }
			set { SetColumnValue(Columns.FechaOcuFinal, value); }
		}
		  
		[XmlAttribute("Estatus")]
		[Bindable(true)]
		public string Estatus 
		{
			get { return GetColumnValue<string>(Columns.Estatus); }
			set { SetColumnValue(Columns.Estatus, value); }
		}
		  
		[XmlAttribute("UltimaAlaarma")]
		[Bindable(true)]
		public DateTime? UltimaAlaarma 
		{
			get { return GetColumnValue<DateTime?>(Columns.UltimaAlaarma); }
			set { SetColumnValue(Columns.UltimaAlaarma, value); }
		}
		  
		[XmlAttribute("TipoTarea")]
		[Bindable(true)]
		public string TipoTarea 
		{
			get { return GetColumnValue<string>(Columns.TipoTarea); }
			set { SetColumnValue(Columns.TipoTarea, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public CamaraComercio.DataAccess.SRM.AngendaTransaccionesCollection AngendaTransaccionesRecords()
		{
			return new CamaraComercio.DataAccess.SRM.AngendaTransaccionesCollection().Where(AngendaTransacciones.Columns.AgendaId, AgendaId).Load();
		}
		#endregion
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TiposTareas ActiveRecord object related to this Agenda
		/// 
		/// </summary>
		public CamaraComercio.DataAccess.SRM.TiposTareas TiposTareas
		{
			get { return CamaraComercio.DataAccess.SRM.TiposTareas.FetchByID(this.TipoTareaId); }
			set { SetColumnValue("TipoTareaId", value.TipoTareaId); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varTipoTareaId,DateTime varFechaInicio,DateTime? varFechaOcuInicial,DateTime? varFechaOcuFinal,string varEstatus,DateTime? varUltimaAlaarma,string varTipoTarea)
		{
			Agenda item = new Agenda();
			
			item.TipoTareaId = varTipoTareaId;
			
			item.FechaInicio = varFechaInicio;
			
			item.FechaOcuInicial = varFechaOcuInicial;
			
			item.FechaOcuFinal = varFechaOcuFinal;
			
			item.Estatus = varEstatus;
			
			item.UltimaAlaarma = varUltimaAlaarma;
			
			item.TipoTarea = varTipoTarea;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varAgendaId,int varTipoTareaId,DateTime varFechaInicio,DateTime? varFechaOcuInicial,DateTime? varFechaOcuFinal,string varEstatus,DateTime? varUltimaAlaarma,string varTipoTarea)
		{
			Agenda item = new Agenda();
			
				item.AgendaId = varAgendaId;
			
				item.TipoTareaId = varTipoTareaId;
			
				item.FechaInicio = varFechaInicio;
			
				item.FechaOcuInicial = varFechaOcuInicial;
			
				item.FechaOcuFinal = varFechaOcuFinal;
			
				item.Estatus = varEstatus;
			
				item.UltimaAlaarma = varUltimaAlaarma;
			
				item.TipoTarea = varTipoTarea;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn AgendaIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn TipoTareaIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn FechaInicioColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn FechaOcuInicialColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn FechaOcuFinalColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn EstatusColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn UltimaAlaarmaColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn TipoTareaColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string AgendaId = @"AgendaId";
			 public static string TipoTareaId = @"TipoTareaId";
			 public static string FechaInicio = @"FechaInicio";
			 public static string FechaOcuInicial = @"FechaOcuInicial";
			 public static string FechaOcuFinal = @"FechaOcuFinal";
			 public static string Estatus = @"Estatus";
			 public static string UltimaAlaarma = @"UltimaAlaarma";
			 public static string TipoTarea = @"TipoTarea";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
