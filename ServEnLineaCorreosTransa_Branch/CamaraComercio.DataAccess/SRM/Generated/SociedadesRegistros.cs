using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace CamaraComercio.DataAccess.SRM
{
	/// <summary>
	/// Strongly-typed collection for the SociedadesRegistros class.
	/// </summary>
    [Serializable]
	public partial class SociedadesRegistrosCollection : ActiveList<SociedadesRegistros, SociedadesRegistrosCollection>
	{	   
		public SociedadesRegistrosCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SociedadesRegistrosCollection</returns>
		public SociedadesRegistrosCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SociedadesRegistros o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the SociedadesRegistros table.
	/// </summary>
	[Serializable]
	public partial class SociedadesRegistros : ActiveRecord<SociedadesRegistros>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SociedadesRegistros()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SociedadesRegistros(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SociedadesRegistros(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SociedadesRegistros(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SociedadesRegistros", TableType.Table, DataService.GetInstance("SrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"Sociedad";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarSociedadId = new TableSchema.TableColumn(schema);
				colvarSociedadId.ColumnName = "SociedadId";
				colvarSociedadId.DataType = DbType.Int32;
				colvarSociedadId.MaxLength = 0;
				colvarSociedadId.AutoIncrement = false;
				colvarSociedadId.IsNullable = false;
				colvarSociedadId.IsPrimaryKey = false;
				colvarSociedadId.IsForeignKey = true;
				colvarSociedadId.IsReadOnly = false;
				colvarSociedadId.DefaultSetting = @"";
				
					colvarSociedadId.ForeignKeyTableName = "Sociedades";
				schema.Columns.Add(colvarSociedadId);
				
				TableSchema.TableColumn colvarRegistroId = new TableSchema.TableColumn(schema);
				colvarRegistroId.ColumnName = "RegistroId";
				colvarRegistroId.DataType = DbType.Int32;
				colvarRegistroId.MaxLength = 0;
				colvarRegistroId.AutoIncrement = false;
				colvarRegistroId.IsNullable = false;
				colvarRegistroId.IsPrimaryKey = false;
				colvarRegistroId.IsForeignKey = true;
				colvarRegistroId.IsReadOnly = false;
				colvarRegistroId.DefaultSetting = @"";
				
					colvarRegistroId.ForeignKeyTableName = "Registros";
				schema.Columns.Add(colvarRegistroId);
				
				TableSchema.TableColumn colvarNumeroRegistro = new TableSchema.TableColumn(schema);
				colvarNumeroRegistro.ColumnName = "NumeroRegistro";
				colvarNumeroRegistro.DataType = DbType.Int32;
				colvarNumeroRegistro.MaxLength = 0;
				colvarNumeroRegistro.AutoIncrement = false;
				colvarNumeroRegistro.IsNullable = true;
				colvarNumeroRegistro.IsPrimaryKey = false;
				colvarNumeroRegistro.IsForeignKey = false;
				colvarNumeroRegistro.IsReadOnly = false;
				colvarNumeroRegistro.DefaultSetting = @"";
				colvarNumeroRegistro.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNumeroRegistro);
				
				TableSchema.TableColumn colvarFechaModificacion = new TableSchema.TableColumn(schema);
				colvarFechaModificacion.ColumnName = "FechaModificacion";
				colvarFechaModificacion.DataType = DbType.DateTime;
				colvarFechaModificacion.MaxLength = 0;
				colvarFechaModificacion.AutoIncrement = false;
				colvarFechaModificacion.IsNullable = true;
				colvarFechaModificacion.IsPrimaryKey = false;
				colvarFechaModificacion.IsForeignKey = false;
				colvarFechaModificacion.IsReadOnly = false;
				colvarFechaModificacion.DefaultSetting = @"";
				colvarFechaModificacion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFechaModificacion);
				
				TableSchema.TableColumn colvarRowguid = new TableSchema.TableColumn(schema);
				colvarRowguid.ColumnName = "rowguid";
				colvarRowguid.DataType = DbType.Guid;
				colvarRowguid.MaxLength = 0;
				colvarRowguid.AutoIncrement = false;
				colvarRowguid.IsNullable = false;
				colvarRowguid.IsPrimaryKey = false;
				colvarRowguid.IsForeignKey = false;
				colvarRowguid.IsReadOnly = false;
				
						colvarRowguid.DefaultSetting = @"(newid())";
				colvarRowguid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRowguid);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["SrmProvider"].AddSchema("SociedadesRegistros",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("SociedadId")]
		[Bindable(true)]
		public int SociedadId 
		{
			get { return GetColumnValue<int>(Columns.SociedadId); }
			set { SetColumnValue(Columns.SociedadId, value); }
		}
		  
		[XmlAttribute("RegistroId")]
		[Bindable(true)]
		public int RegistroId 
		{
			get { return GetColumnValue<int>(Columns.RegistroId); }
			set { SetColumnValue(Columns.RegistroId, value); }
		}
		  
		[XmlAttribute("NumeroRegistro")]
		[Bindable(true)]
		public int? NumeroRegistro 
		{
			get { return GetColumnValue<int?>(Columns.NumeroRegistro); }
			set { SetColumnValue(Columns.NumeroRegistro, value); }
		}
		  
		[XmlAttribute("FechaModificacion")]
		[Bindable(true)]
		public DateTime? FechaModificacion 
		{
			get { return GetColumnValue<DateTime?>(Columns.FechaModificacion); }
			set { SetColumnValue(Columns.FechaModificacion, value); }
		}
		  
		[XmlAttribute("Rowguid")]
		[Bindable(true)]
		public Guid Rowguid 
		{
			get { return GetColumnValue<Guid>(Columns.Rowguid); }
			set { SetColumnValue(Columns.Rowguid, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a Registros ActiveRecord object related to this SociedadesRegistros
		/// 
		/// </summary>
		public CamaraComercio.DataAccess.SRM.Registros Registros
		{
			get { return CamaraComercio.DataAccess.SRM.Registros.FetchByID(this.RegistroId); }
			set { SetColumnValue("RegistroId", value.RegistroId); }
		}
		
		
		/// <summary>
		/// Returns a Sociedades ActiveRecord object related to this SociedadesRegistros
		/// 
		/// </summary>
		public CamaraComercio.DataAccess.SRM.Sociedades Sociedades
		{
			get { return CamaraComercio.DataAccess.SRM.Sociedades.FetchByID(this.SociedadId); }
			set { SetColumnValue("SociedadId", value.SociedadId); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varSociedadId,int varRegistroId,int? varNumeroRegistro,DateTime? varFechaModificacion,Guid varRowguid)
		{
			SociedadesRegistros item = new SociedadesRegistros();
			
			item.SociedadId = varSociedadId;
			
			item.RegistroId = varRegistroId;
			
			item.NumeroRegistro = varNumeroRegistro;
			
			item.FechaModificacion = varFechaModificacion;
			
			item.Rowguid = varRowguid;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,int varSociedadId,int varRegistroId,int? varNumeroRegistro,DateTime? varFechaModificacion,Guid varRowguid)
		{
			SociedadesRegistros item = new SociedadesRegistros();
			
				item.Id = varId;
			
				item.SociedadId = varSociedadId;
			
				item.RegistroId = varRegistroId;
			
				item.NumeroRegistro = varNumeroRegistro;
			
				item.FechaModificacion = varFechaModificacion;
			
				item.Rowguid = varRowguid;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn SociedadIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn RegistroIdColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn NumeroRegistroColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn FechaModificacionColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn RowguidColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string SociedadId = @"SociedadId";
			 public static string RegistroId = @"RegistroId";
			 public static string NumeroRegistro = @"NumeroRegistro";
			 public static string FechaModificacion = @"FechaModificacion";
			 public static string Rowguid = @"rowguid";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
