using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace CamaraComercio.DataAccess.SRM
{
	/// <summary>
	/// Strongly-typed collection for the TiposServicios class.
	/// </summary>
    [Serializable]
	public partial class TiposServiciosCollection : ActiveList<TiposServicios, TiposServiciosCollection>
	{	   
		public TiposServiciosCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TiposServiciosCollection</returns>
		public TiposServiciosCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TiposServicios o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TiposServicios table.
	/// </summary>
	[Serializable]
	public partial class TiposServicios : ActiveRecord<TiposServicios>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TiposServicios()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TiposServicios(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TiposServicios(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TiposServicios(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TiposServicios", TableType.Table, DataService.GetInstance("SrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"Transaccion";
				//columns
				
				TableSchema.TableColumn colvarTipoServicioId = new TableSchema.TableColumn(schema);
				colvarTipoServicioId.ColumnName = "TipoServicioId";
				colvarTipoServicioId.DataType = DbType.Int32;
				colvarTipoServicioId.MaxLength = 0;
				colvarTipoServicioId.AutoIncrement = true;
				colvarTipoServicioId.IsNullable = false;
				colvarTipoServicioId.IsPrimaryKey = true;
				colvarTipoServicioId.IsForeignKey = false;
				colvarTipoServicioId.IsReadOnly = false;
				colvarTipoServicioId.DefaultSetting = @"";
				colvarTipoServicioId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTipoServicioId);
				
				TableSchema.TableColumn colvarDescripcion = new TableSchema.TableColumn(schema);
				colvarDescripcion.ColumnName = "Descripcion";
				colvarDescripcion.DataType = DbType.AnsiString;
				colvarDescripcion.MaxLength = -1;
				colvarDescripcion.AutoIncrement = false;
				colvarDescripcion.IsNullable = false;
				colvarDescripcion.IsPrimaryKey = false;
				colvarDescripcion.IsForeignKey = false;
				colvarDescripcion.IsReadOnly = false;
				colvarDescripcion.DefaultSetting = @"";
				colvarDescripcion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescripcion);
				
				TableSchema.TableColumn colvarTipoTransaccionId = new TableSchema.TableColumn(schema);
				colvarTipoTransaccionId.ColumnName = "TipoTransaccionId";
				colvarTipoTransaccionId.DataType = DbType.Int32;
				colvarTipoTransaccionId.MaxLength = 0;
				colvarTipoTransaccionId.AutoIncrement = false;
				colvarTipoTransaccionId.IsNullable = true;
				colvarTipoTransaccionId.IsPrimaryKey = false;
				colvarTipoTransaccionId.IsForeignKey = true;
				colvarTipoTransaccionId.IsReadOnly = false;
				colvarTipoTransaccionId.DefaultSetting = @"";
				
					colvarTipoTransaccionId.ForeignKeyTableName = "TiposTransacciones";
				schema.Columns.Add(colvarTipoTransaccionId);
				
				TableSchema.TableColumn colvarCostoServicio = new TableSchema.TableColumn(schema);
				colvarCostoServicio.ColumnName = "CostoServicio";
				colvarCostoServicio.DataType = DbType.Currency;
				colvarCostoServicio.MaxLength = 0;
				colvarCostoServicio.AutoIncrement = false;
				colvarCostoServicio.IsNullable = false;
				colvarCostoServicio.IsPrimaryKey = false;
				colvarCostoServicio.IsForeignKey = false;
				colvarCostoServicio.IsReadOnly = false;
				
						colvarCostoServicio.DefaultSetting = @"((0))";
				colvarCostoServicio.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCostoServicio);
				
				TableSchema.TableColumn colvarCalculoBaseCapital = new TableSchema.TableColumn(schema);
				colvarCalculoBaseCapital.ColumnName = "CalculoBaseCapital";
				colvarCalculoBaseCapital.DataType = DbType.Boolean;
				colvarCalculoBaseCapital.MaxLength = 0;
				colvarCalculoBaseCapital.AutoIncrement = false;
				colvarCalculoBaseCapital.IsNullable = true;
				colvarCalculoBaseCapital.IsPrimaryKey = false;
				colvarCalculoBaseCapital.IsForeignKey = false;
				colvarCalculoBaseCapital.IsReadOnly = false;
				colvarCalculoBaseCapital.DefaultSetting = @"";
				colvarCalculoBaseCapital.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCalculoBaseCapital);
				
				TableSchema.TableColumn colvarTipoCalculoBaseCapital = new TableSchema.TableColumn(schema);
				colvarTipoCalculoBaseCapital.ColumnName = "TipoCalculoBaseCapital";
				colvarTipoCalculoBaseCapital.DataType = DbType.Int32;
				colvarTipoCalculoBaseCapital.MaxLength = 0;
				colvarTipoCalculoBaseCapital.AutoIncrement = false;
				colvarTipoCalculoBaseCapital.IsNullable = true;
				colvarTipoCalculoBaseCapital.IsPrimaryKey = false;
				colvarTipoCalculoBaseCapital.IsForeignKey = false;
				colvarTipoCalculoBaseCapital.IsReadOnly = false;
				colvarTipoCalculoBaseCapital.DefaultSetting = @"";
				colvarTipoCalculoBaseCapital.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTipoCalculoBaseCapital);
				
				TableSchema.TableColumn colvarServicioParalelo = new TableSchema.TableColumn(schema);
				colvarServicioParalelo.ColumnName = "ServicioParalelo";
				colvarServicioParalelo.DataType = DbType.Boolean;
				colvarServicioParalelo.MaxLength = 0;
				colvarServicioParalelo.AutoIncrement = false;
				colvarServicioParalelo.IsNullable = true;
				colvarServicioParalelo.IsPrimaryKey = false;
				colvarServicioParalelo.IsForeignKey = false;
				colvarServicioParalelo.IsReadOnly = false;
				colvarServicioParalelo.DefaultSetting = @"";
				colvarServicioParalelo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarServicioParalelo);
				
				TableSchema.TableColumn colvarServicioFlowId = new TableSchema.TableColumn(schema);
				colvarServicioFlowId.ColumnName = "ServicioFlowId";
				colvarServicioFlowId.DataType = DbType.Int32;
				colvarServicioFlowId.MaxLength = 0;
				colvarServicioFlowId.AutoIncrement = false;
				colvarServicioFlowId.IsNullable = true;
				colvarServicioFlowId.IsPrimaryKey = false;
				colvarServicioFlowId.IsForeignKey = false;
				colvarServicioFlowId.IsReadOnly = false;
				colvarServicioFlowId.DefaultSetting = @"";
				colvarServicioFlowId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarServicioFlowId);
				
				TableSchema.TableColumn colvarCuenta = new TableSchema.TableColumn(schema);
				colvarCuenta.ColumnName = "Cuenta";
				colvarCuenta.DataType = DbType.AnsiString;
				colvarCuenta.MaxLength = 25;
				colvarCuenta.AutoIncrement = false;
				colvarCuenta.IsNullable = true;
				colvarCuenta.IsPrimaryKey = false;
				colvarCuenta.IsForeignKey = false;
				colvarCuenta.IsReadOnly = false;
				colvarCuenta.DefaultSetting = @"";
				colvarCuenta.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCuenta);
				
				TableSchema.TableColumn colvarSeCobra = new TableSchema.TableColumn(schema);
				colvarSeCobra.ColumnName = "SeCobra";
				colvarSeCobra.DataType = DbType.Boolean;
				colvarSeCobra.MaxLength = 0;
				colvarSeCobra.AutoIncrement = false;
				colvarSeCobra.IsNullable = true;
				colvarSeCobra.IsPrimaryKey = false;
				colvarSeCobra.IsForeignKey = false;
				colvarSeCobra.IsReadOnly = false;
				colvarSeCobra.DefaultSetting = @"";
				colvarSeCobra.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSeCobra);
				
				TableSchema.TableColumn colvarSinDocumento = new TableSchema.TableColumn(schema);
				colvarSinDocumento.ColumnName = "SinDocumento";
				colvarSinDocumento.DataType = DbType.Boolean;
				colvarSinDocumento.MaxLength = 0;
				colvarSinDocumento.AutoIncrement = false;
				colvarSinDocumento.IsNullable = true;
				colvarSinDocumento.IsPrimaryKey = false;
				colvarSinDocumento.IsForeignKey = false;
				colvarSinDocumento.IsReadOnly = false;
				colvarSinDocumento.DefaultSetting = @"";
				colvarSinDocumento.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSinDocumento);
				
				TableSchema.TableColumn colvarSubTransaccional = new TableSchema.TableColumn(schema);
				colvarSubTransaccional.ColumnName = "SubTransaccional";
				colvarSubTransaccional.DataType = DbType.Boolean;
				colvarSubTransaccional.MaxLength = 0;
				colvarSubTransaccional.AutoIncrement = false;
				colvarSubTransaccional.IsNullable = true;
				colvarSubTransaccional.IsPrimaryKey = false;
				colvarSubTransaccional.IsForeignKey = false;
				colvarSubTransaccional.IsReadOnly = false;
				colvarSubTransaccional.DefaultSetting = @"";
				colvarSubTransaccional.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubTransaccional);
				
				TableSchema.TableColumn colvarAfectaOtraCompania = new TableSchema.TableColumn(schema);
				colvarAfectaOtraCompania.ColumnName = "AfectaOtraCompania";
				colvarAfectaOtraCompania.DataType = DbType.Boolean;
				colvarAfectaOtraCompania.MaxLength = 0;
				colvarAfectaOtraCompania.AutoIncrement = false;
				colvarAfectaOtraCompania.IsNullable = true;
				colvarAfectaOtraCompania.IsPrimaryKey = false;
				colvarAfectaOtraCompania.IsForeignKey = false;
				colvarAfectaOtraCompania.IsReadOnly = false;
				colvarAfectaOtraCompania.DefaultSetting = @"";
				colvarAfectaOtraCompania.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAfectaOtraCompania);
				
				TableSchema.TableColumn colvarFechaModificacion = new TableSchema.TableColumn(schema);
				colvarFechaModificacion.ColumnName = "FechaModificacion";
				colvarFechaModificacion.DataType = DbType.DateTime;
				colvarFechaModificacion.MaxLength = 0;
				colvarFechaModificacion.AutoIncrement = false;
				colvarFechaModificacion.IsNullable = false;
				colvarFechaModificacion.IsPrimaryKey = false;
				colvarFechaModificacion.IsForeignKey = false;
				colvarFechaModificacion.IsReadOnly = false;
				
						colvarFechaModificacion.DefaultSetting = @"(getdate())";
				colvarFechaModificacion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFechaModificacion);
				
				TableSchema.TableColumn colvarRowguid = new TableSchema.TableColumn(schema);
				colvarRowguid.ColumnName = "rowguid";
				colvarRowguid.DataType = DbType.Guid;
				colvarRowguid.MaxLength = 0;
				colvarRowguid.AutoIncrement = false;
				colvarRowguid.IsNullable = false;
				colvarRowguid.IsPrimaryKey = false;
				colvarRowguid.IsForeignKey = false;
				colvarRowguid.IsReadOnly = false;
				
						colvarRowguid.DefaultSetting = @"(newid())";
				colvarRowguid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRowguid);
				
				TableSchema.TableColumn colvarValidarRenovacion = new TableSchema.TableColumn(schema);
				colvarValidarRenovacion.ColumnName = "ValidarRenovacion";
				colvarValidarRenovacion.DataType = DbType.Boolean;
				colvarValidarRenovacion.MaxLength = 0;
				colvarValidarRenovacion.AutoIncrement = false;
				colvarValidarRenovacion.IsNullable = true;
				colvarValidarRenovacion.IsPrimaryKey = false;
				colvarValidarRenovacion.IsForeignKey = false;
				colvarValidarRenovacion.IsReadOnly = false;
				colvarValidarRenovacion.DefaultSetting = @"";
				colvarValidarRenovacion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarValidarRenovacion);
				
				TableSchema.TableColumn colvarTipoIdentificador = new TableSchema.TableColumn(schema);
				colvarTipoIdentificador.ColumnName = "TipoIdentificador";
				colvarTipoIdentificador.DataType = DbType.Int32;
				colvarTipoIdentificador.MaxLength = 0;
				colvarTipoIdentificador.AutoIncrement = false;
				colvarTipoIdentificador.IsNullable = true;
				colvarTipoIdentificador.IsPrimaryKey = false;
				colvarTipoIdentificador.IsForeignKey = false;
				colvarTipoIdentificador.IsReadOnly = false;
				colvarTipoIdentificador.DefaultSetting = @"";
				colvarTipoIdentificador.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTipoIdentificador);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["SrmProvider"].AddSchema("TiposServicios",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("TipoServicioId")]
		[Bindable(true)]
		public int TipoServicioId 
		{
			get { return GetColumnValue<int>(Columns.TipoServicioId); }
			set { SetColumnValue(Columns.TipoServicioId, value); }
		}
		  
		[XmlAttribute("Descripcion")]
		[Bindable(true)]
		public string Descripcion 
		{
			get { return GetColumnValue<string>(Columns.Descripcion); }
			set { SetColumnValue(Columns.Descripcion, value); }
		}
		  
		[XmlAttribute("TipoTransaccionId")]
		[Bindable(true)]
		public int? TipoTransaccionId 
		{
			get { return GetColumnValue<int?>(Columns.TipoTransaccionId); }
			set { SetColumnValue(Columns.TipoTransaccionId, value); }
		}
		  
		[XmlAttribute("CostoServicio")]
		[Bindable(true)]
		public decimal CostoServicio 
		{
			get { return GetColumnValue<decimal>(Columns.CostoServicio); }
			set { SetColumnValue(Columns.CostoServicio, value); }
		}
		  
		[XmlAttribute("CalculoBaseCapital")]
		[Bindable(true)]
		public bool? CalculoBaseCapital 
		{
			get { return GetColumnValue<bool?>(Columns.CalculoBaseCapital); }
			set { SetColumnValue(Columns.CalculoBaseCapital, value); }
		}
		  
		[XmlAttribute("TipoCalculoBaseCapital")]
		[Bindable(true)]
		public int? TipoCalculoBaseCapital 
		{
			get { return GetColumnValue<int?>(Columns.TipoCalculoBaseCapital); }
			set { SetColumnValue(Columns.TipoCalculoBaseCapital, value); }
		}
		  
		[XmlAttribute("ServicioParalelo")]
		[Bindable(true)]
		public bool? ServicioParalelo 
		{
			get { return GetColumnValue<bool?>(Columns.ServicioParalelo); }
			set { SetColumnValue(Columns.ServicioParalelo, value); }
		}
		  
		[XmlAttribute("ServicioFlowId")]
		[Bindable(true)]
		public int? ServicioFlowId 
		{
			get { return GetColumnValue<int?>(Columns.ServicioFlowId); }
			set { SetColumnValue(Columns.ServicioFlowId, value); }
		}
		  
		[XmlAttribute("Cuenta")]
		[Bindable(true)]
		public string Cuenta 
		{
			get { return GetColumnValue<string>(Columns.Cuenta); }
			set { SetColumnValue(Columns.Cuenta, value); }
		}
		  
		[XmlAttribute("SeCobra")]
		[Bindable(true)]
		public bool? SeCobra 
		{
			get { return GetColumnValue<bool?>(Columns.SeCobra); }
			set { SetColumnValue(Columns.SeCobra, value); }
		}
		  
		[XmlAttribute("SinDocumento")]
		[Bindable(true)]
		public bool? SinDocumento 
		{
			get { return GetColumnValue<bool?>(Columns.SinDocumento); }
			set { SetColumnValue(Columns.SinDocumento, value); }
		}
		  
		[XmlAttribute("SubTransaccional")]
		[Bindable(true)]
		public bool? SubTransaccional 
		{
			get { return GetColumnValue<bool?>(Columns.SubTransaccional); }
			set { SetColumnValue(Columns.SubTransaccional, value); }
		}
		  
		[XmlAttribute("AfectaOtraCompania")]
		[Bindable(true)]
		public bool? AfectaOtraCompania 
		{
			get { return GetColumnValue<bool?>(Columns.AfectaOtraCompania); }
			set { SetColumnValue(Columns.AfectaOtraCompania, value); }
		}
		  
		[XmlAttribute("FechaModificacion")]
		[Bindable(true)]
		public DateTime FechaModificacion 
		{
			get { return GetColumnValue<DateTime>(Columns.FechaModificacion); }
			set { SetColumnValue(Columns.FechaModificacion, value); }
		}
		  
		[XmlAttribute("Rowguid")]
		[Bindable(true)]
		public Guid Rowguid 
		{
			get { return GetColumnValue<Guid>(Columns.Rowguid); }
			set { SetColumnValue(Columns.Rowguid, value); }
		}
		  
		[XmlAttribute("ValidarRenovacion")]
		[Bindable(true)]
		public bool? ValidarRenovacion 
		{
			get { return GetColumnValue<bool?>(Columns.ValidarRenovacion); }
			set { SetColumnValue(Columns.ValidarRenovacion, value); }
		}
		  
		[XmlAttribute("TipoIdentificador")]
		[Bindable(true)]
		public int? TipoIdentificador 
		{
			get { return GetColumnValue<int?>(Columns.TipoIdentificador); }
			set { SetColumnValue(Columns.TipoIdentificador, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public CamaraComercio.DataAccess.SRM.TransaccionDocumentosRequisitosCollection TransaccionDocumentosRequisitosRecords()
		{
			return new CamaraComercio.DataAccess.SRM.TransaccionDocumentosRequisitosCollection().Where(TransaccionDocumentosRequisitos.Columns.TipoServicioId, TipoServicioId).Load();
		}
		#endregion
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TiposTransacciones ActiveRecord object related to this TiposServicios
		/// 
		/// </summary>
		public CamaraComercio.DataAccess.SRM.TiposTransacciones TiposTransacciones
		{
			get { return CamaraComercio.DataAccess.SRM.TiposTransacciones.FetchByID(this.TipoTransaccionId); }
			set { SetColumnValue("TipoTransaccionId", value.TipoTransaccionId); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varDescripcion,int? varTipoTransaccionId,decimal varCostoServicio,bool? varCalculoBaseCapital,int? varTipoCalculoBaseCapital,bool? varServicioParalelo,int? varServicioFlowId,string varCuenta,bool? varSeCobra,bool? varSinDocumento,bool? varSubTransaccional,bool? varAfectaOtraCompania,DateTime varFechaModificacion,Guid varRowguid,bool? varValidarRenovacion,int? varTipoIdentificador)
		{
			TiposServicios item = new TiposServicios();
			
			item.Descripcion = varDescripcion;
			
			item.TipoTransaccionId = varTipoTransaccionId;
			
			item.CostoServicio = varCostoServicio;
			
			item.CalculoBaseCapital = varCalculoBaseCapital;
			
			item.TipoCalculoBaseCapital = varTipoCalculoBaseCapital;
			
			item.ServicioParalelo = varServicioParalelo;
			
			item.ServicioFlowId = varServicioFlowId;
			
			item.Cuenta = varCuenta;
			
			item.SeCobra = varSeCobra;
			
			item.SinDocumento = varSinDocumento;
			
			item.SubTransaccional = varSubTransaccional;
			
			item.AfectaOtraCompania = varAfectaOtraCompania;
			
			item.FechaModificacion = varFechaModificacion;
			
			item.Rowguid = varRowguid;
			
			item.ValidarRenovacion = varValidarRenovacion;
			
			item.TipoIdentificador = varTipoIdentificador;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varTipoServicioId,string varDescripcion,int? varTipoTransaccionId,decimal varCostoServicio,bool? varCalculoBaseCapital,int? varTipoCalculoBaseCapital,bool? varServicioParalelo,int? varServicioFlowId,string varCuenta,bool? varSeCobra,bool? varSinDocumento,bool? varSubTransaccional,bool? varAfectaOtraCompania,DateTime varFechaModificacion,Guid varRowguid,bool? varValidarRenovacion,int? varTipoIdentificador)
		{
			TiposServicios item = new TiposServicios();
			
				item.TipoServicioId = varTipoServicioId;
			
				item.Descripcion = varDescripcion;
			
				item.TipoTransaccionId = varTipoTransaccionId;
			
				item.CostoServicio = varCostoServicio;
			
				item.CalculoBaseCapital = varCalculoBaseCapital;
			
				item.TipoCalculoBaseCapital = varTipoCalculoBaseCapital;
			
				item.ServicioParalelo = varServicioParalelo;
			
				item.ServicioFlowId = varServicioFlowId;
			
				item.Cuenta = varCuenta;
			
				item.SeCobra = varSeCobra;
			
				item.SinDocumento = varSinDocumento;
			
				item.SubTransaccional = varSubTransaccional;
			
				item.AfectaOtraCompania = varAfectaOtraCompania;
			
				item.FechaModificacion = varFechaModificacion;
			
				item.Rowguid = varRowguid;
			
				item.ValidarRenovacion = varValidarRenovacion;
			
				item.TipoIdentificador = varTipoIdentificador;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn TipoServicioIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn DescripcionColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn TipoTransaccionIdColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn CostoServicioColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn CalculoBaseCapitalColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn TipoCalculoBaseCapitalColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ServicioParaleloColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ServicioFlowIdColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn CuentaColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn SeCobraColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn SinDocumentoColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn SubTransaccionalColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn AfectaOtraCompaniaColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn FechaModificacionColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn RowguidColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn ValidarRenovacionColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn TipoIdentificadorColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string TipoServicioId = @"TipoServicioId";
			 public static string Descripcion = @"Descripcion";
			 public static string TipoTransaccionId = @"TipoTransaccionId";
			 public static string CostoServicio = @"CostoServicio";
			 public static string CalculoBaseCapital = @"CalculoBaseCapital";
			 public static string TipoCalculoBaseCapital = @"TipoCalculoBaseCapital";
			 public static string ServicioParalelo = @"ServicioParalelo";
			 public static string ServicioFlowId = @"ServicioFlowId";
			 public static string Cuenta = @"Cuenta";
			 public static string SeCobra = @"SeCobra";
			 public static string SinDocumento = @"SinDocumento";
			 public static string SubTransaccional = @"SubTransaccional";
			 public static string AfectaOtraCompania = @"AfectaOtraCompania";
			 public static string FechaModificacion = @"FechaModificacion";
			 public static string Rowguid = @"rowguid";
			 public static string ValidarRenovacion = @"ValidarRenovacion";
			 public static string TipoIdentificador = @"TipoIdentificador";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
