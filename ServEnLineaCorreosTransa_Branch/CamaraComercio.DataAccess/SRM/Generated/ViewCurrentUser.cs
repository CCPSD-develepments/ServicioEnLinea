using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace CamaraComercio.DataAccess.SRM{
    /// <summary>
    /// Strongly-typed collection for the ViewCurrentUser class.
    /// </summary>
    [Serializable]
    public partial class ViewCurrentUserCollection : ReadOnlyList<ViewCurrentUser, ViewCurrentUserCollection>
    {        
        public ViewCurrentUserCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the cvw_CurrentUser view.
    /// </summary>
    [Serializable]
    public partial class ViewCurrentUser : ReadOnlyRecord<ViewCurrentUser>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("cvw_CurrentUser", TableType.View, DataService.GetInstance("SrmProvider"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarUsuarioId = new TableSchema.TableColumn(schema);
                colvarUsuarioId.ColumnName = "UsuarioId";
                colvarUsuarioId.DataType = DbType.Int32;
                colvarUsuarioId.MaxLength = 0;
                colvarUsuarioId.AutoIncrement = false;
                colvarUsuarioId.IsNullable = false;
                colvarUsuarioId.IsPrimaryKey = false;
                colvarUsuarioId.IsForeignKey = false;
                colvarUsuarioId.IsReadOnly = false;
                
                schema.Columns.Add(colvarUsuarioId);
                
                TableSchema.TableColumn colvarNombreUsuario = new TableSchema.TableColumn(schema);
                colvarNombreUsuario.ColumnName = "NombreUsuario";
                colvarNombreUsuario.DataType = DbType.String;
                colvarNombreUsuario.MaxLength = 30;
                colvarNombreUsuario.AutoIncrement = false;
                colvarNombreUsuario.IsNullable = false;
                colvarNombreUsuario.IsPrimaryKey = false;
                colvarNombreUsuario.IsForeignKey = false;
                colvarNombreUsuario.IsReadOnly = false;
                
                schema.Columns.Add(colvarNombreUsuario);
                
                TableSchema.TableColumn colvarNombreCompleto = new TableSchema.TableColumn(schema);
                colvarNombreCompleto.ColumnName = "NombreCompleto";
                colvarNombreCompleto.DataType = DbType.String;
                colvarNombreCompleto.MaxLength = 100;
                colvarNombreCompleto.AutoIncrement = false;
                colvarNombreCompleto.IsNullable = true;
                colvarNombreCompleto.IsPrimaryKey = false;
                colvarNombreCompleto.IsForeignKey = false;
                colvarNombreCompleto.IsReadOnly = false;
                
                schema.Columns.Add(colvarNombreCompleto);
                
                TableSchema.TableColumn colvarDominio = new TableSchema.TableColumn(schema);
                colvarDominio.ColumnName = "Dominio";
                colvarDominio.DataType = DbType.String;
                colvarDominio.MaxLength = 100;
                colvarDominio.AutoIncrement = false;
                colvarDominio.IsNullable = true;
                colvarDominio.IsPrimaryKey = false;
                colvarDominio.IsForeignKey = false;
                colvarDominio.IsReadOnly = false;
                
                schema.Columns.Add(colvarDominio);
                
                TableSchema.TableColumn colvarAdministrador = new TableSchema.TableColumn(schema);
                colvarAdministrador.ColumnName = "Administrador";
                colvarAdministrador.DataType = DbType.Boolean;
                colvarAdministrador.MaxLength = 0;
                colvarAdministrador.AutoIncrement = false;
                colvarAdministrador.IsNullable = false;
                colvarAdministrador.IsPrimaryKey = false;
                colvarAdministrador.IsForeignKey = false;
                colvarAdministrador.IsReadOnly = false;
                
                schema.Columns.Add(colvarAdministrador);
                
                TableSchema.TableColumn colvarNombreUsuarioReferencia = new TableSchema.TableColumn(schema);
                colvarNombreUsuarioReferencia.ColumnName = "NombreUsuarioReferencia";
                colvarNombreUsuarioReferencia.DataType = DbType.String;
                colvarNombreUsuarioReferencia.MaxLength = 30;
                colvarNombreUsuarioReferencia.AutoIncrement = false;
                colvarNombreUsuarioReferencia.IsNullable = false;
                colvarNombreUsuarioReferencia.IsPrimaryKey = false;
                colvarNombreUsuarioReferencia.IsForeignKey = false;
                colvarNombreUsuarioReferencia.IsReadOnly = false;
                
                schema.Columns.Add(colvarNombreUsuarioReferencia);
                
                TableSchema.TableColumn colvarReceptor = new TableSchema.TableColumn(schema);
                colvarReceptor.ColumnName = "Receptor";
                colvarReceptor.DataType = DbType.Boolean;
                colvarReceptor.MaxLength = 0;
                colvarReceptor.AutoIncrement = false;
                colvarReceptor.IsNullable = true;
                colvarReceptor.IsPrimaryKey = false;
                colvarReceptor.IsForeignKey = false;
                colvarReceptor.IsReadOnly = false;
                
                schema.Columns.Add(colvarReceptor);
                
                TableSchema.TableColumn colvarDescripcion = new TableSchema.TableColumn(schema);
                colvarDescripcion.ColumnName = "Descripcion";
                colvarDescripcion.DataType = DbType.String;
                colvarDescripcion.MaxLength = 30;
                colvarDescripcion.AutoIncrement = false;
                colvarDescripcion.IsNullable = false;
                colvarDescripcion.IsPrimaryKey = false;
                colvarDescripcion.IsForeignKey = false;
                colvarDescripcion.IsReadOnly = false;
                
                schema.Columns.Add(colvarDescripcion);
                
                TableSchema.TableColumn colvarRolId = new TableSchema.TableColumn(schema);
                colvarRolId.ColumnName = "RolId";
                colvarRolId.DataType = DbType.Int32;
                colvarRolId.MaxLength = 0;
                colvarRolId.AutoIncrement = false;
                colvarRolId.IsNullable = false;
                colvarRolId.IsPrimaryKey = false;
                colvarRolId.IsForeignKey = false;
                colvarRolId.IsReadOnly = false;
                
                schema.Columns.Add(colvarRolId);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["SrmProvider"].AddSchema("cvw_CurrentUser",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public ViewCurrentUser()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public ViewCurrentUser(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public ViewCurrentUser(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public ViewCurrentUser(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("UsuarioId")]
        [Bindable(true)]
        public int UsuarioId 
	    {
		    get
		    {
			    return GetColumnValue<int>("UsuarioId");
		    }
            set 
		    {
			    SetColumnValue("UsuarioId", value);
            }
        }
	      
        [XmlAttribute("NombreUsuario")]
        [Bindable(true)]
        public string NombreUsuario 
	    {
		    get
		    {
			    return GetColumnValue<string>("NombreUsuario");
		    }
            set 
		    {
			    SetColumnValue("NombreUsuario", value);
            }
        }
	      
        [XmlAttribute("NombreCompleto")]
        [Bindable(true)]
        public string NombreCompleto 
	    {
		    get
		    {
			    return GetColumnValue<string>("NombreCompleto");
		    }
            set 
		    {
			    SetColumnValue("NombreCompleto", value);
            }
        }
	      
        [XmlAttribute("Dominio")]
        [Bindable(true)]
        public string Dominio 
	    {
		    get
		    {
			    return GetColumnValue<string>("Dominio");
		    }
            set 
		    {
			    SetColumnValue("Dominio", value);
            }
        }
	      
        [XmlAttribute("Administrador")]
        [Bindable(true)]
        public bool Administrador 
	    {
		    get
		    {
			    return GetColumnValue<bool>("Administrador");
		    }
            set 
		    {
			    SetColumnValue("Administrador", value);
            }
        }
	      
        [XmlAttribute("NombreUsuarioReferencia")]
        [Bindable(true)]
        public string NombreUsuarioReferencia 
	    {
		    get
		    {
			    return GetColumnValue<string>("NombreUsuarioReferencia");
		    }
            set 
		    {
			    SetColumnValue("NombreUsuarioReferencia", value);
            }
        }
	      
        [XmlAttribute("Receptor")]
        [Bindable(true)]
        public bool? Receptor 
	    {
		    get
		    {
			    return GetColumnValue<bool?>("Receptor");
		    }
            set 
		    {
			    SetColumnValue("Receptor", value);
            }
        }
	      
        [XmlAttribute("Descripcion")]
        [Bindable(true)]
        public string Descripcion 
	    {
		    get
		    {
			    return GetColumnValue<string>("Descripcion");
		    }
            set 
		    {
			    SetColumnValue("Descripcion", value);
            }
        }
	      
        [XmlAttribute("RolId")]
        [Bindable(true)]
        public int RolId 
	    {
		    get
		    {
			    return GetColumnValue<int>("RolId");
		    }
            set 
		    {
			    SetColumnValue("RolId", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string UsuarioId = @"UsuarioId";
            
            public static string NombreUsuario = @"NombreUsuario";
            
            public static string NombreCompleto = @"NombreCompleto";
            
            public static string Dominio = @"Dominio";
            
            public static string Administrador = @"Administrador";
            
            public static string NombreUsuarioReferencia = @"NombreUsuarioReferencia";
            
            public static string Receptor = @"Receptor";
            
            public static string Descripcion = @"Descripcion";
            
            public static string RolId = @"RolId";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
