using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace CamaraComercio.DataAccess.OficinaVirtual
{
	/// <summary>
	/// Strongly-typed collection for the RegistroActual class.
	/// </summary>
    [Serializable]
	public partial class RegistroActualCollection : ActiveList<RegistroActual, RegistroActualCollection>
	{	   
		public RegistroActualCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>RegistroActualCollection</returns>
		public RegistroActualCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                RegistroActual o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the RegistroActual table.
	/// </summary>
	[Serializable]
	public partial class RegistroActual : ActiveRecord<RegistroActual>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public RegistroActual()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public RegistroActual(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public RegistroActual(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public RegistroActual(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RegistroActual", TableType.Table, DataService.GetInstance("OficinaVirtualProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"WebSRM";
				//columns
				
				TableSchema.TableColumn colvarRegistroId = new TableSchema.TableColumn(schema);
				colvarRegistroId.ColumnName = "RegistroId";
				colvarRegistroId.DataType = DbType.Double;
				colvarRegistroId.MaxLength = 0;
				colvarRegistroId.AutoIncrement = false;
				colvarRegistroId.IsNullable = false;
				colvarRegistroId.IsPrimaryKey = true;
				colvarRegistroId.IsForeignKey = false;
				colvarRegistroId.IsReadOnly = false;
				colvarRegistroId.DefaultSetting = @"";
				colvarRegistroId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegistroId);
				
				TableSchema.TableColumn colvarEmpresaId = new TableSchema.TableColumn(schema);
				colvarEmpresaId.ColumnName = "EmpresaId";
				colvarEmpresaId.DataType = DbType.String;
				colvarEmpresaId.MaxLength = 255;
				colvarEmpresaId.AutoIncrement = false;
				colvarEmpresaId.IsNullable = false;
				colvarEmpresaId.IsPrimaryKey = false;
				colvarEmpresaId.IsForeignKey = false;
				colvarEmpresaId.IsReadOnly = false;
				colvarEmpresaId.DefaultSetting = @"";
				colvarEmpresaId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmpresaId);
				
				TableSchema.TableColumn colvarNumeroRegistro = new TableSchema.TableColumn(schema);
				colvarNumeroRegistro.ColumnName = "NumeroRegistro";
				colvarNumeroRegistro.DataType = DbType.Double;
				colvarNumeroRegistro.MaxLength = 0;
				colvarNumeroRegistro.AutoIncrement = false;
				colvarNumeroRegistro.IsNullable = true;
				colvarNumeroRegistro.IsPrimaryKey = false;
				colvarNumeroRegistro.IsForeignKey = false;
				colvarNumeroRegistro.IsReadOnly = false;
				colvarNumeroRegistro.DefaultSetting = @"";
				colvarNumeroRegistro.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNumeroRegistro);
				
				TableSchema.TableColumn colvarTipoSociedadId = new TableSchema.TableColumn(schema);
				colvarTipoSociedadId.ColumnName = "TipoSociedadId";
				colvarTipoSociedadId.DataType = DbType.Int32;
				colvarTipoSociedadId.MaxLength = 0;
				colvarTipoSociedadId.AutoIncrement = false;
				colvarTipoSociedadId.IsNullable = true;
				colvarTipoSociedadId.IsPrimaryKey = false;
				colvarTipoSociedadId.IsForeignKey = false;
				colvarTipoSociedadId.IsReadOnly = false;
				colvarTipoSociedadId.DefaultSetting = @"";
				colvarTipoSociedadId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTipoSociedadId);
				
				TableSchema.TableColumn colvarTipoSociedad = new TableSchema.TableColumn(schema);
				colvarTipoSociedad.ColumnName = "TipoSociedad";
				colvarTipoSociedad.DataType = DbType.String;
				colvarTipoSociedad.MaxLength = 50;
				colvarTipoSociedad.AutoIncrement = false;
				colvarTipoSociedad.IsNullable = true;
				colvarTipoSociedad.IsPrimaryKey = false;
				colvarTipoSociedad.IsForeignKey = false;
				colvarTipoSociedad.IsReadOnly = false;
				colvarTipoSociedad.DefaultSetting = @"";
				colvarTipoSociedad.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTipoSociedad);
				
				TableSchema.TableColumn colvarFechaEmision = new TableSchema.TableColumn(schema);
				colvarFechaEmision.ColumnName = "FechaEmision";
				colvarFechaEmision.DataType = DbType.DateTime;
				colvarFechaEmision.MaxLength = 0;
				colvarFechaEmision.AutoIncrement = false;
				colvarFechaEmision.IsNullable = true;
				colvarFechaEmision.IsPrimaryKey = false;
				colvarFechaEmision.IsForeignKey = false;
				colvarFechaEmision.IsReadOnly = false;
				colvarFechaEmision.DefaultSetting = @"";
				colvarFechaEmision.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFechaEmision);
				
				TableSchema.TableColumn colvarFechaVencimiento = new TableSchema.TableColumn(schema);
				colvarFechaVencimiento.ColumnName = "FechaVencimiento";
				colvarFechaVencimiento.DataType = DbType.DateTime;
				colvarFechaVencimiento.MaxLength = 0;
				colvarFechaVencimiento.AutoIncrement = false;
				colvarFechaVencimiento.IsNullable = true;
				colvarFechaVencimiento.IsPrimaryKey = false;
				colvarFechaVencimiento.IsForeignKey = false;
				colvarFechaVencimiento.IsReadOnly = false;
				colvarFechaVencimiento.DefaultSetting = @"";
				colvarFechaVencimiento.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFechaVencimiento);
				
				TableSchema.TableColumn colvarFechaConstitucion = new TableSchema.TableColumn(schema);
				colvarFechaConstitucion.ColumnName = "FechaConstitucion";
				colvarFechaConstitucion.DataType = DbType.DateTime;
				colvarFechaConstitucion.MaxLength = 0;
				colvarFechaConstitucion.AutoIncrement = false;
				colvarFechaConstitucion.IsNullable = true;
				colvarFechaConstitucion.IsPrimaryKey = false;
				colvarFechaConstitucion.IsForeignKey = false;
				colvarFechaConstitucion.IsReadOnly = false;
				colvarFechaConstitucion.DefaultSetting = @"";
				colvarFechaConstitucion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFechaConstitucion);
				
				TableSchema.TableColumn colvarFechaInicioOperaciones = new TableSchema.TableColumn(schema);
				colvarFechaInicioOperaciones.ColumnName = "FechaInicioOperaciones";
				colvarFechaInicioOperaciones.DataType = DbType.DateTime;
				colvarFechaInicioOperaciones.MaxLength = 0;
				colvarFechaInicioOperaciones.AutoIncrement = false;
				colvarFechaInicioOperaciones.IsNullable = true;
				colvarFechaInicioOperaciones.IsPrimaryKey = false;
				colvarFechaInicioOperaciones.IsForeignKey = false;
				colvarFechaInicioOperaciones.IsReadOnly = false;
				colvarFechaInicioOperaciones.DefaultSetting = @"";
				colvarFechaInicioOperaciones.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFechaInicioOperaciones);
				
				TableSchema.TableColumn colvarNombreEstablecimiento = new TableSchema.TableColumn(schema);
				colvarNombreEstablecimiento.ColumnName = "NombreEstablecimiento";
				colvarNombreEstablecimiento.DataType = DbType.String;
				colvarNombreEstablecimiento.MaxLength = 255;
				colvarNombreEstablecimiento.AutoIncrement = false;
				colvarNombreEstablecimiento.IsNullable = true;
				colvarNombreEstablecimiento.IsPrimaryKey = false;
				colvarNombreEstablecimiento.IsForeignKey = false;
				colvarNombreEstablecimiento.IsReadOnly = false;
				colvarNombreEstablecimiento.DefaultSetting = @"";
				colvarNombreEstablecimiento.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNombreEstablecimiento);
				
				TableSchema.TableColumn colvarRazonSocial = new TableSchema.TableColumn(schema);
				colvarRazonSocial.ColumnName = "RazonSocial";
				colvarRazonSocial.DataType = DbType.String;
				colvarRazonSocial.MaxLength = 255;
				colvarRazonSocial.AutoIncrement = false;
				colvarRazonSocial.IsNullable = true;
				colvarRazonSocial.IsPrimaryKey = false;
				colvarRazonSocial.IsForeignKey = false;
				colvarRazonSocial.IsReadOnly = false;
				colvarRazonSocial.DefaultSetting = @"";
				colvarRazonSocial.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRazonSocial);
				
				TableSchema.TableColumn colvarCapitalGeneral = new TableSchema.TableColumn(schema);
				colvarCapitalGeneral.ColumnName = "CapitalGeneral";
				colvarCapitalGeneral.DataType = DbType.Double;
				colvarCapitalGeneral.MaxLength = 0;
				colvarCapitalGeneral.AutoIncrement = false;
				colvarCapitalGeneral.IsNullable = true;
				colvarCapitalGeneral.IsPrimaryKey = false;
				colvarCapitalGeneral.IsForeignKey = false;
				colvarCapitalGeneral.IsReadOnly = false;
				colvarCapitalGeneral.DefaultSetting = @"";
				colvarCapitalGeneral.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCapitalGeneral);
				
				TableSchema.TableColumn colvarCapitalAutorizado = new TableSchema.TableColumn(schema);
				colvarCapitalAutorizado.ColumnName = "CapitalAutorizado";
				colvarCapitalAutorizado.DataType = DbType.Double;
				colvarCapitalAutorizado.MaxLength = 0;
				colvarCapitalAutorizado.AutoIncrement = false;
				colvarCapitalAutorizado.IsNullable = true;
				colvarCapitalAutorizado.IsPrimaryKey = false;
				colvarCapitalAutorizado.IsForeignKey = false;
				colvarCapitalAutorizado.IsReadOnly = false;
				colvarCapitalAutorizado.DefaultSetting = @"";
				colvarCapitalAutorizado.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCapitalAutorizado);
				
				TableSchema.TableColumn colvarCapitalPagado = new TableSchema.TableColumn(schema);
				colvarCapitalPagado.ColumnName = "CapitalPagado";
				colvarCapitalPagado.DataType = DbType.Double;
				colvarCapitalPagado.MaxLength = 0;
				colvarCapitalPagado.AutoIncrement = false;
				colvarCapitalPagado.IsNullable = true;
				colvarCapitalPagado.IsPrimaryKey = false;
				colvarCapitalPagado.IsForeignKey = false;
				colvarCapitalPagado.IsReadOnly = false;
				colvarCapitalPagado.DefaultSetting = @"";
				colvarCapitalPagado.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCapitalPagado);
				
				TableSchema.TableColumn colvarActivos = new TableSchema.TableColumn(schema);
				colvarActivos.ColumnName = "Activos";
				colvarActivos.DataType = DbType.Double;
				colvarActivos.MaxLength = 0;
				colvarActivos.AutoIncrement = false;
				colvarActivos.IsNullable = true;
				colvarActivos.IsPrimaryKey = false;
				colvarActivos.IsForeignKey = false;
				colvarActivos.IsReadOnly = false;
				colvarActivos.DefaultSetting = @"";
				colvarActivos.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActivos);
				
				TableSchema.TableColumn colvarBienesRaices = new TableSchema.TableColumn(schema);
				colvarBienesRaices.ColumnName = "BienesRaices";
				colvarBienesRaices.DataType = DbType.Double;
				colvarBienesRaices.MaxLength = 0;
				colvarBienesRaices.AutoIncrement = false;
				colvarBienesRaices.IsNullable = true;
				colvarBienesRaices.IsPrimaryKey = false;
				colvarBienesRaices.IsForeignKey = false;
				colvarBienesRaices.IsReadOnly = false;
				colvarBienesRaices.DefaultSetting = @"";
				colvarBienesRaices.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBienesRaices);
				
				TableSchema.TableColumn colvarIsZonaFranca = new TableSchema.TableColumn(schema);
				colvarIsZonaFranca.ColumnName = "IsZonaFranca";
				colvarIsZonaFranca.DataType = DbType.Boolean;
				colvarIsZonaFranca.MaxLength = 0;
				colvarIsZonaFranca.AutoIncrement = false;
				colvarIsZonaFranca.IsNullable = true;
				colvarIsZonaFranca.IsPrimaryKey = false;
				colvarIsZonaFranca.IsForeignKey = false;
				colvarIsZonaFranca.IsReadOnly = false;
				colvarIsZonaFranca.DefaultSetting = @"";
				colvarIsZonaFranca.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsZonaFranca);
				
				TableSchema.TableColumn colvarRnc = new TableSchema.TableColumn(schema);
				colvarRnc.ColumnName = "RNC";
				colvarRnc.DataType = DbType.String;
				colvarRnc.MaxLength = 255;
				colvarRnc.AutoIncrement = false;
				colvarRnc.IsNullable = true;
				colvarRnc.IsPrimaryKey = false;
				colvarRnc.IsForeignKey = false;
				colvarRnc.IsReadOnly = false;
				colvarRnc.DefaultSetting = @"";
				colvarRnc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRnc);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["OficinaVirtualProvider"].AddSchema("RegistroActual",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("RegistroId")]
		[Bindable(true)]
		public double RegistroId 
		{
			get { return GetColumnValue<double>(Columns.RegistroId); }
			set { SetColumnValue(Columns.RegistroId, value); }
		}
		  
		[XmlAttribute("EmpresaId")]
		[Bindable(true)]
		public string EmpresaId 
		{
			get { return GetColumnValue<string>(Columns.EmpresaId); }
			set { SetColumnValue(Columns.EmpresaId, value); }
		}
		  
		[XmlAttribute("NumeroRegistro")]
		[Bindable(true)]
		public double? NumeroRegistro 
		{
			get { return GetColumnValue<double?>(Columns.NumeroRegistro); }
			set { SetColumnValue(Columns.NumeroRegistro, value); }
		}
		  
		[XmlAttribute("TipoSociedadId")]
		[Bindable(true)]
		public int? TipoSociedadId 
		{
			get { return GetColumnValue<int?>(Columns.TipoSociedadId); }
			set { SetColumnValue(Columns.TipoSociedadId, value); }
		}
		  
		[XmlAttribute("TipoSociedad")]
		[Bindable(true)]
		public string TipoSociedad 
		{
			get { return GetColumnValue<string>(Columns.TipoSociedad); }
			set { SetColumnValue(Columns.TipoSociedad, value); }
		}
		  
		[XmlAttribute("FechaEmision")]
		[Bindable(true)]
		public DateTime? FechaEmision 
		{
			get { return GetColumnValue<DateTime?>(Columns.FechaEmision); }
			set { SetColumnValue(Columns.FechaEmision, value); }
		}
		  
		[XmlAttribute("FechaVencimiento")]
		[Bindable(true)]
		public DateTime? FechaVencimiento 
		{
			get { return GetColumnValue<DateTime?>(Columns.FechaVencimiento); }
			set { SetColumnValue(Columns.FechaVencimiento, value); }
		}
		  
		[XmlAttribute("FechaConstitucion")]
		[Bindable(true)]
		public DateTime? FechaConstitucion 
		{
			get { return GetColumnValue<DateTime?>(Columns.FechaConstitucion); }
			set { SetColumnValue(Columns.FechaConstitucion, value); }
		}
		  
		[XmlAttribute("FechaInicioOperaciones")]
		[Bindable(true)]
		public DateTime? FechaInicioOperaciones 
		{
			get { return GetColumnValue<DateTime?>(Columns.FechaInicioOperaciones); }
			set { SetColumnValue(Columns.FechaInicioOperaciones, value); }
		}
		  
		[XmlAttribute("NombreEstablecimiento")]
		[Bindable(true)]
		public string NombreEstablecimiento 
		{
			get { return GetColumnValue<string>(Columns.NombreEstablecimiento); }
			set { SetColumnValue(Columns.NombreEstablecimiento, value); }
		}
		  
		[XmlAttribute("RazonSocial")]
		[Bindable(true)]
		public string RazonSocial 
		{
			get { return GetColumnValue<string>(Columns.RazonSocial); }
			set { SetColumnValue(Columns.RazonSocial, value); }
		}
		  
		[XmlAttribute("CapitalGeneral")]
		[Bindable(true)]
		public double? CapitalGeneral 
		{
			get { return GetColumnValue<double?>(Columns.CapitalGeneral); }
			set { SetColumnValue(Columns.CapitalGeneral, value); }
		}
		  
		[XmlAttribute("CapitalAutorizado")]
		[Bindable(true)]
		public double? CapitalAutorizado 
		{
			get { return GetColumnValue<double?>(Columns.CapitalAutorizado); }
			set { SetColumnValue(Columns.CapitalAutorizado, value); }
		}
		  
		[XmlAttribute("CapitalPagado")]
		[Bindable(true)]
		public double? CapitalPagado 
		{
			get { return GetColumnValue<double?>(Columns.CapitalPagado); }
			set { SetColumnValue(Columns.CapitalPagado, value); }
		}
		  
		[XmlAttribute("Activos")]
		[Bindable(true)]
		public double? Activos 
		{
			get { return GetColumnValue<double?>(Columns.Activos); }
			set { SetColumnValue(Columns.Activos, value); }
		}
		  
		[XmlAttribute("BienesRaices")]
		[Bindable(true)]
		public double? BienesRaices 
		{
			get { return GetColumnValue<double?>(Columns.BienesRaices); }
			set { SetColumnValue(Columns.BienesRaices, value); }
		}
		  
		[XmlAttribute("IsZonaFranca")]
		[Bindable(true)]
		public bool? IsZonaFranca 
		{
			get { return GetColumnValue<bool?>(Columns.IsZonaFranca); }
			set { SetColumnValue(Columns.IsZonaFranca, value); }
		}
		  
		[XmlAttribute("Rnc")]
		[Bindable(true)]
		public string Rnc 
		{
			get { return GetColumnValue<string>(Columns.Rnc); }
			set { SetColumnValue(Columns.Rnc, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(double varRegistroId,string varEmpresaId,double? varNumeroRegistro,int? varTipoSociedadId,string varTipoSociedad,DateTime? varFechaEmision,DateTime? varFechaVencimiento,DateTime? varFechaConstitucion,DateTime? varFechaInicioOperaciones,string varNombreEstablecimiento,string varRazonSocial,double? varCapitalGeneral,double? varCapitalAutorizado,double? varCapitalPagado,double? varActivos,double? varBienesRaices,bool? varIsZonaFranca,string varRnc)
		{
			RegistroActual item = new RegistroActual();
			
			item.RegistroId = varRegistroId;
			
			item.EmpresaId = varEmpresaId;
			
			item.NumeroRegistro = varNumeroRegistro;
			
			item.TipoSociedadId = varTipoSociedadId;
			
			item.TipoSociedad = varTipoSociedad;
			
			item.FechaEmision = varFechaEmision;
			
			item.FechaVencimiento = varFechaVencimiento;
			
			item.FechaConstitucion = varFechaConstitucion;
			
			item.FechaInicioOperaciones = varFechaInicioOperaciones;
			
			item.NombreEstablecimiento = varNombreEstablecimiento;
			
			item.RazonSocial = varRazonSocial;
			
			item.CapitalGeneral = varCapitalGeneral;
			
			item.CapitalAutorizado = varCapitalAutorizado;
			
			item.CapitalPagado = varCapitalPagado;
			
			item.Activos = varActivos;
			
			item.BienesRaices = varBienesRaices;
			
			item.IsZonaFranca = varIsZonaFranca;
			
			item.Rnc = varRnc;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(double varRegistroId,string varEmpresaId,double? varNumeroRegistro,int? varTipoSociedadId,string varTipoSociedad,DateTime? varFechaEmision,DateTime? varFechaVencimiento,DateTime? varFechaConstitucion,DateTime? varFechaInicioOperaciones,string varNombreEstablecimiento,string varRazonSocial,double? varCapitalGeneral,double? varCapitalAutorizado,double? varCapitalPagado,double? varActivos,double? varBienesRaices,bool? varIsZonaFranca,string varRnc)
		{
			RegistroActual item = new RegistroActual();
			
				item.RegistroId = varRegistroId;
			
				item.EmpresaId = varEmpresaId;
			
				item.NumeroRegistro = varNumeroRegistro;
			
				item.TipoSociedadId = varTipoSociedadId;
			
				item.TipoSociedad = varTipoSociedad;
			
				item.FechaEmision = varFechaEmision;
			
				item.FechaVencimiento = varFechaVencimiento;
			
				item.FechaConstitucion = varFechaConstitucion;
			
				item.FechaInicioOperaciones = varFechaInicioOperaciones;
			
				item.NombreEstablecimiento = varNombreEstablecimiento;
			
				item.RazonSocial = varRazonSocial;
			
				item.CapitalGeneral = varCapitalGeneral;
			
				item.CapitalAutorizado = varCapitalAutorizado;
			
				item.CapitalPagado = varCapitalPagado;
			
				item.Activos = varActivos;
			
				item.BienesRaices = varBienesRaices;
			
				item.IsZonaFranca = varIsZonaFranca;
			
				item.Rnc = varRnc;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn RegistroIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn EmpresaIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn NumeroRegistroColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn TipoSociedadIdColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn TipoSociedadColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn FechaEmisionColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn FechaVencimientoColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn FechaConstitucionColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn FechaInicioOperacionesColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn NombreEstablecimientoColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn RazonSocialColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn CapitalGeneralColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn CapitalAutorizadoColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn CapitalPagadoColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn ActivosColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn BienesRaicesColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn IsZonaFrancaColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn RncColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string RegistroId = @"RegistroId";
			 public static string EmpresaId = @"EmpresaId";
			 public static string NumeroRegistro = @"NumeroRegistro";
			 public static string TipoSociedadId = @"TipoSociedadId";
			 public static string TipoSociedad = @"TipoSociedad";
			 public static string FechaEmision = @"FechaEmision";
			 public static string FechaVencimiento = @"FechaVencimiento";
			 public static string FechaConstitucion = @"FechaConstitucion";
			 public static string FechaInicioOperaciones = @"FechaInicioOperaciones";
			 public static string NombreEstablecimiento = @"NombreEstablecimiento";
			 public static string RazonSocial = @"RazonSocial";
			 public static string CapitalGeneral = @"CapitalGeneral";
			 public static string CapitalAutorizado = @"CapitalAutorizado";
			 public static string CapitalPagado = @"CapitalPagado";
			 public static string Activos = @"Activos";
			 public static string BienesRaices = @"BienesRaices";
			 public static string IsZonaFranca = @"IsZonaFranca";
			 public static string Rnc = @"RNC";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
