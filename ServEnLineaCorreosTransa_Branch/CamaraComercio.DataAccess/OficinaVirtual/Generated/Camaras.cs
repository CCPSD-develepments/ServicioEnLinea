using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace CamaraComercio.DataAccess.OficinaVirtual
{
	/// <summary>
	/// Strongly-typed collection for the Camaras class.
	/// </summary>
    [Serializable]
	public partial class CamarasCollection : ActiveList<Camaras, CamarasCollection>
	{	   
		public CamarasCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>CamarasCollection</returns>
		public CamarasCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Camaras o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Camaras table.
	/// </summary>
	[Serializable]
	public partial class Camaras : ActiveRecord<Camaras>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public Camaras()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public Camaras(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public Camaras(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public Camaras(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Camaras", TableType.Table, DataService.GetInstance("OficinaVirtualProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"OFV";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.AnsiStringFixedLength;
				colvarId.MaxLength = 3;
				colvarId.AutoIncrement = false;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarNombre = new TableSchema.TableColumn(schema);
				colvarNombre.ColumnName = "Nombre";
				colvarNombre.DataType = DbType.String;
				colvarNombre.MaxLength = 60;
				colvarNombre.AutoIncrement = false;
				colvarNombre.IsNullable = true;
				colvarNombre.IsPrimaryKey = false;
				colvarNombre.IsForeignKey = false;
				colvarNombre.IsReadOnly = false;
				colvarNombre.DefaultSetting = @"";
				colvarNombre.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNombre);
				
				TableSchema.TableColumn colvarGestionID = new TableSchema.TableColumn(schema);
				colvarGestionID.ColumnName = "GestionID";
				colvarGestionID.DataType = DbType.Currency;
				colvarGestionID.MaxLength = 0;
				colvarGestionID.AutoIncrement = false;
				colvarGestionID.IsNullable = true;
				colvarGestionID.IsPrimaryKey = false;
				colvarGestionID.IsForeignKey = false;
				colvarGestionID.IsReadOnly = false;
				colvarGestionID.DefaultSetting = @"";
				colvarGestionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGestionID);
				
				TableSchema.TableColumn colvarRnc = new TableSchema.TableColumn(schema);
				colvarRnc.ColumnName = "RNC";
				colvarRnc.DataType = DbType.String;
				colvarRnc.MaxLength = 20;
				colvarRnc.AutoIncrement = false;
				colvarRnc.IsNullable = true;
				colvarRnc.IsPrimaryKey = false;
				colvarRnc.IsForeignKey = false;
				colvarRnc.IsReadOnly = false;
				colvarRnc.DefaultSetting = @"";
				colvarRnc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRnc);
				
				TableSchema.TableColumn colvarActiva = new TableSchema.TableColumn(schema);
				colvarActiva.ColumnName = "Activa";
				colvarActiva.DataType = DbType.Boolean;
				colvarActiva.MaxLength = 0;
				colvarActiva.AutoIncrement = false;
				colvarActiva.IsNullable = true;
				colvarActiva.IsPrimaryKey = false;
				colvarActiva.IsForeignKey = false;
				colvarActiva.IsReadOnly = false;
				colvarActiva.DefaultSetting = @"";
				colvarActiva.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActiva);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["OficinaVirtualProvider"].AddSchema("Camaras",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public string Id 
		{
			get { return GetColumnValue<string>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("Nombre")]
		[Bindable(true)]
		public string Nombre 
		{
			get { return GetColumnValue<string>(Columns.Nombre); }
			set { SetColumnValue(Columns.Nombre, value); }
		}
		  
		[XmlAttribute("GestionID")]
		[Bindable(true)]
		public decimal? GestionID 
		{
			get { return GetColumnValue<decimal?>(Columns.GestionID); }
			set { SetColumnValue(Columns.GestionID, value); }
		}
		  
		[XmlAttribute("Rnc")]
		[Bindable(true)]
		public string Rnc 
		{
			get { return GetColumnValue<string>(Columns.Rnc); }
			set { SetColumnValue(Columns.Rnc, value); }
		}
		  
		[XmlAttribute("Activa")]
		[Bindable(true)]
		public bool? Activa 
		{
			get { return GetColumnValue<bool?>(Columns.Activa); }
			set { SetColumnValue(Columns.Activa, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public CamaraComercio.DataAccess.OficinaVirtual.EmpresasPorUsuarioCollection EmpresasPorUsuarioRecords()
		{
			return new CamaraComercio.DataAccess.OficinaVirtual.EmpresasPorUsuarioCollection().Where(EmpresasPorUsuario.Columns.CamaraID, Id).Load();
		}
		public CamaraComercio.DataAccess.OficinaVirtual.ServiciosEnCamaraCollection ServiciosEnCamaraRecords()
		{
			return new CamaraComercio.DataAccess.OficinaVirtual.ServiciosEnCamaraCollection().Where(ServiciosEnCamara.Columns.CamaraID, Id).Load();
		}
		#endregion
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varId,string varNombre,decimal? varGestionID,string varRnc,bool? varActiva)
		{
			Camaras item = new Camaras();
			
			item.Id = varId;
			
			item.Nombre = varNombre;
			
			item.GestionID = varGestionID;
			
			item.Rnc = varRnc;
			
			item.Activa = varActiva;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varId,string varNombre,decimal? varGestionID,string varRnc,bool? varActiva)
		{
			Camaras item = new Camaras();
			
				item.Id = varId;
			
				item.Nombre = varNombre;
			
				item.GestionID = varGestionID;
			
				item.Rnc = varRnc;
			
				item.Activa = varActiva;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn NombreColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn GestionIDColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn RncColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ActivaColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string Nombre = @"Nombre";
			 public static string GestionID = @"GestionID";
			 public static string Rnc = @"RNC";
			 public static string Activa = @"Activa";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
