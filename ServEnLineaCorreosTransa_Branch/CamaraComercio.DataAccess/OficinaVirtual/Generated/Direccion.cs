using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace CamaraComercio.DataAccess.OficinaVirtual
{
	/// <summary>
	/// Strongly-typed collection for the Direccion class.
	/// </summary>
    [Serializable]
	public partial class DireccionCollection : ActiveList<Direccion, DireccionCollection>
	{	   
		public DireccionCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>DireccionCollection</returns>
		public DireccionCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Direccion o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Direcciones table.
	/// </summary>
	[Serializable]
	public partial class Direccion : ActiveRecord<Direccion>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public Direccion()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public Direccion(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public Direccion(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public Direccion(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Direcciones", TableType.Table, DataService.GetInstance("OficinaVirtualProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"WebSRM";
				//columns
				
				TableSchema.TableColumn colvarDireccionId = new TableSchema.TableColumn(schema);
				colvarDireccionId.ColumnName = "DireccionId";
				colvarDireccionId.DataType = DbType.Int32;
				colvarDireccionId.MaxLength = 0;
				colvarDireccionId.AutoIncrement = true;
				colvarDireccionId.IsNullable = false;
				colvarDireccionId.IsPrimaryKey = true;
				colvarDireccionId.IsForeignKey = false;
				colvarDireccionId.IsReadOnly = false;
				colvarDireccionId.DefaultSetting = @"";
				colvarDireccionId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDireccionId);
				
				TableSchema.TableColumn colvarCalle = new TableSchema.TableColumn(schema);
				colvarCalle.ColumnName = "Calle";
				colvarCalle.DataType = DbType.String;
				colvarCalle.MaxLength = 256;
				colvarCalle.AutoIncrement = false;
				colvarCalle.IsNullable = true;
				colvarCalle.IsPrimaryKey = false;
				colvarCalle.IsForeignKey = false;
				colvarCalle.IsReadOnly = false;
				colvarCalle.DefaultSetting = @"";
				colvarCalle.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCalle);
				
				TableSchema.TableColumn colvarNumero = new TableSchema.TableColumn(schema);
				colvarNumero.ColumnName = "Numero";
				colvarNumero.DataType = DbType.String;
				colvarNumero.MaxLength = 6;
				colvarNumero.AutoIncrement = false;
				colvarNumero.IsNullable = true;
				colvarNumero.IsPrimaryKey = false;
				colvarNumero.IsForeignKey = false;
				colvarNumero.IsReadOnly = false;
				colvarNumero.DefaultSetting = @"";
				colvarNumero.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNumero);
				
				TableSchema.TableColumn colvarCiudadId = new TableSchema.TableColumn(schema);
				colvarCiudadId.ColumnName = "CiudadId";
				colvarCiudadId.DataType = DbType.Int32;
				colvarCiudadId.MaxLength = 0;
				colvarCiudadId.AutoIncrement = false;
				colvarCiudadId.IsNullable = true;
				colvarCiudadId.IsPrimaryKey = false;
				colvarCiudadId.IsForeignKey = false;
				colvarCiudadId.IsReadOnly = false;
				colvarCiudadId.DefaultSetting = @"";
				colvarCiudadId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCiudadId);
				
				TableSchema.TableColumn colvarSectorId = new TableSchema.TableColumn(schema);
				colvarSectorId.ColumnName = "SectorId";
				colvarSectorId.DataType = DbType.Int32;
				colvarSectorId.MaxLength = 0;
				colvarSectorId.AutoIncrement = false;
				colvarSectorId.IsNullable = true;
				colvarSectorId.IsPrimaryKey = false;
				colvarSectorId.IsForeignKey = false;
				colvarSectorId.IsReadOnly = false;
				colvarSectorId.DefaultSetting = @"";
				colvarSectorId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSectorId);
				
				TableSchema.TableColumn colvarApartadoPostal = new TableSchema.TableColumn(schema);
				colvarApartadoPostal.ColumnName = "ApartadoPostal";
				colvarApartadoPostal.DataType = DbType.String;
				colvarApartadoPostal.MaxLength = 20;
				colvarApartadoPostal.AutoIncrement = false;
				colvarApartadoPostal.IsNullable = true;
				colvarApartadoPostal.IsPrimaryKey = false;
				colvarApartadoPostal.IsForeignKey = false;
				colvarApartadoPostal.IsReadOnly = false;
				colvarApartadoPostal.DefaultSetting = @"";
				colvarApartadoPostal.ForeignKeyTableName = "";
				schema.Columns.Add(colvarApartadoPostal);
				
				TableSchema.TableColumn colvarTelefonoCasa = new TableSchema.TableColumn(schema);
				colvarTelefonoCasa.ColumnName = "TelefonoCasa";
				colvarTelefonoCasa.DataType = DbType.String;
				colvarTelefonoCasa.MaxLength = 15;
				colvarTelefonoCasa.AutoIncrement = false;
				colvarTelefonoCasa.IsNullable = true;
				colvarTelefonoCasa.IsPrimaryKey = false;
				colvarTelefonoCasa.IsForeignKey = false;
				colvarTelefonoCasa.IsReadOnly = false;
				colvarTelefonoCasa.DefaultSetting = @"";
				colvarTelefonoCasa.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTelefonoCasa);
				
				TableSchema.TableColumn colvarTelefonoOficina = new TableSchema.TableColumn(schema);
				colvarTelefonoOficina.ColumnName = "TelefonoOficina";
				colvarTelefonoOficina.DataType = DbType.String;
				colvarTelefonoOficina.MaxLength = 15;
				colvarTelefonoOficina.AutoIncrement = false;
				colvarTelefonoOficina.IsNullable = true;
				colvarTelefonoOficina.IsPrimaryKey = false;
				colvarTelefonoOficina.IsForeignKey = false;
				colvarTelefonoOficina.IsReadOnly = false;
				colvarTelefonoOficina.DefaultSetting = @"";
				colvarTelefonoOficina.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTelefonoOficina);
				
				TableSchema.TableColumn colvarExtension = new TableSchema.TableColumn(schema);
				colvarExtension.ColumnName = "Extension";
				colvarExtension.DataType = DbType.Int32;
				colvarExtension.MaxLength = 0;
				colvarExtension.AutoIncrement = false;
				colvarExtension.IsNullable = true;
				colvarExtension.IsPrimaryKey = false;
				colvarExtension.IsForeignKey = false;
				colvarExtension.IsReadOnly = false;
				colvarExtension.DefaultSetting = @"";
				colvarExtension.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExtension);
				
				TableSchema.TableColumn colvarFax = new TableSchema.TableColumn(schema);
				colvarFax.ColumnName = "Fax";
				colvarFax.DataType = DbType.String;
				colvarFax.MaxLength = 15;
				colvarFax.AutoIncrement = false;
				colvarFax.IsNullable = true;
				colvarFax.IsPrimaryKey = false;
				colvarFax.IsForeignKey = false;
				colvarFax.IsReadOnly = false;
				colvarFax.DefaultSetting = @"";
				colvarFax.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFax);
				
				TableSchema.TableColumn colvarEmail = new TableSchema.TableColumn(schema);
				colvarEmail.ColumnName = "Email";
				colvarEmail.DataType = DbType.String;
				colvarEmail.MaxLength = 256;
				colvarEmail.AutoIncrement = false;
				colvarEmail.IsNullable = true;
				colvarEmail.IsPrimaryKey = false;
				colvarEmail.IsForeignKey = false;
				colvarEmail.IsReadOnly = false;
				colvarEmail.DefaultSetting = @"";
				colvarEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmail);
				
				TableSchema.TableColumn colvarSitioWeb = new TableSchema.TableColumn(schema);
				colvarSitioWeb.ColumnName = "SitioWeb";
				colvarSitioWeb.DataType = DbType.String;
				colvarSitioWeb.MaxLength = 256;
				colvarSitioWeb.AutoIncrement = false;
				colvarSitioWeb.IsNullable = true;
				colvarSitioWeb.IsPrimaryKey = false;
				colvarSitioWeb.IsForeignKey = false;
				colvarSitioWeb.IsReadOnly = false;
				colvarSitioWeb.DefaultSetting = @"";
				colvarSitioWeb.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSitioWeb);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["OficinaVirtualProvider"].AddSchema("Direcciones",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("DireccionId")]
		[Bindable(true)]
		public int DireccionId 
		{
			get { return GetColumnValue<int>(Columns.DireccionId); }
			set { SetColumnValue(Columns.DireccionId, value); }
		}
		  
		[XmlAttribute("Calle")]
		[Bindable(true)]
		public string Calle 
		{
			get { return GetColumnValue<string>(Columns.Calle); }
			set { SetColumnValue(Columns.Calle, value); }
		}
		  
		[XmlAttribute("Numero")]
		[Bindable(true)]
		public string Numero 
		{
			get { return GetColumnValue<string>(Columns.Numero); }
			set { SetColumnValue(Columns.Numero, value); }
		}
		  
		[XmlAttribute("CiudadId")]
		[Bindable(true)]
		public int? CiudadId 
		{
			get { return GetColumnValue<int?>(Columns.CiudadId); }
			set { SetColumnValue(Columns.CiudadId, value); }
		}
		  
		[XmlAttribute("SectorId")]
		[Bindable(true)]
		public int? SectorId 
		{
			get { return GetColumnValue<int?>(Columns.SectorId); }
			set { SetColumnValue(Columns.SectorId, value); }
		}
		  
		[XmlAttribute("ApartadoPostal")]
		[Bindable(true)]
		public string ApartadoPostal 
		{
			get { return GetColumnValue<string>(Columns.ApartadoPostal); }
			set { SetColumnValue(Columns.ApartadoPostal, value); }
		}
		  
		[XmlAttribute("TelefonoCasa")]
		[Bindable(true)]
		public string TelefonoCasa 
		{
			get { return GetColumnValue<string>(Columns.TelefonoCasa); }
			set { SetColumnValue(Columns.TelefonoCasa, value); }
		}
		  
		[XmlAttribute("TelefonoOficina")]
		[Bindable(true)]
		public string TelefonoOficina 
		{
			get { return GetColumnValue<string>(Columns.TelefonoOficina); }
			set { SetColumnValue(Columns.TelefonoOficina, value); }
		}
		  
		[XmlAttribute("Extension")]
		[Bindable(true)]
		public int? Extension 
		{
			get { return GetColumnValue<int?>(Columns.Extension); }
			set { SetColumnValue(Columns.Extension, value); }
		}
		  
		[XmlAttribute("Fax")]
		[Bindable(true)]
		public string Fax 
		{
			get { return GetColumnValue<string>(Columns.Fax); }
			set { SetColumnValue(Columns.Fax, value); }
		}
		  
		[XmlAttribute("Email")]
		[Bindable(true)]
		public string Email 
		{
			get { return GetColumnValue<string>(Columns.Email); }
			set { SetColumnValue(Columns.Email, value); }
		}
		  
		[XmlAttribute("SitioWeb")]
		[Bindable(true)]
		public string SitioWeb 
		{
			get { return GetColumnValue<string>(Columns.SitioWeb); }
			set { SetColumnValue(Columns.SitioWeb, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public CamaraComercio.DataAccess.OficinaVirtual.PersonaCollection PersonaRecords()
		{
			return new CamaraComercio.DataAccess.OficinaVirtual.PersonaCollection().Where(Persona.Columns.DireccionId, DireccionId).Load();
		}
		#endregion
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varCalle,string varNumero,int? varCiudadId,int? varSectorId,string varApartadoPostal,string varTelefonoCasa,string varTelefonoOficina,int? varExtension,string varFax,string varEmail,string varSitioWeb)
		{
			Direccion item = new Direccion();
			
			item.Calle = varCalle;
			
			item.Numero = varNumero;
			
			item.CiudadId = varCiudadId;
			
			item.SectorId = varSectorId;
			
			item.ApartadoPostal = varApartadoPostal;
			
			item.TelefonoCasa = varTelefonoCasa;
			
			item.TelefonoOficina = varTelefonoOficina;
			
			item.Extension = varExtension;
			
			item.Fax = varFax;
			
			item.Email = varEmail;
			
			item.SitioWeb = varSitioWeb;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varDireccionId,string varCalle,string varNumero,int? varCiudadId,int? varSectorId,string varApartadoPostal,string varTelefonoCasa,string varTelefonoOficina,int? varExtension,string varFax,string varEmail,string varSitioWeb)
		{
			Direccion item = new Direccion();
			
				item.DireccionId = varDireccionId;
			
				item.Calle = varCalle;
			
				item.Numero = varNumero;
			
				item.CiudadId = varCiudadId;
			
				item.SectorId = varSectorId;
			
				item.ApartadoPostal = varApartadoPostal;
			
				item.TelefonoCasa = varTelefonoCasa;
			
				item.TelefonoOficina = varTelefonoOficina;
			
				item.Extension = varExtension;
			
				item.Fax = varFax;
			
				item.Email = varEmail;
			
				item.SitioWeb = varSitioWeb;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn DireccionIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn CalleColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn NumeroColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn CiudadIdColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn SectorIdColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ApartadoPostalColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn TelefonoCasaColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn TelefonoOficinaColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ExtensionColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn FaxColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn EmailColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn SitioWebColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string DireccionId = @"DireccionId";
			 public static string Calle = @"Calle";
			 public static string Numero = @"Numero";
			 public static string CiudadId = @"CiudadId";
			 public static string SectorId = @"SectorId";
			 public static string ApartadoPostal = @"ApartadoPostal";
			 public static string TelefonoCasa = @"TelefonoCasa";
			 public static string TelefonoOficina = @"TelefonoOficina";
			 public static string Extension = @"Extension";
			 public static string Fax = @"Fax";
			 public static string Email = @"Email";
			 public static string SitioWeb = @"SitioWeb";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
