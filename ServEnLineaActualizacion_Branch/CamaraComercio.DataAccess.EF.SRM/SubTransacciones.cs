//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace CamaraComercio.DataAccess.EF.SRM
{
    public partial class SubTransacciones
    {
        #region Property Metadata
    	
    	public struct PropColumns
    	{
    		public static string SubTransaccionId = @"SubTransaccionId";
    public static string TransaccionId = @"TransaccionId";
    public static string TipoTransaccionId = @"TipoTransaccionId";
    public static string TipoServicioId = @"TipoServicioId";
    public static string DestinoTraslado = @"DestinoTraslado";
    public static string FlowId = @"FlowId";
    public static string Estatus = @"Estatus";
    public static string Estatus2 = @"Estatus2";
    public static string CustomString1 = @"CustomString1";
    public static string CustomString2 = @"CustomString2";
    public static string CustomString3 = @"CustomString3";
    public static string CustomInt1 = @"CustomInt1";
    public static string CustomInt2 = @"CustomInt2";
    public static string CustomInt3 = @"CustomInt3";
    public static string CustomDateTime1 = @"CustomDateTime1";
    public static string CustomDateTime2 = @"CustomDateTime2";
    public static string CustomDecimal1 = @"CustomDecimal1";
    public static string CustomDecimal2 = @"CustomDecimal2";
    public static string FechaModificacion = @"FechaModificacion";
    public static string TipoServicio = @"TipoServicio";
    public static string TipoServicioSufijo = @"TipoServicioSufijo";
    public static string Servicio = @"Servicio";
    public static string Invalida = @"Invalida";
    public static string SubTransaccionPadreId = @"SubTransaccionPadreId";
    public static string Fecha = @"Fecha";
     
    	}
        #endregion

        #region Primitive Properties
    
        public virtual int SubTransaccionId
        {
            get;
            set;
        }
    
        public virtual int TransaccionId
        {
            get { return _transaccionId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_transaccionId != value)
                    {
                        if (Transacciones != null && Transacciones.TransaccionId != value)
                        {
                            Transacciones = null;
                        }
                        _transaccionId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _transaccionId;
    
        public virtual int TipoTransaccionId
        {
            get;
            set;
        }
    
        public virtual int TipoServicioId
        {
            get;
            set;
        }
    
        public virtual string DestinoTraslado
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> FlowId
        {
            get;
            set;
        }
    
        public virtual int Estatus
        {
            get;
            set;
        }
    
        public virtual Nullable<int> Estatus2
        {
            get;
            set;
        }
    
        public virtual string CustomString1
        {
            get;
            set;
        }
    
        public virtual string CustomString2
        {
            get;
            set;
        }
    
        public virtual string CustomString3
        {
            get;
            set;
        }
    
        public virtual Nullable<int> CustomInt1
        {
            get;
            set;
        }
    
        public virtual Nullable<int> CustomInt2
        {
            get;
            set;
        }
    
        public virtual Nullable<int> CustomInt3
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> CustomDateTime1
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> CustomDateTime2
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> CustomDecimal1
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> CustomDecimal2
        {
            get;
            set;
        }
    
        public virtual System.DateTime FechaModificacion
        {
            get;
            set;
        }
    
        public virtual System.Guid rowguid
        {
            get;
            set;
        }
    
        public virtual string TipoServicio
        {
            get;
            set;
        }
    
        public virtual string TipoServicioSufijo
        {
            get;
            set;
        }
    
        public virtual string Servicio
        {
            get;
            set;
        }
    
        public virtual bool Invalida
        {
            get;
            set;
        }
    
        public virtual Nullable<int> SubTransaccionPadreId
        {
            get { return _subTransaccionPadreId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_subTransaccionPadreId != value)
                    {
                        if (SubTransaccionPadre != null && SubTransaccionPadre.SubTransaccionId != value)
                        {
                            SubTransaccionPadre = null;
                        }
                        _subTransaccionPadreId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _subTransaccionPadreId;
    
        public virtual Nullable<System.DateTime> Fecha
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<SubTransacciones> SubTransaccionesHijas
        {
            get
            {
                if (_subTransaccionesHijas == null)
                {
                    var newCollection = new FixupCollection<SubTransacciones>();
                    newCollection.CollectionChanged += FixupSubTransaccionesHijas;
                    _subTransaccionesHijas = newCollection;
                }
                return _subTransaccionesHijas;
            }
            set
            {
                if (!ReferenceEquals(_subTransaccionesHijas, value))
                {
                    var previousValue = _subTransaccionesHijas as FixupCollection<SubTransacciones>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSubTransaccionesHijas;
                    }
                    _subTransaccionesHijas = value;
                    var newValue = value as FixupCollection<SubTransacciones>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSubTransaccionesHijas;
                    }
                }
            }
        }
        private ICollection<SubTransacciones> _subTransaccionesHijas;
    
        public virtual SubTransacciones SubTransaccionPadre
        {
            get { return _subTransaccionPadre; }
            set
            {
                if (!ReferenceEquals(_subTransaccionPadre, value))
                {
                    var previousValue = _subTransaccionPadre;
                    _subTransaccionPadre = value;
                    FixupSubTransaccionPadre(previousValue);
                }
            }
        }
        private SubTransacciones _subTransaccionPadre;
    
        public virtual Transacciones Transacciones
        {
            get { return _transacciones; }
            set
            {
                if (!ReferenceEquals(_transacciones, value))
                {
                    var previousValue = _transacciones;
                    _transacciones = value;
                    FixupTransacciones(previousValue);
                }
            }
        }
        private Transacciones _transacciones;
    
        public virtual ICollection<DocumentosTransacciones> DocumentosSubTransacciones
        {
            get
            {
                if (_documentosSubTransacciones == null)
                {
                    var newCollection = new FixupCollection<DocumentosTransacciones>();
                    newCollection.CollectionChanged += FixupDocumentosSubTransacciones;
                    _documentosSubTransacciones = newCollection;
                }
                return _documentosSubTransacciones;
            }
            set
            {
                if (!ReferenceEquals(_documentosSubTransacciones, value))
                {
                    var previousValue = _documentosSubTransacciones as FixupCollection<DocumentosTransacciones>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDocumentosSubTransacciones;
                    }
                    _documentosSubTransacciones = value;
                    var newValue = value as FixupCollection<DocumentosTransacciones>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDocumentosSubTransacciones;
                    }
                }
            }
        }
        private ICollection<DocumentosTransacciones> _documentosSubTransacciones;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupSubTransaccionPadre(SubTransacciones previousValue)
        {
            if (previousValue != null && previousValue.SubTransaccionesHijas.Contains(this))
            {
                previousValue.SubTransaccionesHijas.Remove(this);
            }
    
            if (SubTransaccionPadre != null)
            {
                if (!SubTransaccionPadre.SubTransaccionesHijas.Contains(this))
                {
                    SubTransaccionPadre.SubTransaccionesHijas.Add(this);
                }
                if (SubTransaccionPadreId != SubTransaccionPadre.SubTransaccionId)
                {
                    SubTransaccionPadreId = SubTransaccionPadre.SubTransaccionId;
                }
            }
            else if (!_settingFK)
            {
                SubTransaccionPadreId = null;
            }
        }
    
        private void FixupTransacciones(Transacciones previousValue)
        {
            if (previousValue != null && previousValue.SubTransacciones.Contains(this))
            {
                previousValue.SubTransacciones.Remove(this);
            }
    
            if (Transacciones != null)
            {
                if (!Transacciones.SubTransacciones.Contains(this))
                {
                    Transacciones.SubTransacciones.Add(this);
                }
                if (TransaccionId != Transacciones.TransaccionId)
                {
                    TransaccionId = Transacciones.TransaccionId;
                }
            }
        }
    
        private void FixupSubTransaccionesHijas(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SubTransacciones item in e.NewItems)
                {
                    item.SubTransaccionPadre = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SubTransacciones item in e.OldItems)
                {
                    if (ReferenceEquals(item.SubTransaccionPadre, this))
                    {
                        item.SubTransaccionPadre = null;
                    }
                }
            }
        }
    
        private void FixupDocumentosSubTransacciones(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (DocumentosTransacciones item in e.NewItems)
                {
                    item.SubTransacciones = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DocumentosTransacciones item in e.OldItems)
                {
                    if (ReferenceEquals(item.SubTransacciones, this))
                    {
                        item.SubTransacciones = null;
                    }
                }
            }
        }

        #endregion

    }
}
