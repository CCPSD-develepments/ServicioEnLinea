using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace CamaraComercio.DataAccess.Comun
{
    /// <summary>
    /// Controller class for Servicio
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class ServicioController
    {
        // Preload our schema..
        Servicio thisSchemaLoad = new Servicio();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public ServicioCollection FetchAll()
        {
            ServicioCollection coll = new ServicioCollection();
            Query qry = new Query(Servicio.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public ServicioCollection FetchByID(object ServicioId)
        {
            ServicioCollection coll = new ServicioCollection().Where("ServicioId", ServicioId).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public ServicioCollection FetchByQuery(Query qry)
        {
            ServicioCollection coll = new ServicioCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object ServicioId)
        {
            return (Servicio.Delete(ServicioId) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object ServicioId)
        {
            return (Servicio.Destroy(ServicioId) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(string Descripcion,int TipoServicioId,decimal CostoServicio,bool CalculoBaseCapital,int TipoCalculoBaseCapital,bool ServicioParalelo,int ServicioFlowId,string Cuenta,bool SeCobra,bool SinDocumento,bool SubTransaccional,bool AfectaOtraCompania,DateTime FechaModificacion,bool ValidarRenovacion,bool EsTransformacion,int TipoIdentificador,bool Visible,bool SiteVisible,string ServicioCode)
	    {
		    Servicio item = new Servicio();
		    
            item.Descripcion = Descripcion;
            
            item.TipoServicioId = TipoServicioId;
            
            item.CostoServicio = CostoServicio;
            
            item.CalculoBaseCapital = CalculoBaseCapital;
            
            item.TipoCalculoBaseCapital = TipoCalculoBaseCapital;
            
            item.ServicioParalelo = ServicioParalelo;
            
            item.ServicioFlowId = ServicioFlowId;
            
            item.Cuenta = Cuenta;
            
            item.SeCobra = SeCobra;
            
            item.SinDocumento = SinDocumento;
            
            item.SubTransaccional = SubTransaccional;
            
            item.AfectaOtraCompania = AfectaOtraCompania;
            
            item.FechaModificacion = FechaModificacion;
            
            item.ValidarRenovacion = ValidarRenovacion;
            
            item.EsTransformacion = EsTransformacion;
            
            item.TipoIdentificador = TipoIdentificador;
            
            item.Visible = Visible;
            
            item.SiteVisible = SiteVisible;
            
            item.ServicioCode = ServicioCode;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int ServicioId,string Descripcion,int TipoServicioId,decimal CostoServicio,bool CalculoBaseCapital,int TipoCalculoBaseCapital,bool ServicioParalelo,int ServicioFlowId,string Cuenta,bool SeCobra,bool SinDocumento,bool SubTransaccional,bool AfectaOtraCompania,DateTime FechaModificacion,bool ValidarRenovacion,bool EsTransformacion,int TipoIdentificador,bool Visible,bool SiteVisible,string ServicioCode)
	    {
		    Servicio item = new Servicio();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.ServicioId = ServicioId;
				
			item.Descripcion = Descripcion;
				
			item.TipoServicioId = TipoServicioId;
				
			item.CostoServicio = CostoServicio;
				
			item.CalculoBaseCapital = CalculoBaseCapital;
				
			item.TipoCalculoBaseCapital = TipoCalculoBaseCapital;
				
			item.ServicioParalelo = ServicioParalelo;
				
			item.ServicioFlowId = ServicioFlowId;
				
			item.Cuenta = Cuenta;
				
			item.SeCobra = SeCobra;
				
			item.SinDocumento = SinDocumento;
				
			item.SubTransaccional = SubTransaccional;
				
			item.AfectaOtraCompania = AfectaOtraCompania;
				
			item.FechaModificacion = FechaModificacion;
				
			item.ValidarRenovacion = ValidarRenovacion;
				
			item.EsTransformacion = EsTransformacion;
				
			item.TipoIdentificador = TipoIdentificador;
				
			item.Visible = Visible;
				
			item.SiteVisible = SiteVisible;
				
			item.ServicioCode = ServicioCode;
				
	        item.Save(UserName);
	    }
    }
}
