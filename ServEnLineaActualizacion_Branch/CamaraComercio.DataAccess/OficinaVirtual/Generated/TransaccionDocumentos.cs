using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace CamaraComercio.DataAccess.OficinaVirtual
{
	/// <summary>
	/// Strongly-typed collection for the TransaccionDocumentos class.
	/// </summary>
    [Serializable]
	public partial class TransaccionDocumentosCollection : ActiveList<TransaccionDocumentos, TransaccionDocumentosCollection>
	{	   
		public TransaccionDocumentosCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TransaccionDocumentosCollection</returns>
		public TransaccionDocumentosCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TransaccionDocumentos o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TransaccionesDocumentos table.
	/// </summary>
	[Serializable]
	public partial class TransaccionDocumentos : ActiveRecord<TransaccionDocumentos>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TransaccionDocumentos()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TransaccionDocumentos(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TransaccionDocumentos(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TransaccionDocumentos(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TransaccionesDocumentos", TableType.Table, DataService.GetInstance("OficinaVirtualProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"WebSRM";
				//columns
				
				TableSchema.TableColumn colvarTransaccionDocumentosId = new TableSchema.TableColumn(schema);
				colvarTransaccionDocumentosId.ColumnName = "TransaccionesDocumentosId";
				colvarTransaccionDocumentosId.DataType = DbType.Int32;
				colvarTransaccionDocumentosId.MaxLength = 0;
				colvarTransaccionDocumentosId.AutoIncrement = true;
				colvarTransaccionDocumentosId.IsNullable = false;
				colvarTransaccionDocumentosId.IsPrimaryKey = true;
				colvarTransaccionDocumentosId.IsForeignKey = false;
				colvarTransaccionDocumentosId.IsReadOnly = false;
				colvarTransaccionDocumentosId.DefaultSetting = @"";
				colvarTransaccionDocumentosId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTransaccionDocumentosId);
				
				TableSchema.TableColumn colvarTransaccionId = new TableSchema.TableColumn(schema);
				colvarTransaccionId.ColumnName = "TransaccionId";
				colvarTransaccionId.DataType = DbType.Int32;
				colvarTransaccionId.MaxLength = 0;
				colvarTransaccionId.AutoIncrement = false;
				colvarTransaccionId.IsNullable = false;
				colvarTransaccionId.IsPrimaryKey = false;
				colvarTransaccionId.IsForeignKey = true;
				colvarTransaccionId.IsReadOnly = false;
				colvarTransaccionId.DefaultSetting = @"";
				
					colvarTransaccionId.ForeignKeyTableName = "Transacciones";
				schema.Columns.Add(colvarTransaccionId);
				
				TableSchema.TableColumn colvarTipoDocumentoId = new TableSchema.TableColumn(schema);
				colvarTipoDocumentoId.ColumnName = "TipoDocumentoId";
				colvarTipoDocumentoId.DataType = DbType.Int32;
				colvarTipoDocumentoId.MaxLength = 0;
				colvarTipoDocumentoId.AutoIncrement = false;
				colvarTipoDocumentoId.IsNullable = true;
				colvarTipoDocumentoId.IsPrimaryKey = false;
				colvarTipoDocumentoId.IsForeignKey = false;
				colvarTipoDocumentoId.IsReadOnly = false;
				colvarTipoDocumentoId.DefaultSetting = @"";
				colvarTipoDocumentoId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTipoDocumentoId);
				
				TableSchema.TableColumn colvarNombre = new TableSchema.TableColumn(schema);
				colvarNombre.ColumnName = "Nombre";
				colvarNombre.DataType = DbType.AnsiString;
				colvarNombre.MaxLength = 150;
				colvarNombre.AutoIncrement = false;
				colvarNombre.IsNullable = true;
				colvarNombre.IsPrimaryKey = false;
				colvarNombre.IsForeignKey = false;
				colvarNombre.IsReadOnly = false;
				colvarNombre.DefaultSetting = @"";
				colvarNombre.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNombre);
				
				TableSchema.TableColumn colvarDescripcion = new TableSchema.TableColumn(schema);
				colvarDescripcion.ColumnName = "Descripcion";
				colvarDescripcion.DataType = DbType.AnsiString;
				colvarDescripcion.MaxLength = 250;
				colvarDescripcion.AutoIncrement = false;
				colvarDescripcion.IsNullable = true;
				colvarDescripcion.IsPrimaryKey = false;
				colvarDescripcion.IsForeignKey = false;
				colvarDescripcion.IsReadOnly = false;
				colvarDescripcion.DefaultSetting = @"";
				colvarDescripcion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescripcion);
				
				TableSchema.TableColumn colvarNombreArchivo = new TableSchema.TableColumn(schema);
				colvarNombreArchivo.ColumnName = "NombreArchivo";
				colvarNombreArchivo.DataType = DbType.AnsiString;
				colvarNombreArchivo.MaxLength = 250;
				colvarNombreArchivo.AutoIncrement = false;
				colvarNombreArchivo.IsNullable = true;
				colvarNombreArchivo.IsPrimaryKey = false;
				colvarNombreArchivo.IsForeignKey = false;
				colvarNombreArchivo.IsReadOnly = false;
				colvarNombreArchivo.DefaultSetting = @"";
				colvarNombreArchivo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNombreArchivo);
				
				TableSchema.TableColumn colvarFechaEnvio = new TableSchema.TableColumn(schema);
				colvarFechaEnvio.ColumnName = "FechaEnvio";
				colvarFechaEnvio.DataType = DbType.DateTime;
				colvarFechaEnvio.MaxLength = 0;
				colvarFechaEnvio.AutoIncrement = false;
				colvarFechaEnvio.IsNullable = true;
				colvarFechaEnvio.IsPrimaryKey = false;
				colvarFechaEnvio.IsForeignKey = false;
				colvarFechaEnvio.IsReadOnly = false;
				colvarFechaEnvio.DefaultSetting = @"";
				colvarFechaEnvio.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFechaEnvio);
				
				TableSchema.TableColumn colvarUsuario = new TableSchema.TableColumn(schema);
				colvarUsuario.ColumnName = "Usuario";
				colvarUsuario.DataType = DbType.AnsiString;
				colvarUsuario.MaxLength = 50;
				colvarUsuario.AutoIncrement = false;
				colvarUsuario.IsNullable = false;
				colvarUsuario.IsPrimaryKey = false;
				colvarUsuario.IsForeignKey = false;
				colvarUsuario.IsReadOnly = false;
				colvarUsuario.DefaultSetting = @"";
				colvarUsuario.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUsuario);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["OficinaVirtualProvider"].AddSchema("TransaccionesDocumentos",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("TransaccionDocumentosId")]
		[Bindable(true)]
		public int TransaccionDocumentosId 
		{
			get { return GetColumnValue<int>(Columns.TransaccionDocumentosId); }
			set { SetColumnValue(Columns.TransaccionDocumentosId, value); }
		}
		  
		[XmlAttribute("TransaccionId")]
		[Bindable(true)]
		public int TransaccionId 
		{
			get { return GetColumnValue<int>(Columns.TransaccionId); }
			set { SetColumnValue(Columns.TransaccionId, value); }
		}
		  
		[XmlAttribute("TipoDocumentoId")]
		[Bindable(true)]
		public int? TipoDocumentoId 
		{
			get { return GetColumnValue<int?>(Columns.TipoDocumentoId); }
			set { SetColumnValue(Columns.TipoDocumentoId, value); }
		}
		  
		[XmlAttribute("Nombre")]
		[Bindable(true)]
		public string Nombre 
		{
			get { return GetColumnValue<string>(Columns.Nombre); }
			set { SetColumnValue(Columns.Nombre, value); }
		}
		  
		[XmlAttribute("Descripcion")]
		[Bindable(true)]
		public string Descripcion 
		{
			get { return GetColumnValue<string>(Columns.Descripcion); }
			set { SetColumnValue(Columns.Descripcion, value); }
		}
		  
		[XmlAttribute("NombreArchivo")]
		[Bindable(true)]
		public string NombreArchivo 
		{
			get { return GetColumnValue<string>(Columns.NombreArchivo); }
			set { SetColumnValue(Columns.NombreArchivo, value); }
		}
		  
		[XmlAttribute("FechaEnvio")]
		[Bindable(true)]
		public DateTime? FechaEnvio 
		{
			get { return GetColumnValue<DateTime?>(Columns.FechaEnvio); }
			set { SetColumnValue(Columns.FechaEnvio, value); }
		}
		  
		[XmlAttribute("Usuario")]
		[Bindable(true)]
		public string Usuario 
		{
			get { return GetColumnValue<string>(Columns.Usuario); }
			set { SetColumnValue(Columns.Usuario, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a Transaccion ActiveRecord object related to this TransaccionDocumentos
		/// 
		/// </summary>
		public CamaraComercio.DataAccess.OficinaVirtual.Transaccion Transaccion
		{
			get { return CamaraComercio.DataAccess.OficinaVirtual.Transaccion.FetchByID(this.TransaccionId); }
			set { SetColumnValue("TransaccionId", value.TransaccionId); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varTransaccionId,int? varTipoDocumentoId,string varNombre,string varDescripcion,string varNombreArchivo,DateTime? varFechaEnvio,string varUsuario)
		{
			TransaccionDocumentos item = new TransaccionDocumentos();
			
			item.TransaccionId = varTransaccionId;
			
			item.TipoDocumentoId = varTipoDocumentoId;
			
			item.Nombre = varNombre;
			
			item.Descripcion = varDescripcion;
			
			item.NombreArchivo = varNombreArchivo;
			
			item.FechaEnvio = varFechaEnvio;
			
			item.Usuario = varUsuario;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varTransaccionDocumentosId,int varTransaccionId,int? varTipoDocumentoId,string varNombre,string varDescripcion,string varNombreArchivo,DateTime? varFechaEnvio,string varUsuario)
		{
			TransaccionDocumentos item = new TransaccionDocumentos();
			
				item.TransaccionDocumentosId = varTransaccionDocumentosId;
			
				item.TransaccionId = varTransaccionId;
			
				item.TipoDocumentoId = varTipoDocumentoId;
			
				item.Nombre = varNombre;
			
				item.Descripcion = varDescripcion;
			
				item.NombreArchivo = varNombreArchivo;
			
				item.FechaEnvio = varFechaEnvio;
			
				item.Usuario = varUsuario;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn TransaccionDocumentosIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn TransaccionIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn TipoDocumentoIdColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn NombreColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn DescripcionColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn NombreArchivoColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn FechaEnvioColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn UsuarioColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string TransaccionDocumentosId = @"TransaccionesDocumentosId";
			 public static string TransaccionId = @"TransaccionId";
			 public static string TipoDocumentoId = @"TipoDocumentoId";
			 public static string Nombre = @"Nombre";
			 public static string Descripcion = @"Descripcion";
			 public static string NombreArchivo = @"NombreArchivo";
			 public static string FechaEnvio = @"FechaEnvio";
			 public static string Usuario = @"Usuario";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
