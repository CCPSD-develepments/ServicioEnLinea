using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace CamaraComercio.DataAccess.SRM
{
	/// <summary>
	/// Strongly-typed collection for the TiposNCF class.
	/// </summary>
    [Serializable]
	public partial class TiposNCFCollection : ActiveList<TiposNCF, TiposNCFCollection>
	{	   
		public TiposNCFCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TiposNCFCollection</returns>
		public TiposNCFCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TiposNCF o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TiposNCF table.
	/// </summary>
	[Serializable]
	public partial class TiposNCF : ActiveRecord<TiposNCF>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TiposNCF()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TiposNCF(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TiposNCF(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TiposNCF(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TiposNCF", TableType.Table, DataService.GetInstance("SrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"Sistema";
				//columns
				
				TableSchema.TableColumn colvarTipoNcfId = new TableSchema.TableColumn(schema);
				colvarTipoNcfId.ColumnName = "TipoNcfId";
				colvarTipoNcfId.DataType = DbType.Int32;
				colvarTipoNcfId.MaxLength = 0;
				colvarTipoNcfId.AutoIncrement = true;
				colvarTipoNcfId.IsNullable = false;
				colvarTipoNcfId.IsPrimaryKey = true;
				colvarTipoNcfId.IsForeignKey = false;
				colvarTipoNcfId.IsReadOnly = false;
				colvarTipoNcfId.DefaultSetting = @"";
				colvarTipoNcfId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTipoNcfId);
				
				TableSchema.TableColumn colvarDescripcion = new TableSchema.TableColumn(schema);
				colvarDescripcion.ColumnName = "Descripcion";
				colvarDescripcion.DataType = DbType.String;
				colvarDescripcion.MaxLength = 255;
				colvarDescripcion.AutoIncrement = false;
				colvarDescripcion.IsNullable = false;
				colvarDescripcion.IsPrimaryKey = false;
				colvarDescripcion.IsForeignKey = false;
				colvarDescripcion.IsReadOnly = false;
				colvarDescripcion.DefaultSetting = @"";
				colvarDescripcion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescripcion);
				
				TableSchema.TableColumn colvarCodigo = new TableSchema.TableColumn(schema);
				colvarCodigo.ColumnName = "Codigo";
				colvarCodigo.DataType = DbType.AnsiString;
				colvarCodigo.MaxLength = 15;
				colvarCodigo.AutoIncrement = false;
				colvarCodigo.IsNullable = false;
				colvarCodigo.IsPrimaryKey = false;
				colvarCodigo.IsForeignKey = false;
				colvarCodigo.IsReadOnly = false;
				colvarCodigo.DefaultSetting = @"";
				colvarCodigo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCodigo);
				
				TableSchema.TableColumn colvarSecuencia = new TableSchema.TableColumn(schema);
				colvarSecuencia.ColumnName = "Secuencia";
				colvarSecuencia.DataType = DbType.Int32;
				colvarSecuencia.MaxLength = 0;
				colvarSecuencia.AutoIncrement = false;
				colvarSecuencia.IsNullable = false;
				colvarSecuencia.IsPrimaryKey = false;
				colvarSecuencia.IsForeignKey = false;
				colvarSecuencia.IsReadOnly = false;
				colvarSecuencia.DefaultSetting = @"";
				colvarSecuencia.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSecuencia);
				
				TableSchema.TableColumn colvarDesde = new TableSchema.TableColumn(schema);
				colvarDesde.ColumnName = "Desde";
				colvarDesde.DataType = DbType.Int32;
				colvarDesde.MaxLength = 0;
				colvarDesde.AutoIncrement = false;
				colvarDesde.IsNullable = false;
				colvarDesde.IsPrimaryKey = false;
				colvarDesde.IsForeignKey = false;
				colvarDesde.IsReadOnly = false;
				colvarDesde.DefaultSetting = @"";
				colvarDesde.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDesde);
				
				TableSchema.TableColumn colvarHasta = new TableSchema.TableColumn(schema);
				colvarHasta.ColumnName = "Hasta";
				colvarHasta.DataType = DbType.Int32;
				colvarHasta.MaxLength = 0;
				colvarHasta.AutoIncrement = false;
				colvarHasta.IsNullable = false;
				colvarHasta.IsPrimaryKey = false;
				colvarHasta.IsForeignKey = false;
				colvarHasta.IsReadOnly = false;
				colvarHasta.DefaultSetting = @"";
				colvarHasta.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHasta);
				
				TableSchema.TableColumn colvarValorAviso = new TableSchema.TableColumn(schema);
				colvarValorAviso.ColumnName = "ValorAviso";
				colvarValorAviso.DataType = DbType.Int32;
				colvarValorAviso.MaxLength = 0;
				colvarValorAviso.AutoIncrement = false;
				colvarValorAviso.IsNullable = false;
				colvarValorAviso.IsPrimaryKey = false;
				colvarValorAviso.IsForeignKey = false;
				colvarValorAviso.IsReadOnly = false;
				colvarValorAviso.DefaultSetting = @"";
				colvarValorAviso.ForeignKeyTableName = "";
				schema.Columns.Add(colvarValorAviso);
				
				TableSchema.TableColumn colvarDefaultNcf = new TableSchema.TableColumn(schema);
				colvarDefaultNcf.ColumnName = "DefaultNcf";
				colvarDefaultNcf.DataType = DbType.Boolean;
				colvarDefaultNcf.MaxLength = 0;
				colvarDefaultNcf.AutoIncrement = false;
				colvarDefaultNcf.IsNullable = false;
				colvarDefaultNcf.IsPrimaryKey = false;
				colvarDefaultNcf.IsForeignKey = false;
				colvarDefaultNcf.IsReadOnly = false;
				colvarDefaultNcf.DefaultSetting = @"";
				colvarDefaultNcf.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDefaultNcf);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["SrmProvider"].AddSchema("TiposNCF",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("TipoNcfId")]
		[Bindable(true)]
		public int TipoNcfId 
		{
			get { return GetColumnValue<int>(Columns.TipoNcfId); }
			set { SetColumnValue(Columns.TipoNcfId, value); }
		}
		  
		[XmlAttribute("Descripcion")]
		[Bindable(true)]
		public string Descripcion 
		{
			get { return GetColumnValue<string>(Columns.Descripcion); }
			set { SetColumnValue(Columns.Descripcion, value); }
		}
		  
		[XmlAttribute("Codigo")]
		[Bindable(true)]
		public string Codigo 
		{
			get { return GetColumnValue<string>(Columns.Codigo); }
			set { SetColumnValue(Columns.Codigo, value); }
		}
		  
		[XmlAttribute("Secuencia")]
		[Bindable(true)]
		public int Secuencia 
		{
			get { return GetColumnValue<int>(Columns.Secuencia); }
			set { SetColumnValue(Columns.Secuencia, value); }
		}
		  
		[XmlAttribute("Desde")]
		[Bindable(true)]
		public int Desde 
		{
			get { return GetColumnValue<int>(Columns.Desde); }
			set { SetColumnValue(Columns.Desde, value); }
		}
		  
		[XmlAttribute("Hasta")]
		[Bindable(true)]
		public int Hasta 
		{
			get { return GetColumnValue<int>(Columns.Hasta); }
			set { SetColumnValue(Columns.Hasta, value); }
		}
		  
		[XmlAttribute("ValorAviso")]
		[Bindable(true)]
		public int ValorAviso 
		{
			get { return GetColumnValue<int>(Columns.ValorAviso); }
			set { SetColumnValue(Columns.ValorAviso, value); }
		}
		  
		[XmlAttribute("DefaultNcf")]
		[Bindable(true)]
		public bool DefaultNcf 
		{
			get { return GetColumnValue<bool>(Columns.DefaultNcf); }
			set { SetColumnValue(Columns.DefaultNcf, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varDescripcion,string varCodigo,int varSecuencia,int varDesde,int varHasta,int varValorAviso,bool varDefaultNcf)
		{
			TiposNCF item = new TiposNCF();
			
			item.Descripcion = varDescripcion;
			
			item.Codigo = varCodigo;
			
			item.Secuencia = varSecuencia;
			
			item.Desde = varDesde;
			
			item.Hasta = varHasta;
			
			item.ValorAviso = varValorAviso;
			
			item.DefaultNcf = varDefaultNcf;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varTipoNcfId,string varDescripcion,string varCodigo,int varSecuencia,int varDesde,int varHasta,int varValorAviso,bool varDefaultNcf)
		{
			TiposNCF item = new TiposNCF();
			
				item.TipoNcfId = varTipoNcfId;
			
				item.Descripcion = varDescripcion;
			
				item.Codigo = varCodigo;
			
				item.Secuencia = varSecuencia;
			
				item.Desde = varDesde;
			
				item.Hasta = varHasta;
			
				item.ValorAviso = varValorAviso;
			
				item.DefaultNcf = varDefaultNcf;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn TipoNcfIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn DescripcionColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn CodigoColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn SecuenciaColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn DesdeColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn HastaColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ValorAvisoColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn DefaultNcfColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string TipoNcfId = @"TipoNcfId";
			 public static string Descripcion = @"Descripcion";
			 public static string Codigo = @"Codigo";
			 public static string Secuencia = @"Secuencia";
			 public static string Desde = @"Desde";
			 public static string Hasta = @"Hasta";
			 public static string ValorAviso = @"ValorAviso";
			 public static string DefaultNcf = @"DefaultNcf";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
