using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace CamaraComercio.DataAccess.SRM{
    /// <summary>
    /// Strongly-typed collection for the ViewModulosRoles class.
    /// </summary>
    [Serializable]
    public partial class ViewModulosRolesCollection : ReadOnlyList<ViewModulosRoles, ViewModulosRolesCollection>
    {        
        public ViewModulosRolesCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the cvw_ModulosRoles view.
    /// </summary>
    [Serializable]
    public partial class ViewModulosRoles : ReadOnlyRecord<ViewModulosRoles>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("cvw_ModulosRoles", TableType.View, DataService.GetInstance("SrmProvider"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
                colvarId.ColumnName = "ID";
                colvarId.DataType = DbType.Int32;
                colvarId.MaxLength = 0;
                colvarId.AutoIncrement = false;
                colvarId.IsNullable = false;
                colvarId.IsPrimaryKey = false;
                colvarId.IsForeignKey = false;
                colvarId.IsReadOnly = false;
                
                schema.Columns.Add(colvarId);
                
                TableSchema.TableColumn colvarModuloId = new TableSchema.TableColumn(schema);
                colvarModuloId.ColumnName = "ModuloId";
                colvarModuloId.DataType = DbType.Int32;
                colvarModuloId.MaxLength = 0;
                colvarModuloId.AutoIncrement = false;
                colvarModuloId.IsNullable = false;
                colvarModuloId.IsPrimaryKey = false;
                colvarModuloId.IsForeignKey = false;
                colvarModuloId.IsReadOnly = false;
                
                schema.Columns.Add(colvarModuloId);
                
                TableSchema.TableColumn colvarRolId = new TableSchema.TableColumn(schema);
                colvarRolId.ColumnName = "RolId";
                colvarRolId.DataType = DbType.Int32;
                colvarRolId.MaxLength = 0;
                colvarRolId.AutoIncrement = false;
                colvarRolId.IsNullable = false;
                colvarRolId.IsPrimaryKey = false;
                colvarRolId.IsForeignKey = false;
                colvarRolId.IsReadOnly = false;
                
                schema.Columns.Add(colvarRolId);
                
                TableSchema.TableColumn colvarTipoAcceso = new TableSchema.TableColumn(schema);
                colvarTipoAcceso.ColumnName = "TipoAcceso";
                colvarTipoAcceso.DataType = DbType.AnsiString;
                colvarTipoAcceso.MaxLength = 2;
                colvarTipoAcceso.AutoIncrement = false;
                colvarTipoAcceso.IsNullable = true;
                colvarTipoAcceso.IsPrimaryKey = false;
                colvarTipoAcceso.IsForeignKey = false;
                colvarTipoAcceso.IsReadOnly = false;
                
                schema.Columns.Add(colvarTipoAcceso);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["SrmProvider"].AddSchema("cvw_ModulosRoles",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public ViewModulosRoles()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public ViewModulosRoles(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public ViewModulosRoles(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public ViewModulosRoles(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("Id")]
        [Bindable(true)]
        public int Id 
	    {
		    get
		    {
			    return GetColumnValue<int>("ID");
		    }
            set 
		    {
			    SetColumnValue("ID", value);
            }
        }
	      
        [XmlAttribute("ModuloId")]
        [Bindable(true)]
        public int ModuloId 
	    {
		    get
		    {
			    return GetColumnValue<int>("ModuloId");
		    }
            set 
		    {
			    SetColumnValue("ModuloId", value);
            }
        }
	      
        [XmlAttribute("RolId")]
        [Bindable(true)]
        public int RolId 
	    {
		    get
		    {
			    return GetColumnValue<int>("RolId");
		    }
            set 
		    {
			    SetColumnValue("RolId", value);
            }
        }
	      
        [XmlAttribute("TipoAcceso")]
        [Bindable(true)]
        public string TipoAcceso 
	    {
		    get
		    {
			    return GetColumnValue<string>("TipoAcceso");
		    }
            set 
		    {
			    SetColumnValue("TipoAcceso", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string Id = @"ID";
            
            public static string ModuloId = @"ModuloId";
            
            public static string RolId = @"RolId";
            
            public static string TipoAcceso = @"TipoAcceso";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
