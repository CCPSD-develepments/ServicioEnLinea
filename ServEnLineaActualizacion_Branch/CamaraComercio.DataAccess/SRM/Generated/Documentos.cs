using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace CamaraComercio.DataAccess.SRM
{
	/// <summary>
	/// Strongly-typed collection for the Documentos class.
	/// </summary>
    [Serializable]
	public partial class DocumentosCollection : ActiveList<Documentos, DocumentosCollection>
	{	   
		public DocumentosCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>DocumentosCollection</returns>
		public DocumentosCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Documentos o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Documentos table.
	/// </summary>
	[Serializable]
	public partial class Documentos : ActiveRecord<Documentos>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public Documentos()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public Documentos(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public Documentos(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public Documentos(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Documentos", TableType.Table, DataService.GetInstance("SrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"Transaccion";
				//columns
				
				TableSchema.TableColumn colvarDocumentoId = new TableSchema.TableColumn(schema);
				colvarDocumentoId.ColumnName = "DocumentoId";
				colvarDocumentoId.DataType = DbType.Int32;
				colvarDocumentoId.MaxLength = 0;
				colvarDocumentoId.AutoIncrement = true;
				colvarDocumentoId.IsNullable = false;
				colvarDocumentoId.IsPrimaryKey = true;
				colvarDocumentoId.IsForeignKey = false;
				colvarDocumentoId.IsReadOnly = false;
				colvarDocumentoId.DefaultSetting = @"";
				colvarDocumentoId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDocumentoId);
				
				TableSchema.TableColumn colvarNombre = new TableSchema.TableColumn(schema);
				colvarNombre.ColumnName = "Nombre";
				colvarNombre.DataType = DbType.String;
				colvarNombre.MaxLength = 150;
				colvarNombre.AutoIncrement = false;
				colvarNombre.IsNullable = false;
				colvarNombre.IsPrimaryKey = false;
				colvarNombre.IsForeignKey = false;
				colvarNombre.IsReadOnly = false;
				colvarNombre.DefaultSetting = @"";
				colvarNombre.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNombre);
				
				TableSchema.TableColumn colvarRegsitrable = new TableSchema.TableColumn(schema);
				colvarRegsitrable.ColumnName = "Regsitrable";
				colvarRegsitrable.DataType = DbType.Boolean;
				colvarRegsitrable.MaxLength = 0;
				colvarRegsitrable.AutoIncrement = false;
				colvarRegsitrable.IsNullable = false;
				colvarRegsitrable.IsPrimaryKey = false;
				colvarRegsitrable.IsForeignKey = false;
				colvarRegsitrable.IsReadOnly = false;
				
						colvarRegsitrable.DefaultSetting = @"((0))";
				colvarRegsitrable.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegsitrable);
				
				TableSchema.TableColumn colvarCostoOriginal = new TableSchema.TableColumn(schema);
				colvarCostoOriginal.ColumnName = "CostoOriginal";
				colvarCostoOriginal.DataType = DbType.Currency;
				colvarCostoOriginal.MaxLength = 0;
				colvarCostoOriginal.AutoIncrement = false;
				colvarCostoOriginal.IsNullable = false;
				colvarCostoOriginal.IsPrimaryKey = false;
				colvarCostoOriginal.IsForeignKey = false;
				colvarCostoOriginal.IsReadOnly = false;
				colvarCostoOriginal.DefaultSetting = @"";
				colvarCostoOriginal.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCostoOriginal);
				
				TableSchema.TableColumn colvarCostoCopia = new TableSchema.TableColumn(schema);
				colvarCostoCopia.ColumnName = "CostoCopia";
				colvarCostoCopia.DataType = DbType.Currency;
				colvarCostoCopia.MaxLength = 0;
				colvarCostoCopia.AutoIncrement = false;
				colvarCostoCopia.IsNullable = false;
				colvarCostoCopia.IsPrimaryKey = false;
				colvarCostoCopia.IsForeignKey = false;
				colvarCostoCopia.IsReadOnly = false;
				colvarCostoCopia.DefaultSetting = @"";
				colvarCostoCopia.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCostoCopia);
				
				TableSchema.TableColumn colvarFechaModificacion = new TableSchema.TableColumn(schema);
				colvarFechaModificacion.ColumnName = "FechaModificacion";
				colvarFechaModificacion.DataType = DbType.DateTime;
				colvarFechaModificacion.MaxLength = 0;
				colvarFechaModificacion.AutoIncrement = false;
				colvarFechaModificacion.IsNullable = false;
				colvarFechaModificacion.IsPrimaryKey = false;
				colvarFechaModificacion.IsForeignKey = false;
				colvarFechaModificacion.IsReadOnly = false;
				
						colvarFechaModificacion.DefaultSetting = @"(getdate())";
				colvarFechaModificacion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFechaModificacion);
				
				TableSchema.TableColumn colvarRowguid = new TableSchema.TableColumn(schema);
				colvarRowguid.ColumnName = "rowguid";
				colvarRowguid.DataType = DbType.Guid;
				colvarRowguid.MaxLength = 0;
				colvarRowguid.AutoIncrement = false;
				colvarRowguid.IsNullable = false;
				colvarRowguid.IsPrimaryKey = false;
				colvarRowguid.IsForeignKey = false;
				colvarRowguid.IsReadOnly = false;
				
						colvarRowguid.DefaultSetting = @"(newid())";
				colvarRowguid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRowguid);
				
				TableSchema.TableColumn colvarVisible = new TableSchema.TableColumn(schema);
				colvarVisible.ColumnName = "Visible";
				colvarVisible.DataType = DbType.Boolean;
				colvarVisible.MaxLength = 0;
				colvarVisible.AutoIncrement = false;
				colvarVisible.IsNullable = true;
				colvarVisible.IsPrimaryKey = false;
				colvarVisible.IsForeignKey = false;
				colvarVisible.IsReadOnly = false;
				colvarVisible.DefaultSetting = @"";
				colvarVisible.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVisible);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["SrmProvider"].AddSchema("Documentos",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("DocumentoId")]
		[Bindable(true)]
		public int DocumentoId 
		{
			get { return GetColumnValue<int>(Columns.DocumentoId); }
			set { SetColumnValue(Columns.DocumentoId, value); }
		}
		  
		[XmlAttribute("Nombre")]
		[Bindable(true)]
		public string Nombre 
		{
			get { return GetColumnValue<string>(Columns.Nombre); }
			set { SetColumnValue(Columns.Nombre, value); }
		}
		  
		[XmlAttribute("Regsitrable")]
		[Bindable(true)]
		public bool Regsitrable 
		{
			get { return GetColumnValue<bool>(Columns.Regsitrable); }
			set { SetColumnValue(Columns.Regsitrable, value); }
		}
		  
		[XmlAttribute("CostoOriginal")]
		[Bindable(true)]
		public decimal CostoOriginal 
		{
			get { return GetColumnValue<decimal>(Columns.CostoOriginal); }
			set { SetColumnValue(Columns.CostoOriginal, value); }
		}
		  
		[XmlAttribute("CostoCopia")]
		[Bindable(true)]
		public decimal CostoCopia 
		{
			get { return GetColumnValue<decimal>(Columns.CostoCopia); }
			set { SetColumnValue(Columns.CostoCopia, value); }
		}
		  
		[XmlAttribute("FechaModificacion")]
		[Bindable(true)]
		public DateTime FechaModificacion 
		{
			get { return GetColumnValue<DateTime>(Columns.FechaModificacion); }
			set { SetColumnValue(Columns.FechaModificacion, value); }
		}
		  
		[XmlAttribute("Rowguid")]
		[Bindable(true)]
		public Guid Rowguid 
		{
			get { return GetColumnValue<Guid>(Columns.Rowguid); }
			set { SetColumnValue(Columns.Rowguid, value); }
		}
		  
		[XmlAttribute("Visible")]
		[Bindable(true)]
		public bool? Visible 
		{
			get { return GetColumnValue<bool?>(Columns.Visible); }
			set { SetColumnValue(Columns.Visible, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public CamaraComercio.DataAccess.SRM.HistoricosDocumentosCollection HistoricosDocumentosRecords()
		{
			return new CamaraComercio.DataAccess.SRM.HistoricosDocumentosCollection().Where(HistoricosDocumentos.Columns.DocumentoId, DocumentoId).Load();
		}
		public CamaraComercio.DataAccess.SRM.DocumentosReglasCollection DocumentosReglasRecords()
		{
			return new CamaraComercio.DataAccess.SRM.DocumentosReglasCollection().Where(DocumentosReglas.Columns.DocumentoId, DocumentoId).Load();
		}
		public CamaraComercio.DataAccess.SRM.DocumentosTransaccionesCollection DocumentosTransaccionesRecords()
		{
			return new CamaraComercio.DataAccess.SRM.DocumentosTransaccionesCollection().Where(DocumentosTransacciones.Columns.DocumentoId, DocumentoId).Load();
		}
		public CamaraComercio.DataAccess.SRM.TransaccionDocumentosRequisitosCollection TransaccionDocumentosRequisitosRecords()
		{
			return new CamaraComercio.DataAccess.SRM.TransaccionDocumentosRequisitosCollection().Where(TransaccionDocumentosRequisitos.Columns.DocumentoId, DocumentoId).Load();
		}
		public CamaraComercio.DataAccess.SRM.TransaccionesDocumentosReglasCollection TransaccionesDocumentosReglasRecords()
		{
			return new CamaraComercio.DataAccess.SRM.TransaccionesDocumentosReglasCollection().Where(TransaccionesDocumentosReglas.Columns.DocumentoId, DocumentoId).Load();
		}
		#endregion
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varNombre,bool varRegsitrable,decimal varCostoOriginal,decimal varCostoCopia,DateTime varFechaModificacion,Guid varRowguid,bool? varVisible)
		{
			Documentos item = new Documentos();
			
			item.Nombre = varNombre;
			
			item.Regsitrable = varRegsitrable;
			
			item.CostoOriginal = varCostoOriginal;
			
			item.CostoCopia = varCostoCopia;
			
			item.FechaModificacion = varFechaModificacion;
			
			item.Rowguid = varRowguid;
			
			item.Visible = varVisible;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varDocumentoId,string varNombre,bool varRegsitrable,decimal varCostoOriginal,decimal varCostoCopia,DateTime varFechaModificacion,Guid varRowguid,bool? varVisible)
		{
			Documentos item = new Documentos();
			
				item.DocumentoId = varDocumentoId;
			
				item.Nombre = varNombre;
			
				item.Regsitrable = varRegsitrable;
			
				item.CostoOriginal = varCostoOriginal;
			
				item.CostoCopia = varCostoCopia;
			
				item.FechaModificacion = varFechaModificacion;
			
				item.Rowguid = varRowguid;
			
				item.Visible = varVisible;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn DocumentoIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn NombreColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn RegsitrableColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn CostoOriginalColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn CostoCopiaColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn FechaModificacionColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn RowguidColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn VisibleColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string DocumentoId = @"DocumentoId";
			 public static string Nombre = @"Nombre";
			 public static string Regsitrable = @"Regsitrable";
			 public static string CostoOriginal = @"CostoOriginal";
			 public static string CostoCopia = @"CostoCopia";
			 public static string FechaModificacion = @"FechaModificacion";
			 public static string Rowguid = @"rowguid";
			 public static string Visible = @"Visible";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
