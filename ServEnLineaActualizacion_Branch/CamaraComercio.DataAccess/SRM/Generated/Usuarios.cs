using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace CamaraComercio.DataAccess.SRM
{
	/// <summary>
	/// Strongly-typed collection for the Usuarios class.
	/// </summary>
    [Serializable]
	public partial class UsuariosCollection : ActiveList<Usuarios, UsuariosCollection>
	{	   
		public UsuariosCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>UsuariosCollection</returns>
		public UsuariosCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Usuarios o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Usuarios table.
	/// </summary>
	[Serializable]
	public partial class Usuarios : ActiveRecord<Usuarios>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public Usuarios()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public Usuarios(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public Usuarios(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public Usuarios(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Usuarios", TableType.Table, DataService.GetInstance("SrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarUsuarioId = new TableSchema.TableColumn(schema);
				colvarUsuarioId.ColumnName = "UsuarioId";
				colvarUsuarioId.DataType = DbType.Int32;
				colvarUsuarioId.MaxLength = 0;
				colvarUsuarioId.AutoIncrement = true;
				colvarUsuarioId.IsNullable = false;
				colvarUsuarioId.IsPrimaryKey = true;
				colvarUsuarioId.IsForeignKey = false;
				colvarUsuarioId.IsReadOnly = false;
				colvarUsuarioId.DefaultSetting = @"";
				colvarUsuarioId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUsuarioId);
				
				TableSchema.TableColumn colvarNombreUsuario = new TableSchema.TableColumn(schema);
				colvarNombreUsuario.ColumnName = "NombreUsuario";
				colvarNombreUsuario.DataType = DbType.String;
				colvarNombreUsuario.MaxLength = 30;
				colvarNombreUsuario.AutoIncrement = false;
				colvarNombreUsuario.IsNullable = false;
				colvarNombreUsuario.IsPrimaryKey = false;
				colvarNombreUsuario.IsForeignKey = false;
				colvarNombreUsuario.IsReadOnly = false;
				colvarNombreUsuario.DefaultSetting = @"";
				colvarNombreUsuario.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNombreUsuario);
				
				TableSchema.TableColumn colvarNombreCompleto = new TableSchema.TableColumn(schema);
				colvarNombreCompleto.ColumnName = "NombreCompleto";
				colvarNombreCompleto.DataType = DbType.String;
				colvarNombreCompleto.MaxLength = 100;
				colvarNombreCompleto.AutoIncrement = false;
				colvarNombreCompleto.IsNullable = true;
				colvarNombreCompleto.IsPrimaryKey = false;
				colvarNombreCompleto.IsForeignKey = false;
				colvarNombreCompleto.IsReadOnly = false;
				colvarNombreCompleto.DefaultSetting = @"";
				colvarNombreCompleto.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNombreCompleto);
				
				TableSchema.TableColumn colvarDominio = new TableSchema.TableColumn(schema);
				colvarDominio.ColumnName = "Dominio";
				colvarDominio.DataType = DbType.String;
				colvarDominio.MaxLength = 100;
				colvarDominio.AutoIncrement = false;
				colvarDominio.IsNullable = true;
				colvarDominio.IsPrimaryKey = false;
				colvarDominio.IsForeignKey = false;
				colvarDominio.IsReadOnly = false;
				colvarDominio.DefaultSetting = @"";
				colvarDominio.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDominio);
				
				TableSchema.TableColumn colvarAdministrador = new TableSchema.TableColumn(schema);
				colvarAdministrador.ColumnName = "Administrador";
				colvarAdministrador.DataType = DbType.Boolean;
				colvarAdministrador.MaxLength = 0;
				colvarAdministrador.AutoIncrement = false;
				colvarAdministrador.IsNullable = false;
				colvarAdministrador.IsPrimaryKey = false;
				colvarAdministrador.IsForeignKey = false;
				colvarAdministrador.IsReadOnly = false;
				
						colvarAdministrador.DefaultSetting = @"((0))";
				colvarAdministrador.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAdministrador);
				
				TableSchema.TableColumn colvarEmail = new TableSchema.TableColumn(schema);
				colvarEmail.ColumnName = "Email";
				colvarEmail.DataType = DbType.String;
				colvarEmail.MaxLength = 100;
				colvarEmail.AutoIncrement = false;
				colvarEmail.IsNullable = true;
				colvarEmail.IsPrimaryKey = false;
				colvarEmail.IsForeignKey = false;
				colvarEmail.IsReadOnly = false;
				colvarEmail.DefaultSetting = @"";
				colvarEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmail);
				
				TableSchema.TableColumn colvarUsuarioActivo = new TableSchema.TableColumn(schema);
				colvarUsuarioActivo.ColumnName = "UsuarioActivo";
				colvarUsuarioActivo.DataType = DbType.Boolean;
				colvarUsuarioActivo.MaxLength = 0;
				colvarUsuarioActivo.AutoIncrement = false;
				colvarUsuarioActivo.IsNullable = false;
				colvarUsuarioActivo.IsPrimaryKey = false;
				colvarUsuarioActivo.IsForeignKey = false;
				colvarUsuarioActivo.IsReadOnly = false;
				
						colvarUsuarioActivo.DefaultSetting = @"((0))";
				colvarUsuarioActivo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUsuarioActivo);
				
				TableSchema.TableColumn colvarAutentificacionId = new TableSchema.TableColumn(schema);
				colvarAutentificacionId.ColumnName = "AutentificacionId";
				colvarAutentificacionId.DataType = DbType.Binary;
				colvarAutentificacionId.MaxLength = 20;
				colvarAutentificacionId.AutoIncrement = false;
				colvarAutentificacionId.IsNullable = true;
				colvarAutentificacionId.IsPrimaryKey = false;
				colvarAutentificacionId.IsForeignKey = false;
				colvarAutentificacionId.IsReadOnly = false;
				colvarAutentificacionId.DefaultSetting = @"";
				colvarAutentificacionId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAutentificacionId);
				
				TableSchema.TableColumn colvarContadorAsignaciones = new TableSchema.TableColumn(schema);
				colvarContadorAsignaciones.ColumnName = "ContadorAsignaciones";
				colvarContadorAsignaciones.DataType = DbType.Int32;
				colvarContadorAsignaciones.MaxLength = 0;
				colvarContadorAsignaciones.AutoIncrement = false;
				colvarContadorAsignaciones.IsNullable = false;
				colvarContadorAsignaciones.IsPrimaryKey = false;
				colvarContadorAsignaciones.IsForeignKey = false;
				colvarContadorAsignaciones.IsReadOnly = false;
				
						colvarContadorAsignaciones.DefaultSetting = @"((0))";
				colvarContadorAsignaciones.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContadorAsignaciones);
				
				TableSchema.TableColumn colvarFechaModificacion = new TableSchema.TableColumn(schema);
				colvarFechaModificacion.ColumnName = "FechaModificacion";
				colvarFechaModificacion.DataType = DbType.DateTime;
				colvarFechaModificacion.MaxLength = 0;
				colvarFechaModificacion.AutoIncrement = false;
				colvarFechaModificacion.IsNullable = false;
				colvarFechaModificacion.IsPrimaryKey = false;
				colvarFechaModificacion.IsForeignKey = false;
				colvarFechaModificacion.IsReadOnly = false;
				
						colvarFechaModificacion.DefaultSetting = @"(getdate())";
				colvarFechaModificacion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFechaModificacion);
				
				TableSchema.TableColumn colvarRowguid = new TableSchema.TableColumn(schema);
				colvarRowguid.ColumnName = "rowguid";
				colvarRowguid.DataType = DbType.Guid;
				colvarRowguid.MaxLength = 0;
				colvarRowguid.AutoIncrement = false;
				colvarRowguid.IsNullable = false;
				colvarRowguid.IsPrimaryKey = false;
				colvarRowguid.IsForeignKey = false;
				colvarRowguid.IsReadOnly = false;
				
						colvarRowguid.DefaultSetting = @"(newid())";
				colvarRowguid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRowguid);
				
				TableSchema.TableColumn colvarNombreUsuarioReferencia = new TableSchema.TableColumn(schema);
				colvarNombreUsuarioReferencia.ColumnName = "NombreUsuarioReferencia";
				colvarNombreUsuarioReferencia.DataType = DbType.String;
				colvarNombreUsuarioReferencia.MaxLength = 30;
				colvarNombreUsuarioReferencia.AutoIncrement = false;
				colvarNombreUsuarioReferencia.IsNullable = true;
				colvarNombreUsuarioReferencia.IsPrimaryKey = false;
				colvarNombreUsuarioReferencia.IsForeignKey = false;
				colvarNombreUsuarioReferencia.IsReadOnly = false;
				colvarNombreUsuarioReferencia.DefaultSetting = @"";
				colvarNombreUsuarioReferencia.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNombreUsuarioReferencia);
				
				TableSchema.TableColumn colvarContadorRecibo = new TableSchema.TableColumn(schema);
				colvarContadorRecibo.ColumnName = "ContadorRecibo";
				colvarContadorRecibo.DataType = DbType.Int32;
				colvarContadorRecibo.MaxLength = 0;
				colvarContadorRecibo.AutoIncrement = false;
				colvarContadorRecibo.IsNullable = true;
				colvarContadorRecibo.IsPrimaryKey = false;
				colvarContadorRecibo.IsForeignKey = false;
				colvarContadorRecibo.IsReadOnly = false;
				colvarContadorRecibo.DefaultSetting = @"";
				colvarContadorRecibo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContadorRecibo);
				
				TableSchema.TableColumn colvarReceptor = new TableSchema.TableColumn(schema);
				colvarReceptor.ColumnName = "Receptor";
				colvarReceptor.DataType = DbType.Boolean;
				colvarReceptor.MaxLength = 0;
				colvarReceptor.AutoIncrement = false;
				colvarReceptor.IsNullable = true;
				colvarReceptor.IsPrimaryKey = false;
				colvarReceptor.IsForeignKey = false;
				colvarReceptor.IsReadOnly = false;
				colvarReceptor.DefaultSetting = @"";
				colvarReceptor.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReceptor);
				
				TableSchema.TableColumn colvarFirma = new TableSchema.TableColumn(schema);
				colvarFirma.ColumnName = "Firma";
				colvarFirma.DataType = DbType.Boolean;
				colvarFirma.MaxLength = 0;
				colvarFirma.AutoIncrement = false;
				colvarFirma.IsNullable = true;
				colvarFirma.IsPrimaryKey = false;
				colvarFirma.IsForeignKey = false;
				colvarFirma.IsReadOnly = false;
				colvarFirma.DefaultSetting = @"";
				colvarFirma.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFirma);
				
				TableSchema.TableColumn colvarEnCalidadDe = new TableSchema.TableColumn(schema);
				colvarEnCalidadDe.ColumnName = "EnCalidadDe";
				colvarEnCalidadDe.DataType = DbType.AnsiString;
				colvarEnCalidadDe.MaxLength = 150;
				colvarEnCalidadDe.AutoIncrement = false;
				colvarEnCalidadDe.IsNullable = true;
				colvarEnCalidadDe.IsPrimaryKey = false;
				colvarEnCalidadDe.IsForeignKey = false;
				colvarEnCalidadDe.IsReadOnly = false;
				colvarEnCalidadDe.DefaultSetting = @"";
				colvarEnCalidadDe.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEnCalidadDe);
				
				TableSchema.TableColumn colvarIniciales = new TableSchema.TableColumn(schema);
				colvarIniciales.ColumnName = "Iniciales";
				colvarIniciales.DataType = DbType.AnsiString;
				colvarIniciales.MaxLength = 5;
				colvarIniciales.AutoIncrement = false;
				colvarIniciales.IsNullable = false;
				colvarIniciales.IsPrimaryKey = false;
				colvarIniciales.IsForeignKey = false;
				colvarIniciales.IsReadOnly = false;
				colvarIniciales.DefaultSetting = @"";
				colvarIniciales.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIniciales);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["SrmProvider"].AddSchema("Usuarios",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("UsuarioId")]
		[Bindable(true)]
		public int UsuarioId 
		{
			get { return GetColumnValue<int>(Columns.UsuarioId); }
			set { SetColumnValue(Columns.UsuarioId, value); }
		}
		  
		[XmlAttribute("NombreUsuario")]
		[Bindable(true)]
		public string NombreUsuario 
		{
			get { return GetColumnValue<string>(Columns.NombreUsuario); }
			set { SetColumnValue(Columns.NombreUsuario, value); }
		}
		  
		[XmlAttribute("NombreCompleto")]
		[Bindable(true)]
		public string NombreCompleto 
		{
			get { return GetColumnValue<string>(Columns.NombreCompleto); }
			set { SetColumnValue(Columns.NombreCompleto, value); }
		}
		  
		[XmlAttribute("Dominio")]
		[Bindable(true)]
		public string Dominio 
		{
			get { return GetColumnValue<string>(Columns.Dominio); }
			set { SetColumnValue(Columns.Dominio, value); }
		}
		  
		[XmlAttribute("Administrador")]
		[Bindable(true)]
		public bool Administrador 
		{
			get { return GetColumnValue<bool>(Columns.Administrador); }
			set { SetColumnValue(Columns.Administrador, value); }
		}
		  
		[XmlAttribute("Email")]
		[Bindable(true)]
		public string Email 
		{
			get { return GetColumnValue<string>(Columns.Email); }
			set { SetColumnValue(Columns.Email, value); }
		}
		  
		[XmlAttribute("UsuarioActivo")]
		[Bindable(true)]
		public bool UsuarioActivo 
		{
			get { return GetColumnValue<bool>(Columns.UsuarioActivo); }
			set { SetColumnValue(Columns.UsuarioActivo, value); }
		}
		  
		[XmlAttribute("AutentificacionId")]
		[Bindable(true)]
		public byte[] AutentificacionId 
		{
			get { return GetColumnValue<byte[]>(Columns.AutentificacionId); }
			set { SetColumnValue(Columns.AutentificacionId, value); }
		}
		  
		[XmlAttribute("ContadorAsignaciones")]
		[Bindable(true)]
		public int ContadorAsignaciones 
		{
			get { return GetColumnValue<int>(Columns.ContadorAsignaciones); }
			set { SetColumnValue(Columns.ContadorAsignaciones, value); }
		}
		  
		[XmlAttribute("FechaModificacion")]
		[Bindable(true)]
		public DateTime FechaModificacion 
		{
			get { return GetColumnValue<DateTime>(Columns.FechaModificacion); }
			set { SetColumnValue(Columns.FechaModificacion, value); }
		}
		  
		[XmlAttribute("Rowguid")]
		[Bindable(true)]
		public Guid Rowguid 
		{
			get { return GetColumnValue<Guid>(Columns.Rowguid); }
			set { SetColumnValue(Columns.Rowguid, value); }
		}
		  
		[XmlAttribute("NombreUsuarioReferencia")]
		[Bindable(true)]
		public string NombreUsuarioReferencia 
		{
			get { return GetColumnValue<string>(Columns.NombreUsuarioReferencia); }
			set { SetColumnValue(Columns.NombreUsuarioReferencia, value); }
		}
		  
		[XmlAttribute("ContadorRecibo")]
		[Bindable(true)]
		public int? ContadorRecibo 
		{
			get { return GetColumnValue<int?>(Columns.ContadorRecibo); }
			set { SetColumnValue(Columns.ContadorRecibo, value); }
		}
		  
		[XmlAttribute("Receptor")]
		[Bindable(true)]
		public bool? Receptor 
		{
			get { return GetColumnValue<bool?>(Columns.Receptor); }
			set { SetColumnValue(Columns.Receptor, value); }
		}
		  
		[XmlAttribute("Firma")]
		[Bindable(true)]
		public bool? Firma 
		{
			get { return GetColumnValue<bool?>(Columns.Firma); }
			set { SetColumnValue(Columns.Firma, value); }
		}
		  
		[XmlAttribute("EnCalidadDe")]
		[Bindable(true)]
		public string EnCalidadDe 
		{
			get { return GetColumnValue<string>(Columns.EnCalidadDe); }
			set { SetColumnValue(Columns.EnCalidadDe, value); }
		}
		  
		[XmlAttribute("Iniciales")]
		[Bindable(true)]
		public string Iniciales 
		{
			get { return GetColumnValue<string>(Columns.Iniciales); }
			set { SetColumnValue(Columns.Iniciales, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public CamaraComercio.DataAccess.SRM.UsuariosContadoresCollection UsuariosContadoresRecords()
		{
			return new CamaraComercio.DataAccess.SRM.UsuariosContadoresCollection().Where(UsuariosContadores.Columns.UsuarioId, UsuarioId).Load();
		}
		public CamaraComercio.DataAccess.SRM.UsuariosRolesCollection UsuariosRolesRecords()
		{
			return new CamaraComercio.DataAccess.SRM.UsuariosRolesCollection().Where(UsuariosRoles.Columns.UsuarioId, UsuarioId).Load();
		}
		#endregion
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varNombreUsuario,string varNombreCompleto,string varDominio,bool varAdministrador,string varEmail,bool varUsuarioActivo,byte[] varAutentificacionId,int varContadorAsignaciones,DateTime varFechaModificacion,Guid varRowguid,string varNombreUsuarioReferencia,int? varContadorRecibo,bool? varReceptor,bool? varFirma,string varEnCalidadDe,string varIniciales)
		{
			Usuarios item = new Usuarios();
			
			item.NombreUsuario = varNombreUsuario;
			
			item.NombreCompleto = varNombreCompleto;
			
			item.Dominio = varDominio;
			
			item.Administrador = varAdministrador;
			
			item.Email = varEmail;
			
			item.UsuarioActivo = varUsuarioActivo;
			
			item.AutentificacionId = varAutentificacionId;
			
			item.ContadorAsignaciones = varContadorAsignaciones;
			
			item.FechaModificacion = varFechaModificacion;
			
			item.Rowguid = varRowguid;
			
			item.NombreUsuarioReferencia = varNombreUsuarioReferencia;
			
			item.ContadorRecibo = varContadorRecibo;
			
			item.Receptor = varReceptor;
			
			item.Firma = varFirma;
			
			item.EnCalidadDe = varEnCalidadDe;
			
			item.Iniciales = varIniciales;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varUsuarioId,string varNombreUsuario,string varNombreCompleto,string varDominio,bool varAdministrador,string varEmail,bool varUsuarioActivo,byte[] varAutentificacionId,int varContadorAsignaciones,DateTime varFechaModificacion,Guid varRowguid,string varNombreUsuarioReferencia,int? varContadorRecibo,bool? varReceptor,bool? varFirma,string varEnCalidadDe,string varIniciales)
		{
			Usuarios item = new Usuarios();
			
				item.UsuarioId = varUsuarioId;
			
				item.NombreUsuario = varNombreUsuario;
			
				item.NombreCompleto = varNombreCompleto;
			
				item.Dominio = varDominio;
			
				item.Administrador = varAdministrador;
			
				item.Email = varEmail;
			
				item.UsuarioActivo = varUsuarioActivo;
			
				item.AutentificacionId = varAutentificacionId;
			
				item.ContadorAsignaciones = varContadorAsignaciones;
			
				item.FechaModificacion = varFechaModificacion;
			
				item.Rowguid = varRowguid;
			
				item.NombreUsuarioReferencia = varNombreUsuarioReferencia;
			
				item.ContadorRecibo = varContadorRecibo;
			
				item.Receptor = varReceptor;
			
				item.Firma = varFirma;
			
				item.EnCalidadDe = varEnCalidadDe;
			
				item.Iniciales = varIniciales;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn UsuarioIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn NombreUsuarioColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn NombreCompletoColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn DominioColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn AdministradorColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn EmailColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn UsuarioActivoColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn AutentificacionIdColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ContadorAsignacionesColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn FechaModificacionColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn RowguidColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn NombreUsuarioReferenciaColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn ContadorReciboColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn ReceptorColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn FirmaColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn EnCalidadDeColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn InicialesColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string UsuarioId = @"UsuarioId";
			 public static string NombreUsuario = @"NombreUsuario";
			 public static string NombreCompleto = @"NombreCompleto";
			 public static string Dominio = @"Dominio";
			 public static string Administrador = @"Administrador";
			 public static string Email = @"Email";
			 public static string UsuarioActivo = @"UsuarioActivo";
			 public static string AutentificacionId = @"AutentificacionId";
			 public static string ContadorAsignaciones = @"ContadorAsignaciones";
			 public static string FechaModificacion = @"FechaModificacion";
			 public static string Rowguid = @"rowguid";
			 public static string NombreUsuarioReferencia = @"NombreUsuarioReferencia";
			 public static string ContadorRecibo = @"ContadorRecibo";
			 public static string Receptor = @"Receptor";
			 public static string Firma = @"Firma";
			 public static string EnCalidadDe = @"EnCalidadDe";
			 public static string Iniciales = @"Iniciales";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
