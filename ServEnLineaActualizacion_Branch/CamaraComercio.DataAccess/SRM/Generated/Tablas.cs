using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace CamaraComercio.DataAccess.SRM{
    /// <summary>
    /// Strongly-typed collection for the Tablas class.
    /// </summary>
    [Serializable]
    public partial class TablasCollection : ReadOnlyList<Tablas, TablasCollection>
    {        
        public TablasCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the TABLAS view.
    /// </summary>
    [Serializable]
    public partial class Tablas : ReadOnlyRecord<Tablas>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("TABLAS", TableType.View, DataService.GetInstance("SrmProvider"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"SRM_INFORMATION_SCHEMA";
                //columns
                
                TableSchema.TableColumn colvarNombreTabla = new TableSchema.TableColumn(schema);
                colvarNombreTabla.ColumnName = "NOMBRE_TABLA";
                colvarNombreTabla.DataType = DbType.String;
                colvarNombreTabla.MaxLength = -1;
                colvarNombreTabla.AutoIncrement = false;
                colvarNombreTabla.IsNullable = false;
                colvarNombreTabla.IsPrimaryKey = false;
                colvarNombreTabla.IsForeignKey = false;
                colvarNombreTabla.IsReadOnly = false;
                
                schema.Columns.Add(colvarNombreTabla);
                
                TableSchema.TableColumn colvarNombreEsquema = new TableSchema.TableColumn(schema);
                colvarNombreEsquema.ColumnName = "NOMBRE_ESQUEMA";
                colvarNombreEsquema.DataType = DbType.String;
                colvarNombreEsquema.MaxLength = -1;
                colvarNombreEsquema.AutoIncrement = false;
                colvarNombreEsquema.IsNullable = false;
                colvarNombreEsquema.IsPrimaryKey = false;
                colvarNombreEsquema.IsForeignKey = false;
                colvarNombreEsquema.IsReadOnly = false;
                
                schema.Columns.Add(colvarNombreEsquema);
                
                TableSchema.TableColumn colvarTablaDefault = new TableSchema.TableColumn(schema);
                colvarTablaDefault.ColumnName = "TABLA_DEFAULT";
                colvarTablaDefault.DataType = DbType.Boolean;
                colvarTablaDefault.MaxLength = 0;
                colvarTablaDefault.AutoIncrement = false;
                colvarTablaDefault.IsNullable = false;
                colvarTablaDefault.IsPrimaryKey = false;
                colvarTablaDefault.IsForeignKey = false;
                colvarTablaDefault.IsReadOnly = false;
                
                schema.Columns.Add(colvarTablaDefault);
                
                TableSchema.TableColumn colvarNombreTablaCorto = new TableSchema.TableColumn(schema);
                colvarNombreTablaCorto.ColumnName = "NOMBRE_TABLA_CORTO";
                colvarNombreTablaCorto.DataType = DbType.String;
                colvarNombreTablaCorto.MaxLength = 50;
                colvarNombreTablaCorto.AutoIncrement = false;
                colvarNombreTablaCorto.IsNullable = false;
                colvarNombreTablaCorto.IsPrimaryKey = false;
                colvarNombreTablaCorto.IsForeignKey = false;
                colvarNombreTablaCorto.IsReadOnly = false;
                
                schema.Columns.Add(colvarNombreTablaCorto);
                
                TableSchema.TableColumn colvarFromTabla = new TableSchema.TableColumn(schema);
                colvarFromTabla.ColumnName = "FROM_TABLA";
                colvarFromTabla.DataType = DbType.String;
                colvarFromTabla.MaxLength = -1;
                colvarFromTabla.AutoIncrement = false;
                colvarFromTabla.IsNullable = false;
                colvarFromTabla.IsPrimaryKey = false;
                colvarFromTabla.IsForeignKey = false;
                colvarFromTabla.IsReadOnly = false;
                
                schema.Columns.Add(colvarFromTabla);
                
                TableSchema.TableColumn colvarColumnaEnlace = new TableSchema.TableColumn(schema);
                colvarColumnaEnlace.ColumnName = "COLUMNA_ENLACE";
                colvarColumnaEnlace.DataType = DbType.String;
                colvarColumnaEnlace.MaxLength = -1;
                colvarColumnaEnlace.AutoIncrement = false;
                colvarColumnaEnlace.IsNullable = true;
                colvarColumnaEnlace.IsPrimaryKey = false;
                colvarColumnaEnlace.IsForeignKey = false;
                colvarColumnaEnlace.IsReadOnly = false;
                
                schema.Columns.Add(colvarColumnaEnlace);
                
                TableSchema.TableColumn colvarTipoEnlace = new TableSchema.TableColumn(schema);
                colvarTipoEnlace.ColumnName = "TIPO_ENLACE";
                colvarTipoEnlace.DataType = DbType.Int32;
                colvarTipoEnlace.MaxLength = 0;
                colvarTipoEnlace.AutoIncrement = false;
                colvarTipoEnlace.IsNullable = true;
                colvarTipoEnlace.IsPrimaryKey = false;
                colvarTipoEnlace.IsForeignKey = false;
                colvarTipoEnlace.IsReadOnly = false;
                
                schema.Columns.Add(colvarTipoEnlace);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["SrmProvider"].AddSchema("TABLAS",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public Tablas()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public Tablas(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public Tablas(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public Tablas(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("NombreTabla")]
        [Bindable(true)]
        public string NombreTabla 
	    {
		    get
		    {
			    return GetColumnValue<string>("NOMBRE_TABLA");
		    }
            set 
		    {
			    SetColumnValue("NOMBRE_TABLA", value);
            }
        }
	      
        [XmlAttribute("NombreEsquema")]
        [Bindable(true)]
        public string NombreEsquema 
	    {
		    get
		    {
			    return GetColumnValue<string>("NOMBRE_ESQUEMA");
		    }
            set 
		    {
			    SetColumnValue("NOMBRE_ESQUEMA", value);
            }
        }
	      
        [XmlAttribute("TablaDefault")]
        [Bindable(true)]
        public bool TablaDefault 
	    {
		    get
		    {
			    return GetColumnValue<bool>("TABLA_DEFAULT");
		    }
            set 
		    {
			    SetColumnValue("TABLA_DEFAULT", value);
            }
        }
	      
        [XmlAttribute("NombreTablaCorto")]
        [Bindable(true)]
        public string NombreTablaCorto 
	    {
		    get
		    {
			    return GetColumnValue<string>("NOMBRE_TABLA_CORTO");
		    }
            set 
		    {
			    SetColumnValue("NOMBRE_TABLA_CORTO", value);
            }
        }
	      
        [XmlAttribute("FromTabla")]
        [Bindable(true)]
        public string FromTabla 
	    {
		    get
		    {
			    return GetColumnValue<string>("FROM_TABLA");
		    }
            set 
		    {
			    SetColumnValue("FROM_TABLA", value);
            }
        }
	      
        [XmlAttribute("ColumnaEnlace")]
        [Bindable(true)]
        public string ColumnaEnlace 
	    {
		    get
		    {
			    return GetColumnValue<string>("COLUMNA_ENLACE");
		    }
            set 
		    {
			    SetColumnValue("COLUMNA_ENLACE", value);
            }
        }
	      
        [XmlAttribute("TipoEnlace")]
        [Bindable(true)]
        public int? TipoEnlace 
	    {
		    get
		    {
			    return GetColumnValue<int?>("TIPO_ENLACE");
		    }
            set 
		    {
			    SetColumnValue("TIPO_ENLACE", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string NombreTabla = @"NOMBRE_TABLA";
            
            public static string NombreEsquema = @"NOMBRE_ESQUEMA";
            
            public static string TablaDefault = @"TABLA_DEFAULT";
            
            public static string NombreTablaCorto = @"NOMBRE_TABLA_CORTO";
            
            public static string FromTabla = @"FROM_TABLA";
            
            public static string ColumnaEnlace = @"COLUMNA_ENLACE";
            
            public static string TipoEnlace = @"TIPO_ENLACE";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
